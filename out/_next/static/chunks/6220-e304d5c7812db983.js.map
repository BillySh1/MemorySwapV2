{"version":3,"file":"static/chunks/6220-e304d5c7812db983.js","mappings":"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","sources":["webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchIfoPoolUser.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchIfoPoolPublic.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchPublicVaultData.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchIfoPool.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/fetchPoolsUser.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchUserPools.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport { multicallv2 } from 'utils/multicall'\n\nconst fetchIfoPoolUser = async (account: string, ifoPoolAddress: string) => {\n  try {\n    const calls = ['userInfo', 'getUserCredit'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n      params: [account],\n    }))\n    const [userContractResponse, creditResponse] = await multicallv2(ifoPoolAbi, calls)\n\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\n      credit: new BigNumber(creditResponse.avgBalance.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n      credit: null,\n    }\n  }\n}\n\nexport default fetchIfoPoolUser\n","import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nexport const fetchPublicIfoPoolData = async (ifoPoolAddress: string) => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'startBlock', 'endBlock'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n    }))\n\n    const [[sharePrice], [shares], [startBlock], [endBlock]] = await multicallv2(ifoPoolAbi, calls)\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      creditStartBlock: startBlock.toNumber(),\n      creditEndBlock: endBlock.toNumber(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n    }\n  }\n}\n\nexport const fetchIfoPoolFeesData = async (ifoPoolAddress: string) => {\n  try {\n    const calls = ['performanceFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: ifoPoolAddress,\n      name: method,\n    }))\n\n    const [[performanceFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(ifoPoolAbi, calls)\n\n    return {\n      performanceFee: performanceFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicIfoPoolData\n","import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVaultV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nexport const fetchPublicVaultData = async (cakeVaultAddress: string) => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'totalLockedAmount'].map((method) => ({\n      address: cakeVaultAddress,\n      name: method,\n    }))\n    const [[sharePrice], [shares], totalLockedAmount] = await multicallv2(cakeVaultAbi, calls, {\n      requireSuccess: false,\n    })\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const totalLockedAmountAsBigNumber = totalLockedAmount ? new BigNumber(totalLockedAmount[0].toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      totalLockedAmount: totalLockedAmountAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      totalLockedAmount: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n    }\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport fetchIfoPoolUser from 'views/Migration/hook/V1/Pool/fetchIfoPoolUser'\nimport { fetchPublicIfoPoolData, fetchIfoPoolFeesData } from 'views/Migration/hook/V1/Pool/fetchIfoPoolPublic'\nimport { initialPoolVaultState } from 'state/pools/index'\nimport useSWR from 'swr'\nimport { fetchVaultFees } from 'state/pools/fetchVaultPublic'\nimport type { Signer } from '@ethersproject/abstract-signer'\nimport type { Provider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { simpleRpcProvider } from 'utils/providers'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { FAST_INTERVAL } from 'config/constants'\nimport { VaultKey } from 'state/types'\nimport { fetchPublicVaultData } from './fetchPublicVaultData'\n\nexport const ifoPoolV1Contract = '0x1B2A2f6ed4A1401E8C73B4c2B6172455ce2f78E8'\nexport const cakeVaultAddress = '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC'\n\nconst getCakeVaultContract = (signer?: Signer | Provider) => {\n  const signerOrProvider = signer ?? simpleRpcProvider\n  return new Contract(cakeVaultAddress, cakeVaultAbi, signerOrProvider) as any\n}\n\nconst fetchVaultUserV1 = async (account: string) => {\n  const contract = getCakeVaultContract()\n  try {\n    const userContractResponse = await contract.userInfo(account)\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n    }\n  }\n}\n\nconst getIfoPoolData = async (account) => {\n  const [ifoData, userData, feesData] = await Promise.all([\n    fetchPublicIfoPoolData(ifoPoolV1Contract),\n    fetchIfoPoolUser(account, ifoPoolV1Contract),\n    fetchIfoPoolFeesData(ifoPoolV1Contract),\n  ])\n  const ifoPoolData = {\n    ...ifoData,\n    fees: { ...feesData },\n    userData: { ...userData, isLoading: false },\n  }\n  return transformData(ifoPoolData)\n}\n\nconst getCakePoolData = async (account) => {\n  const [vaultData, userData, feesData] = await Promise.all([\n    fetchPublicVaultData(cakeVaultAddress),\n    fetchVaultUserV1(account),\n    fetchVaultFees(cakeVaultAddress),\n  ])\n  const cakeData = {\n    ...vaultData,\n    fees: { ...feesData },\n    userData: { ...userData, isLoading: false },\n  }\n  return transformData(cakeData)\n}\n\nconst transformData = ({\n  totalShares,\n  pricePerFullShare,\n  totalCakeInVault,\n  fees: { performanceFee, withdrawalFee, withdrawalFeePeriod },\n  userData: { isLoading, userShares, cakeAtLastUserAction, lastDepositedTime, lastUserActionTime },\n}) => {\n  return {\n    totalShares: new BigNumber(totalShares),\n    pricePerFullShare: new BigNumber(pricePerFullShare),\n    totalCakeInVault: new BigNumber(totalCakeInVault),\n    fees: {\n      performanceFeeAsDecimal: performanceFee && performanceFee / 100,\n      performanceFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares: new BigNumber(userShares),\n      cakeAtLastUserAction: new BigNumber(cakeAtLastUserAction),\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\nexport const useVaultPoolByKeyV1 = (key: VaultKey) => {\n  const { account } = useWeb3React()\n  const { data, mutate } = useSWR(\n    account ? [key, 'v1'] : null,\n    async () => {\n      if (key === VaultKey.IfoPool) {\n        return getIfoPoolData(account)\n      }\n      return getCakePoolData(account)\n    },\n    {\n      revalidateOnFocus: false,\n      refreshInterval: FAST_INTERVAL,\n      dedupingInterval: FAST_INTERVAL,\n    },\n  )\n\n  return {\n    vaultPoolData: data || initialPoolVaultState,\n    fetchPoolData: mutate,\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { getMasterchefV1Contract } from 'utils/contractHelpers'\n\nexport const fetchUserStakeBalances = async (account) => {\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await getMasterchefV1Contract().userInfo('0', account)\n  return new BigNumber(masterPoolAmount.toString()).toJSON()\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  // Cake / Cake pool\n  const pendingReward = await getMasterchefV1Contract().pendingCake('0', account)\n  return new BigNumber(pendingReward.toString()).toJSON()\n}\n","import { useCallback, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { SerializedPool } from 'state/types'\nimport { transformPool } from 'state/pools/helpers'\nimport { getCakeContract } from 'utils/contractHelpers'\nimport { CHAIN_ID } from 'config/constants/networks'\nimport { PoolCategory } from 'config/constants/types'\nimport { serializeTokens } from 'config/constants/tokens'\nimport { fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser'\n\nexport interface PoolsState {\n  data: SerializedPool\n  userDataLoaded: boolean\n}\n\nconst serializedTokens = serializeTokens()\nconst cakeContract = getCakeContract()\n\nconst initialData = {\n  data: {\n    sousId: 0,\n    stakingToken: serializedTokens.cake,\n    earningToken: serializedTokens.cake,\n    contractAddress: {\n      322: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\n      321: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '10',\n    sortOrder: 1,\n    isFinished: false,\n    totalStaked: '0',\n  },\n  userDataLoaded: false,\n}\n\nexport const useFetchUserPools = (account) => {\n  const [userPoolsData, setPoolsUserData] = useState<PoolsState>(initialData)\n\n  const fetchUserPoolsData = useCallback(() => {\n    if (account) {\n      const fetchPoolsUserDataAsync = async () => {\n        try {\n          const [stakedBalances, pendingRewards, totalStaking] = await Promise.all([\n            fetchUserStakeBalances(account),\n            fetchUserPendingRewards(account),\n            cakeContract.balanceOf(initialData.data.contractAddress[CHAIN_ID]),\n          ])\n\n          const userData = {\n            sousId: initialData.data.sousId,\n            allowance: '0',\n            stakingTokenBalance: '0',\n            stakedBalance: stakedBalances,\n            pendingReward: pendingRewards,\n          }\n\n          setPoolsUserData((old) => ({\n            data: {\n              ...old.data,\n              userData,\n              totalStaked: new BigNumber(totalStaking.toString()).toJSON(),\n            },\n            userDataLoaded: true,\n          }))\n        } catch (error) {\n          console.error('[Pools Action] Error fetching pool user data', error)\n        }\n      }\n\n      fetchPoolsUserDataAsync()\n    }\n  }, [account])\n\n  useFastRefreshEffect(() => {\n    fetchUserPoolsData()\n  }, [fetchUserPoolsData])\n\n  return {\n    data: transformPool(userPoolsData.data),\n    userDataLoaded: userPoolsData.userDataLoaded,\n    fetchUserPoolsData,\n  }\n}\n"],"names":["fetchIfoPoolUser","account","ifoPoolAddress","calls","userContractResponse","creditResponse","map","method","address","name","params","multicallv2","ifoPoolAbi","isLoading","userShares","BigNumber","shares","toString","toJSON","lastDepositedTime","lastUserActionTime","cakeAtLastUserAction","credit","avgBalance","fetchPublicIfoPoolData","sharePrice","startBlock","endBlock","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","BIG_ZERO","convertSharesToCake","totalShares","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","creditStartBlock","toNumber","creditEndBlock","fetchIfoPoolFeesData","performanceFee","withdrawalFee","withdrawalFeePeriod","fetchPublicVaultData","cakeVaultAddress","totalLockedAmount","totalLockedAmountAsBigNumber","cakeVaultAbi","requireSuccess","ifoPoolV1Contract","getCakeVaultContract","signer","signerOrProvider","simpleRpcProvider","Contract","fetchVaultUserV1","contract","userInfo","getIfoPoolData","ifoData","userData","feesData","ifoPoolData","Promise","all","fees","transformData","getCakePoolData","vaultData","cakeData","fetchVaultFees","performanceFeeAsDecimal","useVaultPoolByKeyV1","key","useWeb3React","useSWR","VaultKey","revalidateOnFocus","refreshInterval","FAST_INTERVAL","dedupingInterval","data","mutate","vaultPoolData","initialPoolVaultState","fetchPoolData","fetchUserStakeBalances","masterPoolAmount","getMasterchefV1Contract","amount","fetchUserPendingRewards","pendingReward","pendingCake","serializedTokens","serializeTokens","cakeContract","getCakeContract","initialData","sousId","stakingToken","cake","earningToken","contractAddress","poolCategory","PoolCategory","harvest","tokenPerBlock","sortOrder","isFinished","totalStaked","userDataLoaded","useFetchUserPools","useState","fetchUserPoolsData","useCallback","fetchPoolsUserDataAsync","stakedBalances","pendingRewards","totalStaking","balanceOf","CHAIN_ID","allowance","stakingTokenBalance","stakedBalance","setPoolsUserData","old","console","error","useFastRefreshEffect","transformPool","userPoolsData"],"sourceRoot":""}