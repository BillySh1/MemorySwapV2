{"version":3,"file":"static/chunks/2763-012c5ad7c89ff3ce.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowForward.tsx","webpack://_N_E/./packages/uikit/src/components/Table/utils.ts","webpack://_N_E/./packages/uikit/src/components/Table/hooks.tsx","webpack://_N_E/./src/components/Modal/Spacer.tsx","webpack://_N_E/./src/components/Modal/ModalActions.tsx","webpack://_N_E/./src/components/Modal/ModalInput.tsx","webpack://_N_E/./src/utils/calls/estimateGas.ts","webpack://_N_E/./src/utils/calls/farms.ts","webpack://_N_E/./src/utils/calls/pools.ts","webpack://_N_E/./src/utils/getLiquidityUrlPathParts.ts","webpack://_N_E/./src/views/Farms/components/FarmTable/Farm.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Earned.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Details.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Multiplier.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Liquidity.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Actions/styles.ts","webpack://_N_E/./src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Actions/StakedAction.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Actions/ActionPanel.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/CellLayout.tsx","webpack://_N_E/./src/views/Farms/components/types.ts","webpack://_N_E/./src/views/Farms/components/FarmTable/Row.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/FarmTable.tsx","webpack://_N_E/./src/views/Farms/components/FarmTabButtons/index.tsx","webpack://_N_E/./src/views/Farms/Farms.tsx","webpack://_N_E/./src/views/Farms/components/DepositModal.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/ApyButton.tsx","webpack://_N_E/./src/views/Farms/components/FarmTable/Apr.tsx","webpack://_N_E/./src/views/Farms/components/StakedLP.tsx","webpack://_N_E/./src/views/Farms/components/WithdrawModal.tsx","webpack://_N_E/./src/views/Farms/hooks/useApproveFarm.ts","webpack://_N_E/./src/views/Farms/hooks/useHarvestFarm.ts","webpack://_N_E/./src/views/Farms/hooks/useStakeFarms.ts","webpack://_N_E/./src/views/Farms/hooks/useUnstakeFarms.ts"],"sourcesContent":["import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M5 13H16.17L11.29 17.88C10.9 18.27 10.9 18.91 11.29 19.3C11.68 19.69 12.31 19.69 12.7 19.3L19.29 12.71C19.68 12.32 19.68 11.69 19.29 11.3L12.71 4.7C12.32 4.31 11.69 4.31 11.3 4.7C10.91 5.09 10.91 5.72 11.3 6.11L16.17 11H5C4.45 11 4 11.45 4 12C4 12.55 4.45 13 5 13Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","export const byTextAscending =\n  <T>(getTextProperty: (object: T) => string) =>\n  (objectA: T, objectB: T): number => {\n    const upperA = getTextProperty(objectA).toUpperCase();\n    const upperB = getTextProperty(objectB).toUpperCase();\n    if (upperA < upperB) {\n      return -1;\n    }\n    if (upperA > upperB) {\n      return 1;\n    }\n    return 0;\n  };\n\nexport const byTextDescending =\n  <T>(getTextProperty: (object: T) => string) =>\n  (objectA: T, objectB: T): number => {\n    const upperA = getTextProperty(objectA).toUpperCase();\n    const upperB = getTextProperty(objectB).toUpperCase();\n    if (upperA > upperB) {\n      return -1;\n    }\n    if (upperA < upperB) {\n      return 1;\n    }\n    return 0;\n  };\n","import { useMemo, useReducer, useEffect, ReactNode, useCallback } from \"react\";\nimport noop from \"lodash/noop\";\n\nimport {\n  ColumnByNamesType,\n  ColumnType,\n  TableState,\n  TableAction,\n  DataType,\n  UseTableReturnType,\n  UseTableOptionsType,\n  RowType,\n  HeaderType,\n  HeaderRenderType,\n  ColumnStateType,\n} from \"./types\";\nimport { byTextAscending, byTextDescending } from \"./utils\";\n\nconst sortByColumn = <T extends DataType>(\n  data: RowType<T>[],\n  sortColumn: string,\n  columns: ColumnStateType<T>[]\n): RowType<T>[] => {\n  let isAscending = null;\n  let sortedRows: RowType<T>[] = [...data];\n\n  columns.forEach((column) => {\n    // if the row was found\n    if (sortColumn === column.name) {\n      isAscending = column.sorted.asc;\n\n      if (column.sort) {\n        sortedRows = isAscending ? data.sort(column.sort) : data.sort(column.sort).reverse();\n        // default to sort by string\n      } else {\n        sortedRows = isAscending\n          ? data.sort(byTextAscending((object) => object.original[sortColumn]))\n          : data.sort(byTextDescending((object) => object.original[sortColumn]));\n      }\n    }\n  });\n\n  return sortedRows;\n};\n\nconst getPaginatedData = <T extends DataType>(rows: RowType<T>[], perPage: number, page: number) => {\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  return rows.slice(start, end);\n};\n\nconst getColumnsByName = <T extends DataType>(columns: ColumnType<T>[]): ColumnByNamesType<T> => {\n  const columnsByName: ColumnByNamesType<T> = {};\n  columns.forEach((column) => {\n    const col: ColumnType<T> = {\n      name: column.name,\n      label: column.label,\n    };\n\n    if (column.render) {\n      col.render = column.render;\n    }\n    col.hidden = column.hidden;\n    columnsByName[column.name] = col;\n  });\n\n  return columnsByName;\n};\n\nconst createReducer =\n  <T extends DataType>() =>\n  (state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    let rows = [];\n    let nextPage = 0;\n    let prevPage = 0;\n    let isAscending = null;\n    let sortedRows: RowType<T>[] = [];\n    let columnCopy = [];\n    let filteredRows = [];\n    let selectedRowsById: { [key: number]: boolean } = {};\n    let stateCopy: TableState<T> = { ...state };\n    const rowIds: { [key: number]: boolean } = {};\n\n    switch (action.type) {\n      case \"SET_ROWS\":\n        rows = [...action.data];\n        // preserve sorting if a sort is already enabled when data changes\n        if (state.sortColumn) {\n          rows = sortByColumn(action.data, state.sortColumn, state.columns);\n        }\n\n        if (state.paginationEnabled === true) {\n          rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n        }\n\n        if (state.paginationEnabled === true) {\n          rows = getPaginatedData(rows, state.pagination.perPage, state.pagination.page);\n        }\n\n        columnCopy = state.columns.map((column) => {\n          if (state.sortColumn === column.name) {\n            return {\n              ...column,\n              sorted: {\n                on: true,\n                asc: column.sorted.asc,\n              },\n            };\n          }\n\n          return column;\n        });\n\n        return {\n          ...state,\n          rows,\n          originalRows: action.data,\n          columns: columnCopy,\n        };\n\n      case \"NEXT_PAGE\":\n        nextPage = state.pagination.page + 1;\n        return {\n          ...state,\n          rows: getPaginatedData(state.originalRows, state.pagination.perPage, nextPage),\n          pagination: {\n            ...state.pagination,\n            page: nextPage,\n            canNext: nextPage * state.pagination.perPage < state.originalRows.length,\n            canPrev: nextPage !== 1,\n          },\n        };\n      case \"PREV_PAGE\":\n        prevPage = state.pagination.page === 1 ? 1 : state.pagination.page - 1;\n\n        return {\n          ...state,\n          rows: getPaginatedData(state.originalRows, state.pagination.perPage, prevPage),\n          pagination: {\n            ...state.pagination,\n            page: prevPage,\n            canNext: prevPage * state.pagination.perPage < state.originalRows.length,\n            canPrev: prevPage !== 1,\n          },\n        };\n      case \"TOGGLE_SORT\":\n        if (!(action.columnName in state.columnsByName)) {\n          throw new Error(`Invalid column, ${action.columnName} not found`);\n        }\n\n        // loop through all columns and set the sort parameter to off unless\n        // it's the specified column (only one column at a time for )\n        columnCopy = state.columns.map((column) => {\n          // if the row was found\n          if (action.columnName === column.name) {\n            if (action.isAscOverride !== undefined) {\n              // force the sort order\n              isAscending = action.isAscOverride;\n            } else {\n              // if it's undefined, start by setting to ascending, otherwise toggle\n              isAscending = column.sorted.asc === undefined ? true : !column.sorted.asc;\n            }\n\n            if (column.sort) {\n              sortedRows = isAscending ? state.rows.sort(column.sort) : state.rows.sort(column.sort).reverse();\n              // default to sort by string\n            } else {\n              sortedRows = isAscending\n                ? state.rows.sort(byTextAscending((object) => object.original[action.columnName]))\n                : state.rows.sort(byTextDescending((object) => object.original[action.columnName]));\n            }\n            return {\n              ...column,\n              sorted: {\n                on: true,\n                asc: isAscending,\n              },\n            };\n          }\n          // set sorting to false for all other columns\n          return {\n            ...column,\n            sorted: {\n              on: false,\n              asc: false,\n            },\n          };\n        });\n\n        return {\n          ...state,\n          columns: columnCopy,\n          rows: sortedRows,\n          sortColumn: action.columnName,\n          columnsByName: getColumnsByName(columnCopy),\n        };\n      case \"GLOBAL_FILTER\":\n        filteredRows = action.filter(state.originalRows);\n        selectedRowsById = {};\n        state.selectedRows.forEach((row) => {\n          selectedRowsById[row.id] = row.selected ?? false;\n        });\n\n        return {\n          ...state,\n          rows: filteredRows.map((row) => {\n            return selectedRowsById[row.id] ? { ...row, selected: selectedRowsById[row.id] } : { ...row };\n          }),\n          filterOn: true,\n        };\n      case \"SELECT_ROW\":\n        stateCopy = { ...state };\n\n        stateCopy.rows = stateCopy.rows.map((row) => {\n          const newRow = { ...row };\n          if (newRow.id === action.rowId) {\n            newRow.selected = !newRow.selected;\n          }\n          return newRow;\n        });\n\n        stateCopy.originalRows = stateCopy.originalRows.map((row) => {\n          const newRow = { ...row };\n          if (newRow.id === action.rowId) {\n            newRow.selected = !newRow.selected;\n          }\n          return newRow;\n        });\n\n        stateCopy.selectedRows = stateCopy.originalRows.filter((row) => row.selected === true);\n\n        stateCopy.toggleAllState =\n          stateCopy.selectedRows.length === stateCopy.rows.length\n            ? (stateCopy.toggleAllState = true)\n            : (stateCopy.toggleAllState = false);\n\n        return stateCopy;\n      case \"SEARCH_STRING\":\n        stateCopy = { ...state };\n        stateCopy.rows = stateCopy.originalRows.filter((row) => {\n          return (\n            row.cells.filter((cell) => {\n              if (cell.value.includes(action.searchString)) {\n                return true;\n              }\n              return false;\n            }).length > 0\n          );\n        });\n        return stateCopy;\n      case \"TOGGLE_ALL\":\n        if (state.selectedRows.length < state.rows.length) {\n          stateCopy.rows = stateCopy.rows.map((row) => {\n            rowIds[row.id] = true;\n            return { ...row, selected: true };\n          });\n\n          stateCopy.toggleAllState = true;\n        } else {\n          stateCopy.rows = stateCopy.rows.map((row) => {\n            rowIds[row.id] = false;\n\n            return { ...row, selected: false };\n          });\n          stateCopy.toggleAllState = false;\n        }\n\n        stateCopy.originalRows = stateCopy.originalRows.map((row) => {\n          return row.id in rowIds ? { ...row, selected: rowIds[row.id] } : { ...row };\n        });\n\n        stateCopy.selectedRows = stateCopy.originalRows.filter((row) => row.selected);\n\n        return stateCopy;\n      default:\n        throw new Error(\"Invalid reducer action\");\n    }\n  };\n\nconst sortDataInOrder = <T extends DataType>(data: T[], columns: ColumnType<T>[]): T[] => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return data.map((row: any) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const newRow: any = {};\n    columns.forEach((column) => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`);\n      }\n      newRow[column.name] = row[column.name];\n    });\n    return newRow;\n  });\n};\n\nexport const makeRender = <T extends DataType>(\n  // eslint-disable-next-line\n  value: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  render: (({ value: val, row }: { value: any; row: T }) => ReactNode) | undefined,\n  row: T\n): (() => React.ReactNode) => {\n  return render ? () => render({ row, value }) : () => value;\n};\n\nconst makeHeaderRender = (label: string, render?: HeaderRenderType) => {\n  return render ? () => render({ label }) : () => label;\n};\n\nexport const useTable = <T extends DataType>(\n  columns: ColumnType<T>[],\n  data: T[],\n  options?: UseTableOptionsType<T>\n): UseTableReturnType<T> => {\n  const columnsWithSorting: ColumnStateType<T>[] = useMemo(\n    () =>\n      columns.map((column) => {\n        return {\n          ...column,\n          label: column.label ? column.label : column.name,\n          hidden: column.hidden ? column.hidden : false,\n          sort: column.sort,\n          sorted: {\n            on: false,\n            asc: false,\n          },\n        };\n      }),\n    [columns]\n  );\n  const columnsByName = useMemo(() => getColumnsByName(columnsWithSorting), [columnsWithSorting]);\n\n  const tableData: RowType<T>[] = useMemo(() => {\n    const sortedData = sortDataInOrder(data, columnsWithSorting);\n\n    const newData = sortedData.map((row, idx) => {\n      return {\n        id: idx,\n        selected: false,\n        hidden: false,\n        original: row,\n        cells: Object.entries(row)\n          .map(([column, value]) => {\n            return {\n              hidden: columnsByName[column].hidden,\n              field: column,\n              value,\n              render: makeRender(value, columnsByName[column].render, row),\n            };\n          })\n          .filter((cell) => !cell.hidden),\n      };\n    });\n    return newData;\n  }, [data, columnsWithSorting, columnsByName]);\n\n  const reducer = createReducer<T>();\n\n  const [state, dispatch] = useReducer(reducer, {\n    columns: columnsWithSorting,\n    columnsByName,\n    originalRows: tableData,\n    rows: tableData,\n    selectedRows: [],\n    toggleAllState: false,\n    filterOn: !!options?.filter,\n    sortColumn: options?.sortColumn,\n    paginationEnabled: !!options?.pagination,\n    pagination: {\n      page: 1,\n      perPage: 10,\n      canNext: true,\n      canPrev: false,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      nextPage: noop,\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      prevPage: noop,\n    },\n  });\n\n  state.pagination.nextPage = useCallback(() => {\n    dispatch({ type: \"NEXT_PAGE\" });\n  }, [dispatch]);\n  state.pagination.prevPage = useCallback(() => dispatch({ type: \"PREV_PAGE\" }), [dispatch]);\n\n  useEffect(() => {\n    dispatch({ type: \"SET_ROWS\", data: tableData });\n  }, [tableData]);\n\n  const headers: HeaderType<T>[] = useMemo(() => {\n    return [\n      ...state.columns.map((column) => {\n        const label = column.label ? column.label : column.name;\n        return {\n          ...column,\n          render: makeHeaderRender(label, column.headerRender),\n        };\n      }),\n    ];\n  }, [state.columns]);\n\n  useEffect(() => {\n    if (options && options.filter) {\n      dispatch({ type: \"GLOBAL_FILTER\", filter: options.filter });\n    }\n  });\n\n  return {\n    headers: headers.filter((column) => !column.hidden),\n    rows: state.rows,\n    originalRows: state.originalRows,\n    selectedRows: state.selectedRows,\n    dispatch,\n    selectRow: (rowId: number) => dispatch({ type: \"SELECT_ROW\", rowId }),\n    toggleAll: () => dispatch({ type: \"TOGGLE_ALL\" }),\n    toggleSort: (columnName: string, isAscOverride?: boolean) =>\n      dispatch({ type: \"TOGGLE_SORT\", columnName, isAscOverride }),\n    setSearchString: (searchString: string) => dispatch({ type: \"SEARCH_STRING\", searchString }),\n    pagination: state.pagination,\n    toggleAllState: state.toggleAllState,\n  };\n};\n","import { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import { Children } from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from '@ethersproject/units'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import { Contract, Overrides } from '@ethersproject/contracts'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[],\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\n  // By convention, BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation\n    .mul(BigNumber.from(10000).add(BigNumber.from(gasMarginPer10000)))\n    .div(BigNumber.from(10000))\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[] = [],\n  overrides: Overrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<TransactionResponse> => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.deposit(pid, value, { ...options, gasPrice })\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice()\n\n  return masterChefContract.deposit(pid, '0', { ...options, gasPrice })\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = poolsConfig\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\n\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { FarmWithStakedValue } from '../../types'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            const receipt = await fetchWithCatchTxError(() => {\n              return onReward()\n            })\n            if (receipt?.status) {\n              toastSuccess(\n                `${t('Harvested')}!`,\n                <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                  {t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' })}\n                </ToastDescriptionWithTx>,\n              )\n              dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n            }\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import { AddIcon, Button, IconButton, MinusIcon, Skeleton, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useRouter } from 'next/router'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\nimport { FarmWithStakedValue } from '../../types'\nimport StakedLP from '../../StakedLP'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n  lpTotalSupply,\n  tokenAmountTotal,\n  quoteTokenAmountTotal,\n}) => {\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { account } = useWeb3React()\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const router = useRouter()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onStake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Staked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the farm')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const handleUnstake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onUnstake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onApprove()\n    })\n    if (receipt?.status) {\n      toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }, [onApprove, dispatch, account, pid, t, toastSuccess, fetchWithCatchTxError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <StakedLP\n              stakedBalance={stakedBalance}\n              lpSymbol={lpSymbol}\n              quoteTokenSymbol={quoteToken.symbol}\n              tokenSymbol={token.symbol}\n              lpTotalSupply={lpTotalSupply}\n              tokenAmountTotal={tokenAmountTotal}\n              quoteTokenAmountTotal={quoteTokenAmountTotal}\n            />\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => router.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => router.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={pendingTx} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { FarmAuctionTag, CoreTag, DualTag } from 'components/Tags'\nimport { FarmWithStakedValue } from '../../types'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <FarmAuctionTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import BigNumber from 'bignumber.js'\nimport { DeserializedFarm } from 'state/types'\n\nexport type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n","import { useEffect, useState, createElement } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema, FarmWithStakedValue } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer id=\"table-container\">\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useRouter } from 'next/router'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const router = useRouter()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (router.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/farms\">\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/farms/history\" id=\"finished-farms-button\">\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import { useEffect, useCallback, useState, useMemo, useRef, createContext } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, Link } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport orderBy from 'lodash/orderBy'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport { useRouter } from 'next/router'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport ToggleView from 'components/ToggleView/ToggleView'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, FarmWithStakedValue } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst FinishedTextContainer = styled(Flex)`\n  padding-bottom: 32px;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst FinishedTextLink = styled(Link)`\n  font-weight: 400;\n  white-space: nowrap;\n  text-decoration: underline;\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nexport const getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = ({ children }) => {\n  const { pathname } = useRouter()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded, poolLength, regularCakePerBlock } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData()\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && farm.multiplier !== '0X' && (!poolLength || poolLength > farm.pid),\n  )\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n  const archivedFarms = farmsLP\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(\n              new BigNumber(farm.poolWeight),\n              cakePrice,\n              totalLiquidity,\n              farm.lpAddresses[ChainId.MAINNET],\n              regularCakePerBlock,\n            )\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive, regularCakePerBlock],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        case 'latest':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.pid), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return <FlexLayout>{children}</FlexLayout>\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <FarmsContext.Provider value={{ chosenFarmsMemoized }}>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NextLinkFromReactRouter to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NextLinkFromReactRouter>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView idPrefix=\"clickFarm\" viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                  {\n                    label: t('Latest'),\n                    value: 'latest',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {isInactive && (\n          <FinishedTextContainer>\n            <Text fontSize={['16px', null, '20px']} color=\"failure\" pr=\"4px\">\n              {t(\"Don't see the farm you are staking?\")}\n            </Text>\n            <Flex>\n              <FinishedTextLink href=\"/migration\" fontSize={['16px', null, '20px']} color=\"failure\">\n                {t('Go to migration page')}\n              </FinishedTextLink>\n              <Text fontSize={['16px', null, '20px']} color=\"failure\" padding=\"0px 4px\">\n                or\n              </Text>\n              <FinishedTextLink\n                external\n                color=\"failure\"\n                fontSize={['16px', null, '20px']}\n                href=\"https://v1-farms.pancakeswap.finance/farms/history\"\n              >\n                {t('check out v1 farms')}.\n              </FinishedTextLink>\n            </Flex>\n          </FinishedTextContainer>\n        )}\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </FarmsContext.Provider>\n  )\n}\n\nexport const FarmsContext = createContext({ chosenFarmsMemoized: [] })\n\nexport default Farms\n","import BigNumber from 'bignumber.js'\nimport { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Text,\n  Button,\n  Modal,\n  LinkExternal,\n  CalculateIcon,\n  IconButton,\n  Skeleton,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel = '',\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const annualRoiAsNumber = annualRoi.toNumber()\n  const formattedAnnualRoi = formatNumber(annualRoiAsNumber, annualRoi.gt(10000) ? 0 : 2, annualRoi.gt(10000) ? 0 : 2)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        {Number.isFinite(annualRoiAsNumber) ? (\n          <AnnualRoiContainer\n            alignItems=\"center\"\n            onClick={() => {\n              setShowRoiCalculator(true)\n            }}\n          >\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        ) : (\n          <Skeleton width={60} />\n        )}\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        {pendingTx ? (\n          <Button width=\"100%\" isLoading={pendingTx} endIcon={<AutoRenewIcon spin color=\"currentColor\" />}>\n            {t('Confirming')}\n          </Button>\n        ) : (\n          <Button\n            width=\"100%\"\n            disabled={!lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)}\n            onClick={async () => {\n              setPendingTx(true)\n              await onConfirm(val)\n              onDismiss?.()\n              setPendingTx(false)\n            }}\n          >\n            {t('Confirm')}\n          </Button>\n        )}\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import { Heading, Flex } from '@pancakeswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useCallback } from 'react'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface StackedLPProps {\n  stakedBalance: BigNumber\n  lpSymbol: string\n  tokenSymbol: string\n  quoteTokenSymbol: string\n  lpTotalSupply: BigNumber\n  tokenAmountTotal: BigNumber\n  quoteTokenAmountTotal: BigNumber\n}\n\nconst StakedLP: React.FunctionComponent<StackedLPProps> = ({\n  stakedBalance,\n  lpSymbol,\n  quoteTokenSymbol,\n  tokenSymbol,\n  lpTotalSupply,\n  tokenAmountTotal,\n  quoteTokenAmountTotal,\n}) => {\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {stakedBalance.gt(0) && lpPrice.gt(0) && (\n        <>\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n          <Flex style={{ gap: '4px' }}>\n            <Balance\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={stakedBalance.div(lpTotalSupply).times(tokenAmountTotal).toNumber()}\n              unit={` ${tokenSymbol}`}\n            />\n            <Balance\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={stakedBalance.div(lpTotalSupply).times(quoteTokenAmountTotal).toNumber()}\n              unit={` ${quoteTokenSymbol}`}\n            />\n          </Flex>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default StakedLP\n","import BigNumber from 'bignumber.js'\nimport { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        {pendingTx ? (\n          <Button width=\"100%\" isLoading={pendingTx} endIcon={<AutoRenewIcon spin color=\"currentColor\" />}>\n            {t('Confirming')}\n          </Button>\n        ) : (\n          <Button\n            width=\"100%\"\n            disabled={!valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n            onClick={async () => {\n              setPendingTx(true)\n              await onConfirm(val)\n              onDismiss?.()\n              setPendingTx(false)\n            }}\n          >\n            {t('Confirm')}\n          </Button>\n        )}\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { Contract } from '@ethersproject/contracts'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    return callWithGasPrice(lpContract, 'approve', [masterChefContract.address, MaxUint256])\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    return harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      return stakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      return unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n"],"names":["props","Svg","viewBox","path","d","byTextAscending","getTextProperty","objectA","objectB","upperA","toUpperCase","upperB","byTextDescending","getPaginatedData","rows","perPage","page","start","end","slice","getColumnsByName","columns","columnsByName","forEach","column","col","name","label","render","hidden","createReducer","state","action","nextPage","prevPage","isAscending","sortedRows","columnCopy","filteredRows","selectedRowsById","stateCopy","rowIds","type","data","sortColumn","sorted","asc","sort","reverse","object","original","sortByColumn","paginationEnabled","pagination","map","on","originalRows","canNext","length","canPrev","columnName","Error","undefined","isAscOverride","filter","selectedRows","row","id","selected","filterOn","newRow","rowId","toggleAllState","cells","cell","value","includes","searchString","makeRender","makeHeaderRender","useTable","options","columnsWithSorting","useMemo","tableData","sortedData","sortDataInOrder","idx","Object","entries","field","reducer","useReducer","noop","useCallback","dispatch","useEffect","headers","headerRender","selectRow","toggleAll","toggleSort","setSearchString","StyledSpacer","styled","size","s","useContext","ThemeContext","spacing","StyledModalActions","theme","colors","primaryDark","StyledModalAction","children","l","Children","child","i","Spacer","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","max","symbol","onChange","onSelectMax","addLiquidityUrl","inputTitle","decimals","useTranslation","t","isBalanceZero","div","style","position","Flex","justifyContent","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","alignItems","pattern","inputMode","step","min","placeholder","Button","scale","onClick","mr","color","Link","bold","href","external","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","rawGasEstimation","gasEstimation","address","mul","BigNumber","add","callWithEstimateGas","overrides","tx","gasLimit","DEFAULT_GAS_LIMIT","stakeFarm","masterChefContract","pid","amount","gasPrice","getGasPrice","times","DEFAULT_TOKEN_DECIMAL","toString","deposit","unstakeFarm","withdraw","harvestFarm","getActivePools","block","eligiblePools","blockNumber","startBlockCalls","endBlockCalls","startBlocks","endBlocks","poolsConfig","pool","sousId","isFinished","simpleRpcProvider","contractAddress","getAddress","multicall","sousChefV2","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","secondPart","Container","TokenWrapper","token","quoteToken","useFarmUser","stakedBalance","rawStakedBalance","getBalanceNumber","TokenPairImage","variant","primaryToken","secondaryToken","width","height","textTransform","Amount","earned","textDisabled","earnings","userDataReady","toLocaleString","Skeleton","primary","ArrowIcon","ChevronDownIcon","toggled","actionPanelToggled","useMatchBreakpoints","isDesktop","ReferenceElement","MultiplierWrapper","lg","multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","HelpIcon","LiquidityWrapper","liquidity","displayLiquidity","gt","Number","maximumFractionDigits","ActionContainer","xl","ActionTitles","ActionContent","userData","useToast","toastSuccess","useCatchTxError","fetchWithCatchTxError","loading","earningsBigNumber","cakePrice","usePriceCakeBusd","BIG_ZERO","earningsBusd","isZero","getBalanceAmount","multipliedBy","toNumber","toFixed","useHarvestFarm","onReward","useAppDispatch","useWeb3React","account","pr","Heading","Balance","unit","prefix","disabled","eq","pendingTx","receipt","status","ToastDescriptionWithTx","txHash","transactionHash","fetchFarmUserDataAsync","pids","ml","IconButtonWrapper","apr","lpSymbol","lpLabel","lpAddresses","displayApr","lpTotalSupply","tokenAmountTotal","quoteTokenAmountTotal","allowance","tokenBalance","useStakeFarms","onStake","useUnstakeFarms","onUnstake","router","useRouter","lpPrice","useLpTokenPrice","isApproved","isGreaterThan","lpAddress","liquidityUrlPathParts","getLiquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","handleStake","handleUnstake","onPresentDeposit","useModal","DepositModal","onConfirm","tokenName","onPresentWithdraw","WithdrawModal","lpContract","useERC20","useApproveFarm","onApprove","handleApprove","StakedLP","quoteTokenSymbol","tokenSymbol","IconButton","MinusIcon","some","item","pathname","AddIcon","marginBottom","marginTop","ConnectWalletButton","expandAnimation","keyframes","collapseAnimation","expanded","css","dropdown","StyledLinkExternal","LinkExternal","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","details","farm","isActive","dual","replace","bsc","getBscScanLink","info","isCommunity","FarmAuctionTag","CoreTag","DualTag","Apr","Multiplier","Liquidity","HarvestAction","StakedAction","Label","textSubtle","ContentContainer","MobileColumnSchema","sortable","DesktopColumnSchema","Farm","Earned","Details","CellInner","StyledTr","EarnedMobileCell","AprMobileCell","FarmMobileCell","hasStakedAmount","useState","shouldRenderChild","useDelayedUnmount","actionPanelExpanded","toggleActionPanel","setActionPanelExpanded","isMobile","isSmallerScreen","tableSchema","columnNames","td","tr","CellLayout","hideButton","keys","key","columnIndex","indexOf","createElement","colSpan","ActionPanel","card","background","cardBorder","TableWrapper","StyledTable","TableBody","TableContainer","ScrollButtonContainer","tableWrapperEl","useRef","Row","current","scrollIntoView","behavior","ChevronUpIcon","activeIndex","hasStakeInFinishedFarms","Wrapper","ButtonMenu","ButtonMenuItem","as","NextLinkFromReactRouter","to","NotificationDot","show","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","FinishedTextContainer","md","FinishedTextLink","getDisplayApr","cakeRewardsApr","lpRewardsApr","FarmsContext","createContext","chosenFarmsMemoized","useFarms","userDataLoaded","poolLength","regularCakePerBlock","useUserFarmsViewMode","viewMode","setViewMode","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","farmsLP","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","query","lowercaseQuery","latinise","chosenFarms","farms","sortOption","orderBy","sortFarms","numberOfFarmsVisible","setNumberOfFarmsVisible","farmsCurrentlyVisible","rowData","split","originalValue","Provider","PageHeader","mb","p","ArrowForwardIcon","Page","ToggleView","idPrefix","onToggle","mode","Toggle","checked","FarmTabButtons","Select","onOptionChange","option","setSortOption","marginLeft","SearchInput","event","setQuery","target","padding","ViewMode","a","b","Table","FlexLayout","renderContent","Loading","src","alt","AnnualRoiContainer","AnnualRoiDisplay","onDismiss","fullBalance","getFullDisplayBalance","lpTokensToStake","val","fullBalanceNumber","usdToStake","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","earningTokenPrice","annualRoi","annualRoiAsNumber","formattedAnnualRoi","formatNumber","handleChange","e","currentTarget","validity","valid","setVal","handleSelectMax","showRoiCalculator","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","setShowRoiCalculator","Modal","title","ModalInput","mt","isFinite","CalculateIcon","ModalActions","isLoading","endIcon","AutoRenewIcon","spin","setPendingTx","alignSelf","ApyLabelContainer","onPresentApyModal","stopPropagation","AprWrapper","ApyButton","stakedBalanceBigNumber","lt","flexDirection","gap","valNumber","useMasterchef","useCallWithGasPrice","callWithGasPrice","MaxUint256","farmPid","handleHarvest"],"sourceRoot":""}