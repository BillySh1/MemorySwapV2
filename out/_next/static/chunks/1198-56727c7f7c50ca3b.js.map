{"version":3,"file":"static/chunks/1198-56727c7f7c50ca3b.js","mappings":"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","sources":["webpack://_N_E/./src/components/PageHeader/PageHeader.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/BscScan.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/EditProfileAvatar.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/ProfileHeader.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/TabMenu.tsx","webpack://_N_E/./src/views/Nft/market/Profile/index.tsx","webpack://_N_E/./src/views/Nft/market/components/BannerHeader/AvatarImage.tsx","webpack://_N_E/./src/views/Nft/market/components/BannerHeader/BannerImage.tsx","webpack://_N_E/./src/views/Nft/market/components/BannerHeader/index.tsx","webpack://_N_E/./src/views/Nft/market/components/MarketPageHeader.tsx","webpack://_N_E/./src/views/Nft/market/components/MarketPageTitle.tsx","webpack://_N_E/./src/views/Nft/market/components/StatBox.tsx"],"sourcesContent":["import styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../Layout/Container'\nimport { PageHeaderProps } from './types'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M12 22C17.5228 22 22 17.5228 22 12C22 11.7792 21.9928 11.5602 21.9788 11.343C18.6515 16.824 10.797 19.3967 6.32085 20.232C7.93393 21.3469 9.8907 22 12 22ZM3.6987 17.5775C2.62604 15.9842 2 14.0652 2 12C2 6.47715 6.47715 2 12 2C16.6548 2 20.5667 5.18031 21.6815 9.48656C20.7816 11.0755 19.4244 12.3811 17.8282 13.4444V7.27607C17.8282 6.86948 17.4986 6.53988 17.092 6.53988H15.3742C14.9676 6.53988 14.638 6.86948 14.638 7.27607V15.0795C14.638 15.1034 14.6392 15.1269 14.6413 15.1501C14.2758 15.3076 13.906 15.4562 13.5337 15.5963V9.36196C13.5337 8.95537 13.2041 8.62577 12.7975 8.62577H11.0798C10.6732 8.62577 10.3436 8.95537 10.3436 9.36196V16.592C9.97218 16.6864 9.60348 16.7732 9.23926 16.8528V11.4479C9.23926 11.0413 8.90966 10.7117 8.50307 10.7117H6.78528C6.37869 10.7117 6.04908 11.0413 6.04908 11.4479V17.3941C5.17906 17.4987 4.38348 17.5575 3.6987 17.5775Z\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\nimport EditProfileModal from './EditProfileModal'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 1;\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string; onSuccess: () => void }> = ({ src, alt, onSuccess }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal onSuccess={onSuccess} />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarImage src={src} alt={alt} />\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import { NextLinkFromReactRouter as ReactRouterLink } from 'components/NextLink'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n  isAchievementsLoading: boolean\n  isNftLoading: boolean\n  isProfileLoading: boolean\n  onSuccess?: () => void\n}\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({\n  accountPath,\n  profile,\n  achievements,\n  nftCollected,\n  isAchievementsLoading,\n  isNftLoading,\n  isProfileLoading,\n  onSuccess,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(\n    <EditProfileModal\n      onSuccess={() => {\n        if (onSuccess) {\n          onSuccess()\n        }\n      }}\n    />,\n    false,\n  )\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\n  const numAchievements = !isAchievementsLoading\n    ? achievements?.length\n      ? formatNumber(achievements.length, 0, 0)\n      : '-'\n    : null\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`\n        case 2:\n          return `${imagePath}/flippers-banner.png`\n        case 3:\n          return `${imagePath}/cakers-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <IconButton\n              as=\"a\"\n              target=\"_blank\"\n              style={{\n                width: 'fit-content',\n              }}\n              href={getBscScanLink(accountPath, 'address') || ''}\n              // @ts-ignore\n              alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </IconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar\n              src={avatarImage}\n              alt={t('User profile picture')}\n              onSuccess={() => {\n                if (onSuccess) {\n                  onSuccess()\n                }\n              }}\n            />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n","import { useState, useEffect } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useRouter } from 'next/router'\n\nconst Tab = styled.button<{ $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\n  border-style: solid solid none solid;\n  border-color: ${({ theme }) =>\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\n  outline: 0;\n  padding: 12px 16px;\n  border-radius: 16px 16px 0 0;\n  font-size: 16px;\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\n  transition: background-color 0.3s ease-out;\n`\n\nconst TabMenu = () => {\n  const { t } = useTranslation()\n  const { pathname, query } = useRouter()\n  const { accountAddress } = query\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\n\n  useEffect(() => {\n    setIsAchievementsActive(pathname.includes('achievements'))\n  }, [pathname])\n\n  return (\n    <Flex>\n      <Tab\n        onClick={() => setIsAchievementsActive(false)}\n        $active={!achievementsActive}\n        as={NextLinkFromReactRouter}\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\n      >\n        NFTs\n      </Tab>\n      <Tab\n        onClick={() => setIsAchievementsActive(true)}\n        $active={achievementsActive}\n        as={NextLinkFromReactRouter}\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\n      >\n        {t('Achievements')}\n      </Tab>\n    </Flex>\n  )\n}\n\nexport default TabMenu\n","import { FC } from 'react'\nimport { useRouter } from 'next/router'\nimport { isAddress } from 'utils'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\nimport useNftsForAddress from '../hooks/useNftsForAddress'\nimport TabMenu from './components/TabMenu'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst NftProfile: FC = ({ children }) => {\n  const accountAddress = useRouter().query.accountAddress as string\n  const { t } = useTranslation()\n\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\n\n  const {\n    profile,\n    isValidating: isProfileValidating,\n    isFetching: isProfileFetching,\n    refresh: refreshProfile,\n  } = useProfileForAddress(accountAddress, {\n    revalidateIfStale: true,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n  })\n  const { achievements, isFetching: isAchievementsFetching } = useAchievementsForAddress(accountAddress)\n  const {\n    nfts: userNfts,\n    isLoading: isNftLoading,\n    refresh: refreshUserNfts,\n  } = useNftsForAddress(accountAddress, profile, isProfileValidating)\n\n  if (invalidAddress) {\n    return (\n      <>\n        <MarketPageHeader position=\"relative\">\n          <ProfileHeader\n            accountPath={accountAddress}\n            profile={null}\n            achievements={null}\n            nftCollected={null}\n            isAchievementsLoading={false}\n            isNftLoading={false}\n            isProfileLoading={false}\n          />\n        </MarketPageHeader>\n        <Page style={{ minHeight: 'auto' }}>\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\n            </Text>\n          </Flex>\n        </Page>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={accountAddress}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={userNfts.length}\n          isProfileLoading={isProfileFetching}\n          isNftLoading={isNftLoading}\n          isAchievementsLoading={isAchievementsFetching}\n          onSuccess={async () => {\n            await refreshProfile()\n            refreshUserNfts()\n          }}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>{children}</Page>\n    </>\n  )\n}\n\nexport const NftProfileLayout: FC = ({ children }) => {\n  return <NftProfile>{children}</NftProfile>\n}\n\nexport default NftProfile\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import styled from 'styled-components'\n\nconst StyledBannerImageWrapper = styled.div`\n  ${({ theme }) => `background-color: ${theme.colors.cardBorder}`};\n  flex: none;\n  position: relative;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n  overflow: hidden;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImageWrapper\n","import { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport Image from 'next/image'\nimport StyledBannerImageWrapper from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <StyledBannerImageWrapper>\n          <Image src={bannerImage} alt={bannerAlt} layout=\"fill\" objectFit=\"cover\" priority />\n        </StyledBannerImageWrapper>\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n"],"names":["Outer","styled","Box","theme","background","colors","gradients","bubblegum","Inner","Container","children","props","Svg","viewBox","path","fillRule","clipRule","d","EditOverlay","StyledEditProfileAvatar","src","alt","onSuccess","onEditProfileModal","useModal","EditProfileModal","onClick","AvatarImage","profile","accountPath","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","useTranslation","t","useWeb3React","account","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","BannerHeader","bannerImage","imagePath","teamId","getBannerImage","bannerAlt","avatar","EditProfileAvatar","Flex","display","IconButton","as","target","style","width","href","getBscScanLink","BscScanIcon","color","MarketPageTitle","pb","title","username","truncateHash","description","flexDirection","mb","mr","Link","external","bold","Button","mt","ReactRouterLink","to","StatBox","StatBoxItem","stat","Tab","$active","secondary","textSubtle","cardBorder","useRouter","pathname","query","accountAddress","useState","includes","useEffect","setIsAchievementsActive","achievementsActive","NextLinkFromReactRouter","nftsBaseUrl","TabMenuWrapper","mediaQueries","sm","NftProfile","invalidAddress","isAddress","useProfileForAddress","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","isValidating","isFetching","refresh","useAchievementsForAddress","useNftsForAddress","isProfileValidating","nfts","isLoading","MarketPageHeader","position","ProfileHeader","Page","minHeight","p","alignItems","NoNftsImage","Text","textAlign","maxWidth","pt","userNfts","isProfileFetching","isAchievementsFetching","refreshProfile","refreshUserNfts","TabMenu","NftProfileLayout","borderColor","md","StyledBannerImageWrapper","Image","layout","objectFit","priority","bottom","left","useTheme","isDark","PageHeader","Grid","gridGap","gridTemplateColumns","Heading","scale","fontSize","Skeleton","height","mx","fontWeight","invertedContrast","radii","card"],"sourceRoot":""}