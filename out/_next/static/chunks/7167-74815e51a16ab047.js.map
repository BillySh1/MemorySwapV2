{"version":3,"file":"static/chunks/7167-74815e51a16ab047.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/isNaN.js","webpack://_N_E/./node_modules/lodash/isNumber.js","webpack://_N_E/./src/components/ExpandableSectionButton/ExpandableSectionButton.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/DetailsSection.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/CardHeading.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/HarvestAction.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/StakeAction.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/CardActionsContainer.tsx","webpack://_N_E/./src/views/Farms/components/FarmCard/FarmCard.tsx","webpack://_N_E/./src/views/Farms/index.tsx"],"sourcesContent":["var isNumber = require('./isNumber');\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on\n * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n * `undefined` and other non-number values.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * _.isNaN(NaN);\n * // => true\n *\n * _.isNaN(new Number(NaN));\n * // => true\n *\n * isNaN(undefined);\n * // => true\n *\n * _.isNaN(undefined);\n * // => false\n */\nfunction isNaN(value) {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n}\n\nmodule.exports = isNaN;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","import styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded = false }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nexport default ExpandableSectionButton\n","import { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { FarmAuctionTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <FarmAuctionTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\n\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { t } = useTranslation()\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          const receipt = await fetchWithCatchTxError(() => {\n            return onReward()\n          })\n          if (receipt?.status) {\n            toastSuccess(\n              `${t('Harvested')}!`,\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' })}\n              </ToastDescriptionWithTx>,\n            )\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Button, Flex, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useRouter } from 'next/router'\nimport { useLpTokenPrice, useFarmUser, usePriceCakeBusd } from 'state/farms/hooks'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\nimport { FarmWithStakedValue } from '../types'\nimport StakedLP from '../StakedLP'\n\ninterface FarmCardActionsProps extends FarmWithStakedValue {\n  lpLabel?: string\n  addLiquidityUrl?: string\n  displayApr?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  quoteToken,\n  token,\n  lpSymbol,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  lpLabel,\n  lpTotalSupply,\n  tokenAmountTotal,\n  quoteTokenAmountTotal,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const cakePrice = usePriceCakeBusd()\n  const router = useRouter()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError } = useCatchTxError()\n\n  const handleStake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onStake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Staked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the farm')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const handleUnstake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onUnstake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => router.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => router.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <StakedLP\n        stakedBalance={stakedBalance}\n        lpSymbol={lpSymbol}\n        quoteTokenSymbol={quoteToken.symbol}\n        tokenSymbol={token.symbol}\n        lpTotalSupply={lpTotalSupply}\n        tokenAmountTotal={tokenAmountTotal}\n        quoteTokenAmountTotal={quoteTokenAmountTotal}\n      />\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { Button, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { FarmWithStakedValue } from '../types'\nimport useApproveFarm from '../../hooks/useApproveFarm'\nimport HarvestAction from './HarvestAction'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, lpLabel, displayApr }) => {\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { pid, lpAddresses } = farm\n  const { allowance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onApprove()\n    })\n    if (receipt?.status) {\n      toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }, [onApprove, dispatch, account, pid, t, toastSuccess, fetchWithCatchTxError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction {...farm} lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} displayApr={displayApr} />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={pendingTx} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport { FarmWithStakedValue } from '../types'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n  max-width: 100%;\n  margin: 0 0 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 350px;\n    margin: 0 12px 46px;\n  }\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          displayApr={displayApr}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import { FC } from 'react'\nimport Farms, { FarmsContext } from './Farms'\n\nexport const FarmsPageLayout: FC = ({ children }) => {\n  return <Farms>{children}</Farms>\n}\n\nexport { FarmsContext }\n"],"names":["isNumber","module","exports","value","baseGetTag","isObjectLike","Wrapper","styled","theme","colors","primary","onClick","expanded","useTranslation","t","aria-label","role","Text","color","bold","ChevronUpIcon","ChevronDownIcon","StyledLinkExternal","LinkExternal","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","Flex","justifyContent","Skeleton","width","height","href","symbol","MultiplierTag","Tag","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","Heading","split","FarmAuctionTag","CoreTag","ml","earnings","pid","useWeb3React","account","useToast","toastSuccess","useCatchTxError","fetchWithCatchTxError","loading","useHarvestFarm","onReward","cakePrice","usePriceCakeBusd","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","displayBalance","toFixed","BigNumber","earningsBusd","multipliedBy","toNumber","eq","Balance","fontSize","decimals","unit","prefix","Button","disabled","pendingTx","receipt","status","ToastDescriptionWithTx","txHash","transactionHash","fetchFarmUserDataAsync","pids","IconButtonWrapper","lpSymbol","apr","displayApr","lpTotalSupply","tokenAmountTotal","quoteTokenAmountTotal","useStakeFarms","onStake","useUnstakeFarms","onUnstake","useFarmUser","tokenBalance","stakedBalance","router","useRouter","lpPrice","useLpTokenPrice","handleStake","amount","handleUnstake","onPresentDeposit","useModal","DepositModal","max","onConfirm","tokenName","onPresentWithdraw","WithdrawModal","StakedLP","quoteTokenSymbol","tokenSymbol","some","item","pathname","includes","IconButton","mr","MinusIcon","AddIcon","Action","farm","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","lpContract","useERC20","useApproveFarm","onApprove","handleApprove","useCallback","textTransform","pr","HarvestAction","StakeAction","mt","ConnectWalletButton","StyledCard","Card","mediaQueries","sm","FarmCardInnerContainer","ExpandingWrapper","cardBorder","useState","liquidity","gt","toLocaleString","undefined","maximumFractionDigits","toUpperCase","replace","earnLabel","dual","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","CardHeading","isCommunity","style","display","ApyButton","CardActionsContainer","ExpandableSectionButton","setShowExpandableSection","showExpandableSection","DetailsSection","getBscScanLink","FarmsPageLayout","children","Farms"],"sourceRoot":""}