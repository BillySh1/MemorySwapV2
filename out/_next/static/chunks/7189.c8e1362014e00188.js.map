{"version":3,"file":"static/chunks/7189.c8e1362014e00188.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/_baseSum.js","webpack://_N_E/./node_modules/lodash/sum.js","webpack://_N_E/./packages/uikit/src/components/Card/CardHeader.tsx","webpack://_N_E/./packages/uikit/src/components/Table/Cell.tsx","webpack://_N_E/./packages/uikit/src/components/Table/Table.tsx","webpack://_N_E/./src/components/CollapsibleCard/index.tsx","webpack://_N_E/./src/views/Nft/market/Collection/Traits/styles.tsx","webpack://_N_E/./src/views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","webpack://_N_E/./src/views/Nft/market/Collection/Traits/CollectionTraits.tsx","webpack://_N_E/./src/views/Nft/market/Collection/Traits/index.tsx"],"sourcesContent":["/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\nimport { CardTheme } from \"./types\";\n\nexport interface CardHeaderProps extends SpaceProps {\n  variant?: keyof CardTheme[\"cardHeaderBackground\"];\n}\n\nconst CardHeader = styled.div<CardHeaderProps>`\n  background: ${({ theme, variant = \"default\" }) => theme.card.cardHeaderBackground[variant]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n  ${space}\n`;\n\nCardHeader.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardHeader;\n","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\nexport const Td = styled.td<TypographyProps>`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 16px;\n  vertical-align: middle;\n\n  ${typography}\n`;\n\nexport const Th = styled(Td).attrs({ as: \"th\" })`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 12px;\n  text-transform: uppercase;\n`;\n","import styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { Td } from \"./Cell\";\n\nconst Table = styled.table`\n  max-width: 100%;\n  width: 100%;\n\n  tbody tr:last-child {\n    ${Td} {\n      border-bottom: 0;\n    }\n  }\n\n  ${space}\n`;\n\nexport default Table;\n","import { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import { useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport { useRouter } from 'next/router'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport orderBy from 'lodash/orderBy'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\nimport { useGetCollectionDistributionPB } from '../../hooks/useGetCollectionDistribution'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const collection = useGetCollection(collectionAddress)\n  const totalBunnyCount = Number(collection?.totalSupply)\n  const { t } = useTranslation()\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\n  const { push } = useRouter()\n\n  const sortedTokenList = useMemo(() => {\n    if (!distributionData || !Object.keys(distributionData)) return []\n\n    const distributionKeys: string[] = Object.keys(distributionData)\n    const distributionValues: any[] = Object.values(distributionData)\n\n    return orderBy(\n      distributionValues.map((token, index) => ({ ...token, tokenId: distributionKeys[index] })),\n      (token) => token.tokenCount,\n      raritySort,\n    )\n  }, [raritySort, distributionData])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {!isFetchingDistribution ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedTokenList.map((token) => {\n                  const count: number = token.tokenCount\n                  const percentage = (count / totalBunnyCount) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${token.tokenId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={token.tokenId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={token.image.thumbnail} name={token.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={token.tokenId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import { useRouter } from 'next/router'\nimport Container from 'components/Layout/Container'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const collectionAddress = useRouter().query.collectionAddress as string\n\n  return (\n    <>\n      <Container py=\"40px\">\n        {collectionAddress === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n"],"names":["module","exports","array","iteratee","result","index","length","current","undefined","baseSum","identity","CardHeader","styled","theme","variant","card","cardHeaderBackground","radii","space","defaultProps","p","Td","colors","cardBorder","text","typography","Th","attrs","as","secondary","Table","initialOpenState","title","children","props","useState","Card","Flex","alignItems","justifyContent","Heading","IconButton","scale","onClick","setIsOpen","isOpen","ChevronUpIcon","width","ChevronDownIcon","StyledSortButton","TableWrapper","NftImage","Image","ClickableRow","NftName","thumbnailSrc","name","src","height","mr","Text","LowestPriceCell","bunnyId","useGetLowestPriceFromBunnyId","isFetching","lowestPrice","Skeleton","BNBAmountLabel","amount","collectionAddress","collection","useGetCollection","totalBunnyCount","Number","totalSupply","useTranslation","t","useGetCollectionDistributionPB","data","useRouter","push","sortedTokenList","useMemo","distributionData","Object","keys","distributionKeys","distributionValues","values","orderBy","map","token","tokenId","tokenCount","raritySort","isFetchingDistribution","CollapsibleCard","thead","tr","textAlign","tbody","times","bunnyCnt","type","setRaritySort","currentValue","ArrowUpIcon","color","ArrowDownIcon","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","useGetCollectionDistribution","traitType","total","sum","traitValues","reduce","accum","traitValue","rarity","value","sortType","capitalize","mb","prevRaritySort","query","Container","py","pancakeBunniesAddress","PancakeBunniesTraits","CollectionTraits"],"sourceRoot":""}