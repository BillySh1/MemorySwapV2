{"version":3,"file":"static/chunks/8886-088f76f303cf99e4.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowForward.tsx","webpack://_N_E/./src/state/info/queries/pools/chartData.ts","webpack://_N_E/./src/state/info/queries/pools/transactions.ts","webpack://_N_E/./src/state/info/queries/tokens/chartData.ts","webpack://_N_E/./src/state/info/queries/tokens/transactions.ts","webpack://_N_E/./src/state/info/queries/tokens/priceData.ts","webpack://_N_E/./src/state/info/queries/tokens/poolsForToken.ts","webpack://_N_E/./src/state/info/hooks.ts","webpack://_N_E/./src/state/info/queries/helpers.ts","webpack://_N_E/./src/state/info/types.ts","webpack://_N_E/./src/utils/formatInfoNumbers.ts","webpack://_N_E/./src/views/Info/components/CurrencyLogo/LogoLoader.tsx","webpack://_N_E/./src/views/Info/components/CurrencyLogo/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/shared.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/StarFill.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/StarLine.tsx","webpack://_N_E/./src/views/Info/components/SaveIcon/index.tsx","webpack://_N_E/./src/views/Info/utils/infoDataHelpers.ts","webpack://_N_E/./src/state/info/queries/protocol/overview.ts","webpack://_N_E/./src/state/info/queries/protocol/chart.ts","webpack://_N_E/./src/state/info/queries/protocol/transactions.ts","webpack://_N_E/./src/state/info/queries/pools/topPools.ts","webpack://_N_E/./src/state/info/queries/pools/poolData.ts","webpack://_N_E/./src/state/info/queries/tokens/tokenData.ts","webpack://_N_E/./src/state/info/queries/tokens/topTokens.ts","webpack://_N_E/./src/state/info/updaters.ts","webpack://_N_E/./src/state/info/queries/search/index.ts","webpack://_N_E/./src/views/Info/components/InfoSearch/index.tsx","webpack://_N_E/./src/views/Info/components/InfoNav/index.tsx","webpack://_N_E/./src/views/Info/index.tsx"],"sourcesContent":["import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M5 13H16.17L11.29 17.88C10.9 18.27 10.9 18.91 11.29 19.3C11.68 19.69 12.31 19.69 12.7 19.3L19.29 12.71C19.68 12.32 19.68 11.69 19.29 11.3L12.71 4.7C12.32 4.31 11.69 4.31 11.3 4.7C10.91 5.09 10.91 5.72 11.3 6.11L16.17 11H5C4.45 11 4 11.45 4 12C4 12.55 4.45 13 5 13Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import { gql } from 'graphql-request'\nimport { infoClient } from 'utils/graphql'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartData } from '../helpers'\n\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await infoClient.request<PairDayDatasResponse>(query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await infoClient.request<TransactionResults>(POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n","import { PCS_V2_START } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { ChartEntry } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\nimport { fetchChartData, mapDayData } from '../helpers'\nimport { TokenDayDatasResponse } from '../types'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await infoClient.request<TokenDayDatasResponse>(query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await infoClient.request<TransactionResults>(TOKEN_TRANSACTIONS, {\n      address,\n    })\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n","import { getUnixTime } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { PriceChartEntry } from 'state/info/types'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport orderBy from 'lodash/orderBy'\n\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\n  blocks.map(\n    (block: any) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedBNB\n      }\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        bnbPrice\n      }\n    `,\n  )\n\n/**\n * Price data for token and bnb based on block number\n */\nconst priceQueryConstructor = (subqueries: string[]) => {\n  return gql`\n    query tokenPriceData {\n      ${subqueries}\n    }\n  `\n}\n\nconst fetchTokenPriceData = async (\n  address: string,\n  interval: number,\n  startTimestamp: number,\n): Promise<{\n  data?: PriceChartEntry[]\n  error: boolean\n}> => {\n  // Construct timestamps to query against\n  const endTimestamp = getUnixTime(new Date())\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return {\n        error: false,\n      }\n    }\n\n    const prices: any | undefined = await multiQuery(\n      priceQueryConstructor,\n      getPriceSubqueries(address, blocks),\n      INFO_CLIENT,\n      200,\n    )\n\n    if (!prices) {\n      console.error('Price data failed to load')\n      return {\n        error: false,\n      }\n    }\n\n    // format token BNB price results\n    const tokenPrices: {\n      timestamp: string\n      derivedBNB: number\n      priceUSD: number\n    }[] = []\n\n    // Get Token prices in BNB\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('t')[1]\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\n      if (timestamp) {\n        tokenPrices.push({\n          timestamp,\n          derivedBNB: prices[priceKey]?.derivedBNB ? parseFloat(prices[priceKey].derivedBNB) : 0,\n          priceUSD: 0,\n        })\n      }\n    })\n\n    // Go through BNB USD prices and calculate Token price based on it\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('b')[1]\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n      if (timestamp) {\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\n        if (tokenPriceIndex >= 0) {\n          const { derivedBNB } = tokenPrices[tokenPriceIndex]\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.bnbPrice ?? 0) * derivedBNB\n        }\n      }\n    })\n\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\n    const sortedTokenPrices = orderBy(tokenPrices, (tokenPrice) => parseInt(tokenPrice.timestamp, 10))\n\n    const formattedHistory = []\n\n    // for each timestamp, construct the open and close price\n    for (let i = 0; i < sortedTokenPrices.length - 1; i++) {\n      formattedHistory.push({\n        time: parseFloat(sortedTokenPrices[i].timestamp),\n        open: sortedTokenPrices[i].priceUSD,\n        close: sortedTokenPrices[i + 1].priceUSD,\n        high: sortedTokenPrices[i + 1].priceUSD,\n        low: sortedTokenPrices[i].priceUSD,\n      })\n    }\n\n    return { data: formattedHistory, error: false }\n  } catch (error) {\n    console.error(`Failed to fetch price data for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenPriceData\n","import { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { infoClient } from 'utils/graphql'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await infoClient.request<PoolsForTokenResponse>(POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n","import { useCallback, useEffect, useState, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\nimport { AppState, AppDispatch } from 'state'\nimport { isAddress } from 'utils'\nimport { Transaction } from 'state/info/types'\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\nimport {\n  updateProtocolData,\n  updateProtocolChartData,\n  updateProtocolTransactions,\n  updatePoolData,\n  addPoolKeys,\n  updatePoolChartData,\n  updatePoolTransactions,\n  updateTokenData,\n  addTokenKeys,\n  addTokenPoolAddresses,\n  updateTokenChartData,\n  updateTokenPriceData,\n  updateTokenTransactions,\n} from './actions'\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\n\n// Protocol hooks\n\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\n\n  const dispatch = useDispatch<AppDispatch>()\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\n    [dispatch],\n  )\n\n  return [protocolData, setProtocolData]\n}\n\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\n  const dispatch = useDispatch<AppDispatch>()\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\n    [dispatch],\n  )\n  return [chartData, setChartData]\n}\n\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\n  const dispatch = useDispatch<AppDispatch>()\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\n    [dispatch],\n  )\n  return [transactions, setTransactions]\n}\n\n// Pools hooks\n\nexport const useAllPoolData = (): {\n  [address: string]: { data?: PoolData }\n} => {\n  return useSelector((state: AppState) => state.info.pools.byAddress)\n}\n\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\n}\n\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\n}\n\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\n  const allPoolData = useAllPoolData()\n  const addNewPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addNewPoolKeys(untrackedAddresses)\n    }\n  }, [addNewPoolKeys, untrackedAddresses])\n\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      return allPoolData[address]?.data\n    })\n    .filter((pool) => pool)\n\n  return poolsWithData\n}\n\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolChartData(address)\n      if (!fetchError && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n\n// Tokens hooks\n\nexport const useAllTokenData = (): {\n  [address: string]: { data?: TokenData }\n} => {\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\n}\n\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (tokens: TokenData[]) => {\n      dispatch(updateTokenData({ tokens }))\n    },\n    [dispatch],\n  )\n}\n\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\n}\n\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  // if token not tracked yet track it\n  addresses?.forEach((a) => {\n    if (!allTokenData[a]) {\n      addNewTokenKeys([a])\n    }\n  })\n\n  const tokensWithData = useMemo(() => {\n    if (!addresses) {\n      return undefined\n    }\n    return addresses\n      .map((a) => {\n        return allTokenData[a]?.data\n      })\n      .filter((token) => token)\n  }, [addresses, allTokenData])\n\n  return tokensWithData\n}\n\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  if (!address || !isAddress(address)) {\n    return undefined\n  }\n\n  // if token not tracked yet track it\n  if (!allTokenData[address]) {\n    addNewTokenKeys([address])\n  }\n\n  return allTokenData[address]?.data\n}\n\nexport const usePoolsForToken = (address: string): string[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const poolsForToken = token.poolAddresses\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\n      if (!fetchError && addresses) {\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!poolsForToken && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, poolsForToken])\n\n  return poolsForToken\n}\n\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { chartData } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenChartData(address)\n      if (!fetchError && data) {\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const useTokenPriceData = (\n  address: string,\n  interval: number,\n  timeWindow: Duration,\n): PriceChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const priceData = token?.priceData[interval]\n  const [error, setError] = useState(false)\n\n  // construct timestamps and check if we need to fetch more data\n  const oldestTimestampFetched = token?.priceData.oldestFetchedTimestamp\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\n      if (data) {\n        dispatch(\n          updateTokenPriceData({\n            tokenAddress: address,\n            secondsInterval: interval,\n            priceData: data,\n            oldestFetchedTimestamp: startTimestamp,\n          }),\n        )\n      }\n      if (fetchingError) {\n        setError(true)\n      }\n    }\n    if (!priceData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\n\n  return priceData\n}\n\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { transactions } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else if (data) {\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n","import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\n  address?: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\n    skip += 1000\n    allFound = data?.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\n    // At this stage we track unix day ordinal for each data point to check for empty days later\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n    return {\n      [dayOrdinal]: dayData,\n      ...accum,\n    }\n  }, {})\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n","export interface Block {\n  number: number\n  timestamp: string\n}\n\nexport interface ChartEntry {\n  date: number\n  volumeUSD: number\n  liquidityUSD: number\n}\n\n/**\n * Formatted type for Candlestick charts\n */\nexport interface PriceChartEntry {\n  time: number\n  open: number\n  close: number\n  high: number\n  low: number\n}\n\nexport enum TransactionType {\n  SWAP,\n  MINT,\n  BURN,\n}\n\nexport type Transaction = {\n  type: TransactionType\n  hash: string\n  timestamp: string\n  sender: string\n  token0Symbol: string\n  token1Symbol: string\n  token0Address: string\n  token1Address: string\n  amountUSD: number\n  amountToken0: number\n  amountToken1: number\n}\n\nexport interface ProtocolData {\n  volumeUSD: number\n  volumeUSDChange: number // in 24h, as percentage\n\n  liquidityUSD: number\n  liquidityUSDChange: number // in 24h, as percentage\n\n  txCount: number\n  txCountChange: number\n}\n\nexport interface ProtocolState {\n  readonly overview?: ProtocolData\n\n  readonly chartData?: ChartEntry[]\n\n  readonly transactions?: Transaction[]\n}\n\n// POOLS\n\nexport interface PoolData {\n  address: string\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  volumeUSDChangeWeek: number\n\n  totalFees24h: number\n  totalFees7d: number\n  lpFees24h: number\n  lpFees7d: number\n  lpApr7d: number\n\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  token0Price: number\n  token1Price: number\n\n  liquidityToken0: number\n  liquidityToken1: number\n}\n\nexport interface PoolsState {\n  byAddress: {\n    [address: string]: {\n      data?: PoolData\n      chartData?: ChartEntry[]\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// TOKENS\n\nexport type TokenData = {\n  exists: boolean\n\n  name: string\n  symbol: string\n  address: string\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  txCount: number\n\n  liquidityToken: number\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  priceUSD: number\n  priceUSDChange: number\n  priceUSDChangeWeek: number\n}\n\nexport interface TokensState {\n  byAddress: {\n    [address: string]: {\n      data?: TokenData\n      poolAddresses?: string[]\n      chartData?: ChartEntry[]\n      priceData: {\n        oldestFetchedTimestamp?: number\n        [secondsInterval: number]: PriceChartEntry[] | undefined\n      }\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// Info redux state\nexport interface InfoState {\n  protocol: ProtocolState\n  pools: PoolsState\n  tokens: TokensState\n}\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: string[] = []\n\nexport interface LogoLoaderProps {\n  alt: string\n  src: string\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\n */\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\n  const [, refresh] = useState(0)\n\n  const srcFailedLoading = BAD_SRCS.includes(src)\n\n  if (src && !srcFailedLoading) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS.push(src)\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default LogoLoader\n","import { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport LogoLoader from './LogoLoader'\n\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const CurrencyLogo: React.FC<{\n  address?: string\n  size?: string\n}> = ({ address, size = '24px', ...rest }) => {\n  const src = useMemo(() => {\n    const checksummedAddress = isAddress(address)\n    if (checksummedAddress) {\n      return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\n    }\n    return null\n  }, [address])\n\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\n}\n\nconst DoubleCurrencyWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 32px;\n`\n\ninterface DoubleCurrencyLogoProps {\n  address0?: string\n  address1?: string\n  size?: number\n}\n\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\n  return (\n    <DoubleCurrencyWrapper>\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\n    </DoubleCurrencyWrapper>\n  )\n}\n","import styled from 'styled-components'\nimport { Text, Flex } from '@pancakeswap/uikit'\n\nexport const ClickableColumnHeader = styled(Text)`\n  cursor: pointer;\n`\n\nexport const TableWrapper = styled(Flex)`\n  width: 100%;\n  padding-top: 16px;\n  flex-direction: column;\n  gap: 16px;\n  background-color: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\nexport const Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n`\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M13.8382 2.20573L16.12 6.82916L21.2222 7.57057C22.9037 7.81489 23.5751 9.88123 22.3584 11.0672L18.6663 14.6661L19.5379 19.7477C19.8251 21.4224 18.0674 22.6995 16.5635 21.9088L11.9998 19.5096L7.43624 21.9088C5.93232 22.6995 4.17457 21.4224 4.4618 19.7477L5.33337 14.6661L1.64134 11.0672C0.424631 9.88125 1.09601 7.8149 2.77747 7.57057L7.87974 6.82916L10.1615 2.20573C10.9135 0.682081 13.0862 0.682068 13.8382 2.20573Z\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M9.17726 8.2193C9.10443 8.36687 8.96365 8.46916 8.80079 8.49282L3.49187 9.26425C3.08176 9.32385 2.918 9.82783 3.21476 10.1171L7.05633 13.8617C7.17418 13.9766 7.22795 14.1421 7.20013 14.3043L6.29326 19.5917C6.22321 20.0002 6.65192 20.3117 7.01873 20.1188L11.7672 17.6224C11.9128 17.5458 12.0869 17.5458 12.2325 17.6224L16.981 20.1188C17.3478 20.3117 17.7765 20.0002 17.7064 19.5917L16.7996 14.3043C16.7718 14.1421 16.8255 13.9766 16.9434 13.8617L20.7849 10.1171C21.0817 9.82783 20.9179 9.32385 20.5078 9.26425L15.1989 8.49282C15.0361 8.46916 14.8953 8.36687 14.8224 8.2193L12.4482 3.4086C12.2648 3.03698 11.7349 3.03698 11.5515 3.4086L9.17726 8.2193ZM16.2669 6.62701L14.2417 2.52347C13.3247 0.665354 10.675 0.665354 9.75801 2.52347L7.73279 6.62701L3.20427 7.28504C1.15372 7.583 0.334945 10.1029 1.81874 11.5493L5.09561 14.7434L4.32204 19.2537C3.97177 21.2959 6.11535 22.8533 7.94942 21.8891L11.9999 19.7597L16.0503 21.8891C17.8844 22.8533 20.0279 21.2959 19.6777 19.2537L18.9041 14.7434L22.181 11.5493C23.6648 10.1029 22.846 7.583 20.7954 7.28504L16.2669 6.62701Z\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { StarFillIcon, StarLineIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst HoverIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\n  const { theme } = useTheme()\n  return (\n    <HoverIcon {...rest}>\n      {fill ? (\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\n      ) : (\n        <StarLineIcon stroke={theme.colors.textDisabled} />\n      )}\n    </HoverIcon>\n  )\n}\n\nexport default SaveIcon\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { ProtocolData } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface PancakeFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pancakeFactories: PancakeFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      pancakeFactories(\n        ${block ? `block: { number: ${block}}` : ``}\n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await infoClient.request<OverviewResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n","/* eslint-disable no-await-in-loop */\nimport { PCS_V2_START } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { ChartEntry } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\nimport { fetchChartData, mapDayData } from '../helpers'\nimport { PancakeDayDatasResponse } from '../types'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await infoClient.request<PancakeDayDatasResponse>(PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n","import { gql } from 'graphql-request'\nimport { mapBurns, mapMints, mapSwaps } from 'state/info/queries/helpers'\nimport { BurnResponse, MintResponse, SwapResponse } from 'state/info/queries/types'\nimport { Transaction } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await infoClient.request<TransactionResults>(GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { infoClient } from 'utils/graphql'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await infoClient.request<TopPoolsResponse>(query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { PoolData } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await infoClient.request<PoolsQueryResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n","/* eslint-disable no-param-reassign */\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { TokenData } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getAmountChange, getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedBNB: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await infoClient.request<TokenQueryResponse>(query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedUSD : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedUSD : 0\n          const priceUSDWeek = week ? week.derivedUSD : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n","import { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { infoClient } from 'utils/graphql'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await infoClient.request<TopTokensResponse>(query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n","import { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n","import { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { gql } from 'graphql-request'\nimport { useEffect, useState } from 'react'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { PoolData, TokenData } from 'state/info/types'\nimport { infoClient } from 'utils/graphql'\n\nconst TOKEN_SEARCH = gql`\n  query tokens($symbol: String, $name: String, $id: String) {\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nconst POOL_SEARCH = gql`\n  query pools($tokens: [Bytes]!, $id: String) {\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\n      id\n    }\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\n      id\n    }\n    asAddress: pairs(first: 1, where: { id: $id }) {\n      id\n    }\n  }\n`\n\ninterface SingleQueryResponse {\n  id: string[]\n}\n\ninterface TokenSearchResponse {\n  asSymbol: SingleQueryResponse[]\n  asName: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\ninterface PoolSearchResponse {\n  as0: SingleQueryResponse[]\n  as1: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\n\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\n  const ids = entityArrays\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\n    .map((entity) => entity.id)\n  return Array.from(new Set(ids))\n}\n\nconst useFetchSearchResults = (\n  searchString: string,\n): {\n  tokens: TokenData[]\n  pools: PoolData[]\n  tokensLoading: boolean\n  poolsLoading: boolean\n  error: boolean\n} => {\n  const [searchResults, setSearchResults] = useState({\n    tokens: [], // Token ids found by search query\n    pools: [], // Pool ids found by search query\n    loading: false, // Search query is in progress\n    error: false, // GraphQL returned error\n  })\n\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\n\n  // New value received, reset state\n  useEffect(() => {\n    setSearchResults({\n      tokens: [],\n      pools: [],\n      loading: !searchStringTooShort,\n      error: false,\n    })\n  }, [searchString, searchStringTooShort])\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const tokens = await infoClient.request<TokenSearchResponse>(TOKEN_SEARCH, {\n          symbol: searchString.toUpperCase(),\n          // Most well known tokens have first letter capitalized\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\n          id: searchString.toLowerCase(),\n        })\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\n        const pools = await infoClient.request<PoolSearchResponse>(POOL_SEARCH, {\n          tokens: tokenIds,\n          id: searchString.toLowerCase(),\n        })\n        setSearchResults({\n          tokens: tokenIds,\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\n          loading: false,\n          error: false,\n        })\n      } catch (error) {\n        console.error(`Search failed for ${searchString}`, error)\n        setSearchResults({\n          tokens: [],\n          pools: [],\n          loading: false,\n          error: true,\n        })\n      }\n    }\n    if (!searchStringTooShort) {\n      search()\n    }\n  }, [searchString, searchStringTooShort])\n\n  // Save ids to Redux\n  // Token and Pool updater will then go fetch full data for these addresses\n  // These hooks in turn will return data of tokens that have been fetched\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\n  const poolDatasFull = usePoolDatas(searchResults.pools)\n\n  // If above hooks returned not all tokens/pools it means\n  // that some requests for full data are in progress\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\n\n  return {\n    tokens: tokenDatasFull,\n    pools: poolDatasFull,\n    tokensLoading,\n    poolsLoading,\n    error: searchResults.error,\n  }\n}\n\nexport default useFetchSearchResults\n","import { useRef, useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport useFetchSearchResults from 'state/info/queries/search'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useDebounce from 'hooks/useDebounce'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { PoolData } from 'state/info/types'\nimport { useRouter } from 'next/router'\nimport orderBy from 'lodash/orderBy'\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 30;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  z-index: 9999;\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst Menu = styled.div<{ hide: boolean }>`\n  display: ${({ hide }) => (hide ? 'none' : 'flex')};\n  flex-direction: column;\n  z-index: 9999;\n  width: 100%;\n  top: 50px;\n  max-height: 400px;\n  overflow: auto;\n  right: 0;\n  padding: 1.5rem;\n  padding-bottom: 2.5rem;\n  position: absolute;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.04);\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  margin-top: 4px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    width: 500px;\n    max-height: 600px;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n    width: 800px;\n    max-height: 600px;\n  }\n`\n\nconst Blackout = styled.div`\n  position: absolute;\n  min-height: 100vh;\n  width: 100vw;\n  z-index: 10;\n  background-color: black;\n  opacity: 0.7;\n  left: 0;\n  top: 0;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 1fr;\n  margin: 8px 0;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.5fr repeat(3, 1fr);\n  }\n`\n\nconst Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n  margin: 16px 0;\n`\n\nconst HoverText = styled.div<{ hide: boolean }>`\n  color: ${({ theme }) => theme.colors.secondary};\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\n  margin-top: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst HoverRowLink = styled.div`\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst OptionButton = styled.div<{ enabled: boolean }>`\n  width: fit-content;\n  padding: 4px 8px;\n  border-radius: 8px;\n  display: flex;\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 10px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\n  :hover {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n`\ntype BasicTokenData = {\n  address: string\n  symbol: string\n  name: string\n}\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\n  return (\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\n    token.name.toLowerCase().includes(value.toLowerCase())\n  )\n}\n\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\n  return (\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\n    tokenIncludesSearchTerm(pool.token0, value) ||\n    tokenIncludesSearchTerm(pool.token1, value)\n  )\n}\n\nconst Search = () => {\n  const router = useRouter()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const showMoreRef = useRef<HTMLDivElement>(null)\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [value, setValue] = useState('')\n  const debouncedSearchTerm = useDebounce(value, 600)\n\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\n\n  const [tokensShown, setTokensShown] = useState(3)\n  const [poolsShown, setPoolsShown] = useState(3)\n\n  useEffect(() => {\n    setTokensShown(3)\n    setPoolsShown(3)\n  }, [debouncedSearchTerm])\n\n  const handleOutsideClick = (e: any) => {\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\n\n    if (!menuClick && !inputCLick && !showMoreClick) {\n      setPoolsShown(3)\n      setTokensShown(3)\n      setShowMenu(false)\n    }\n  }\n\n  useEffect(() => {\n    if (showMenu) {\n      document.addEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'hidden'\n    } else {\n      document.removeEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'visible'\n    }\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick)\n    }\n  }, [showMenu])\n\n  // watchlist\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\n  const [savedPools, addSavedPool] = useWatchlistPools()\n\n  const handleItemClick = (to: string) => {\n    setShowMenu(false)\n    setPoolsShown(3)\n    setTokensShown(3)\n    router.push(to)\n  }\n\n  // get date for watchlist\n  const watchListTokenData = useTokenDatas(savedTokens)\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\n  const watchListPoolData = usePoolDatas(savedPools)\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\n\n  // filter on view\n  const [showWatchlist, setShowWatchlist] = useState(false)\n  const tokensForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\n    }\n    return orderBy(tokens, (token) => token.volumeUSD, 'desc')\n  }, [showWatchlist, tokens, watchListTokenData, value])\n\n  const poolForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\n    }\n    return orderBy(pools, (pool) => pool.volumeUSD, 'desc')\n  }, [pools, showWatchlist, watchListPoolData, value])\n\n  const contentUnderTokenList = () => {\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\n    const noTokensFound =\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noTokensMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  const contentUnderPoolList = () => {\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\n    const noPoolsFound =\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noPoolsMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {showMenu ? <Blackout /> : null}\n      <Container>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value)\n          }}\n          placeholder={t('Search pools or tokens')}\n          ref={inputRef}\n          onFocus={() => {\n            setShowMenu(true)\n          }}\n        />\n        <Menu hide={!showMenu} ref={menuRef}>\n          <Flex mb=\"16px\">\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\n              {t('Search')}\n            </OptionButton>\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\n              {t('Watchlist')}\n            </OptionButton>\n          </Flex>\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\n\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\">\n              {t('Tokens')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Price')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <CurrencyLogo address={token.address} />\n                    <Text ml=\"10px\">\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '8px' }}\n                      fill={savedTokens.includes(token.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedToken(token.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderTokenList()}\n          <HoverText\n            onClick={() => {\n              setTokensShown(tokensShown + 5)\n            }}\n            hide={tokensForList.length <= tokensShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n\n          <Break />\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\" mb=\"8px\">\n              {t('Pools')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 7D')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {poolForList.slice(0, poolsShown).map((p, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '10px' }}\n                      fill={savedPools.includes(p.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedPool(p.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderPoolList()}\n          <HoverText\n            onClick={() => {\n              setPoolsShown(poolsShown + 5)\n            }}\n            hide={poolForList.length <= poolsShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n        </Menu>\n      </Container>\n    </>\n  )\n}\n\nexport default Search\n","import { Box, ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { useTranslation } from 'contexts/Localization'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  flex-direction: column;\n  gap: 8px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const router = useRouter()\n  const isPools = router.asPath === '/info/pools'\n  const isTokens = router.asPath === '/info/tokens'\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\n\nexport const InfoPageLayout = ({ children }) => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      {children}\n    </>\n  )\n}\n"],"names":["props","Svg","viewBox","path","d","getPoolChartData","skip","address","query","pairDayDatas","data","gql","infoClient","startTime","PCS_V2_START","map","mapPairDayData","error","console","fetchPoolChartData","fetchChartData","POOL_TRANSACTIONS","fetchPoolTransactions","mints","burns","swaps","mapMints","mapBurns","mapSwaps","getTokenChartData","tokenDayDatas","mapDayData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mints1","burns0","burns1","swaps0","swaps1","mintsAs0","mintsAs1","burnsAs0","burnsAs1","swapsAs0","swapsAs1","getPriceSubqueries","tokenAddress","blocks","block","timestamp","number","priceQueryConstructor","subqueries","fetchTokenPriceData","interval","startTimestamp","endTimestamp","timestamps","time","prices","tokenPrices","sortedTokenPrices","formattedHistory","i","getUnixTime","Date","push","getBlocksFromTimestamps","length","multiQuery","INFO_CLIENT","Object","keys","forEach","priceKey","split","derivedBNB","parseFloat","priceUSD","tokenPriceIndex","findIndex","tokenPrice","bnbPrice","orderBy","parseInt","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","blacklist","TOKEN_BLACKLIST","addresses","asToken0","concat","asToken1","p","id","useProtocolData","protocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","pools","byAddress","useUpdatePoolData","updatePoolData","useAddPoolKeys","poolAddresses","addPoolKeys","usePoolDatas","allPoolData","addNewPoolKeys","untrackedAddresses","reduce","accum","includes","useEffect","filter","pool","usePoolChartData","useState","fetch","fetchError","updatePoolChartData","poolAddress","setError","usePoolTransactions","updatePoolTransactions","useAllTokenData","tokens","useUpdateTokenData","updateTokenData","useAddTokenKeys","tokenAddresses","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","a","useMemo","token","useTokenData","isAddress","usePoolsForToken","poolsForToken","addTokenPoolAddresses","useTokenChartData","updateTokenChartData","useTokenPriceData","timeWindow","priceData","oldestTimestampFetched","oldestFetchedTimestamp","utcCurrentTime","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenTransactions","updateTokenTransactions","mint","type","TransactionType","hash","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","burn","swap","from","amount0In","amount0Out","amount1In","amount1Out","tokenDayData","date","volumeUSD","dailyVolumeUSD","liquidityUSD","totalLiquidityUSD","pairDayData","reserveUSD","getEntityDayDatas","chartEntries","allFound","formattedDayDatas","availableDays","firstAvailableDayData","latestLiquidityUSD","dayOrdinal","dayData","ONE_DAY_UNIX","toFixed","toString","values","SWAP","MINT","BURN","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","toUpperCase","BAD_SRCS","src","alt","rest","srcFailedLoading","img","onError","refresh","HelpIcon","StyledLogo","styled","LogoLoader","size","theme","colors","background","text","CurrencyLogo","checksummedAddress","DoubleCurrencyWrapper","DoubleCurrencyLogo","address0","address1","ClickableColumnHeader","Text","TableWrapper","Flex","card","radii","cardBorder","PageButtons","Arrow","primary","Break","fillRule","clipRule","HoverIcon","fill","useTheme","StarFillIcon","stroke","warning","color","StarLineIcon","textDisabled","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSDWeek","totalFees24h","TOTAL_FEE","totalFees7d","lpFees24h","LP_HOLDERS_FEE","lpFees7d","lpApr7d","WEEKS_IN_YEAR","Infinity","getOverviewData","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","totalVolumeUSD","getDeltaTimestamps","t24","t48","useBlocksFromTimestamps","block24","block48","data24","data48","error24","error48","anyError","overviewData","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","undefined","pancakeFactories","setFetchState","blockError","fetchState","PANCAKE_DAY_DATAS","getOverviewChartData","pancakeDayDatas","setOverviewChartData","overviewChartData","GLOBAL_TRANSACTIONS","fetchTopTransactions","sort","b","fetchTopPools","timestamp24hAgo","setTopPoolAddresses","topPoolAddresses","POOL_AT_BLOCK","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","t24h","t48h","t7d","t14d","formattedPoolData","formattedPoolData24h","formattedPoolData48h","formattedPoolData7d","formattedPoolData14d","formatted","now","oneDayAgo","twoDaysAgo","oneWeekAgo","twoWeeksAgo","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","TOKEN_AT_BLOCK","fetchTokenData","parseTokenData","tokenData","derivedUSD","tradeVolumeUSD","totalLiquidity","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","t","setTopTokenAddresses","topTokenAddresses","ProtocolUpdater","setProtocolData","useFetchProtocolData","updateChartData","useFetchGlobalChartData","updateTransactions","fetchedProtocolData","fetchedChartData","chartError","PoolUpdater","useTopPoolAddresses","unfetchedPoolAddresses","poolDatas","poolDataError","TokenUpdater","updateTokenDatas","useTopTokenAddresses","unfetchedTokenAddresses","key","useFetchedTokenDatas","tokenDatas","tokenDataError","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","searchString","loading","searchStringTooShort","MINIMUM_SEARCH_CHARACTERS","setSearchResults","search","tokenIds","charAt","slice","toLowerCase","asAddress","asSymbol","asName","as0","as1","tokenDatasFull","searchResults","poolDatasFull","tokensLoading","poolsLoading","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","HoverText","HoverRowLink","OptionButton","enabled","tokenIncludesSearchTerm","value","router","useRouter","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","debouncedSearchTerm","useDebounce","useFetchSearchResults","setTokensShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","setShowMenu","showMenu","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","tokensForList","showWatchlist","poolForList","poolIncludesSearchTerm","onChange","setValue","placeholder","ref","onFocus","mb","onClick","setShowWatchlist","bold","textAlign","fontSize","tokensShown","ml","SaveIcon","marginLeft","stopPropagation","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","Skeleton","contentUnderTokenList","poolsShown","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","gradients","cardHeader","activeIndex","asPath","Box","ButtonMenu","scale","variant","ButtonMenuItem","as","NextLinkFromReactRouter","width","Search","InfoPageLayout","children","InfoNav"],"sourceRoot":""}