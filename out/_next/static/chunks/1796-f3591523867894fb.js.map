{"version":3,"file":"static/chunks/1796-f3591523867894fb.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/partition.js","webpack://_N_E/./packages/uikit/src/components/Card/CardBody.tsx","webpack://_N_E/./packages/uikit/src/components/Card/CardFooter.tsx","webpack://_N_E/./packages/uikit/src/components/Card/CardRibbon.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/AprRow.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/StyledCard.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/CardFooter/index.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/PoolCardHeader.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/CardActions/StakeActions.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/CardActions/index.tsx","webpack://_N_E/./src/views/Pools/components/PoolCard/index.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/StakingApy.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/Common/LockedActions.tsx","webpack://_N_E/./src/views/Pools/components/LockedPool/LockedStakingApy.tsx","webpack://_N_E/./src/views/Pools/components/CakeVaultCard/index.tsx","webpack://_N_E/./src/views/Pools/components/PoolTabButtons.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/Cells/StakedCell.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/PoolRow.tsx","webpack://_N_E/./src/views/Pools/components/PoolsTable/PoolsTable.tsx","webpack://_N_E/./src/views/Pools/index.tsx"],"sourcesContent":["var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\n\nexport type CardBodyProps = SpaceProps;\n\nconst CardBody = styled.div<CardBodyProps>`\n  ${space}\n`;\n\nCardBody.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardBody;\n","import styled from \"styled-components\";\nimport { space, SpaceProps } from \"styled-system\";\n\nexport type CardFooterProps = SpaceProps;\n\nconst CardFooter = styled.div<CardFooterProps>`\n  border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  ${space}\n`;\n\nCardFooter.defaultProps = {\n  p: \"24px\",\n};\n\nexport default CardFooter;\n","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components\";\nimport { CardRibbonProps } from \"./types\";\n\ninterface StyledCardRibbonProps extends CardRibbonProps {\n  theme: DefaultTheme;\n}\n\nconst StyledCardRibbon = styled.div<Partial<StyledCardRibbonProps>>`\n  z-index: ${({ theme }) => theme.zIndices.ribbon};\n  background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n  color: white;\n  margin: 0;\n  padding: 0;\n  padding: 8px 0;\n  position: absolute;\n  right: ${({ ribbonPosition }) => (ribbonPosition === \"right\" ? 0 : \"auto\")};\n  top: 0;\n  text-align: center;\n  transform: translateX(30%) translateY(0%) rotate(45deg);\n  transform: ${({ ribbonPosition }) =>\n    ribbonPosition === \"right\"\n      ? \"translateX(30%) translateY(0%) rotate(45deg)\"\n      : \"translateX(0%) translateY(200%) rotate(-45deg)\"};\n  transform-origin: top left;\n  width: 96px;\n\n  &:before,\n  &:after {\n    background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n    content: \"\";\n    height: 100%;\n    margin: 0 -1px; /* Removes tiny gap */\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n\n  &:before {\n    right: 100%;\n  }\n\n  &:after {\n    left: 100%;\n  }\n\n  & > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 96px;\n  }\n`;\n\nconst CardRibbon: React.FC<CardRibbonProps> = ({ variantColor, text, ribbonPosition, ...props }) => {\n  return (\n    <StyledCardRibbon variantColor={variantColor} ribbonPosition={ribbonPosition} {...props}>\n      <div title={text}>{text}</div>\n    </StyledCardRibbon>\n  );\n};\n\nCardRibbon.defaultProps = {\n  // eslint-disable-next-line react/default-props-match-prop-types\n  ribbonPosition: \"right\",\n};\n\nexport default CardRibbon;\n","import { Flex, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport Apr from 'views/Pools/components/Apr'\n\ninterface AprRowProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n  performanceFee?: number\n  showIcon?: boolean\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, stakedBalance, performanceFee = 0, showIcon = true }) => {\n  const { t } = useTranslation()\n  const { vaultKey } = pool\n\n  const tooltipContent = vaultKey\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{vaultKey ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      <Apr pool={pool} stakedBalance={stakedBalance} performanceFee={performanceFee} showIcon={showIcon} />\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled from 'styled-components'\nimport { Card } from '@pancakeswap/uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  min-width: 280px;\n  max-width: 100%;\n  margin: 0 0 24px 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 350px;\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport PoolStatsInfo from '../../PoolStatsInfo'\n\ninterface FooterProps {\n  pool: DeserializedPool\n  account: string\n  totalCakeInVault?: BigNumber\n  defaultExpanded?: boolean\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account, defaultExpanded, children }) => {\n  const { vaultKey } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded || false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Rewards are distributed and included into your staking balance automatically. There’s no need to manually compound your rewards.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(vaultKey ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {vaultKey ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedWrapper flexDirection=\"column\">\n          {children || <PoolStatsInfo pool={pool} account={account} />}\n        </ExpandedWrapper>\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import { CardHeader, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst PoolCardHeader: React.FC<{\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ isFinished = false, isStaking = false, children }) => {\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        {children}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport const PoolCardHeaderTitle: React.FC<{ isFinished?: boolean; title: ReactNode; subTitle: ReactNode }> = ({\n  isFinished,\n  title,\n  subTitle,\n}) => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n        {title}\n      </Heading>\n      <Text fontSize=\"14px\" color={isFinished ? 'textDisabled' : 'textSubtle'}>\n        {subTitle}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default PoolCardHeader\n","import { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { DeserializedPool } from 'state/types'\nimport { useApprovePool } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  pool: DeserializedPool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove, pendingTx } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={pendingTx}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPrice !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from '@pancakeswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  earningTokenPrice: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n      <Flex flexDirection=\"column\">\n        {isLoading ? (\n          <Skeleton width=\"80px\" height=\"48px\" />\n        ) : (\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        )}\n      </Flex>\n      <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n        {isCompoundPool ? t('Collect') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\n\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { useProfileRequirement } from 'views/Pools/hooks/useProfileRequirement'\nimport { DeserializedPool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\nimport { ProfileRequirementWarning } from '../../ProfileRequirementWarning'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, profileRequirement } =\n    pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const { notMeetRequired, notMeetThreshold } = useProfileRequirement(profileRequirement)\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t('Earned')}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {notMeetRequired || notMeetThreshold ? (\n          <ProfileRequirementWarning profileRequirement={profileRequirement} />\n        ) : needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\n\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { DeserializedPool } from 'state/types'\nimport { TokenPairImage } from 'components/TokenImage'\nimport AprRow from './AprRow'\nimport { StyledCard } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport PoolCardHeader, { PoolCardHeaderTitle } from './PoolCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<{ pool: DeserializedPool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      <PoolCardHeader isStaking={accountHasStakedBalance} isFinished={isFinished && sousId !== 0}>\n        <PoolCardHeaderTitle\n          title={isCakePool ? t('Manual') : t('Earn %asset%', { asset: earningToken.symbol })}\n          subTitle={isCakePool ? t('Earn CAKE, stake CAKE') : t('Stake %symbol%', { symbol: stakingToken.symbol })}\n        />\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\n      </PoolCardHeader>\n      <CardBody>\n        <AprRow pool={pool} stakedBalance={stakedBalance} />\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </CardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport AutoEarningsBreakdown from '../AutoEarningsBreakdown'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  pool: DeserializedPool\n  account: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({ cakeToDisplay, pool, account }) => {\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<AutoEarningsBreakdown pool={pool} account={account} />, {\n    placement: 'bottom-end',\n  })\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = ({ pool }: { pool: DeserializedPool }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, currentOverdueFee, currentPerformanceFee },\n  } = useVaultPoolByKey(pool.vaultKey)\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n    currentPerformanceFee.plus(currentOverdueFee),\n  )\n\n  if (!(userShares.gt(0) && account)) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && <RecentCakeProfitBalance cakeToDisplay={autoCakeToDisplay} pool={pool} account={account} />}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import { Flex, Text, Skeleton, useModal, Button, CalculateIcon } from '@pancakeswap/uikit'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport Balance from 'components/Balance'\nimport { memo } from 'react'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\nimport { VaultRoiCalculatorModal } from '../Vault/VaultRoiCalculatorModal'\n\nconst AprLabelContainer = styled(Flex)`\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport const StakingApy = memo(({ pool }: { pool: DeserializedPool }) => {\n  const { t } = useTranslation()\n\n  const { flexibleApy, lockedApy } = useVaultApy()\n\n  const [onPresentFlexibleApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} />)\n\n  const [onPresentLockedApyModal] = useModal(<VaultRoiCalculatorModal pool={pool} initialView={1} />)\n\n  return (\n    <LightGreyCard>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Flexible')} APY:\n        </Text>\n        {flexibleApy ? (\n          <AprLabelContainer alignItems=\"center\" justifyContent=\"flex-start\">\n            <Balance fontSize=\"16px\" value={parseFloat(flexibleApy)} decimals={2} unit=\"%\" bold />\n            <Button\n              onClick={(e) => {\n                e.stopPropagation()\n                onPresentFlexibleApyModal()\n              }}\n              variant=\"text\"\n              width=\"20px\"\n              height=\"20px\"\n              padding=\"0px\"\n              marginLeft=\"4px\"\n            >\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          </AprLabelContainer>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Locked')} APY:\n        </Text>\n        {lockedApy ? (\n          <FlexGap gap=\"4px\" flexWrap=\"wrap\" justifyContent=\"flex-end\">\n            <Text style={{ whiteSpace: 'nowrap' }} bold>\n              {t('Up to')}\n            </Text>\n            <AprLabelContainer alignItems=\"center\">\n              <Balance fontSize=\"16px\" value={parseFloat(lockedApy)} decimals={2} unit=\"%\" bold />\n              <Button\n                onClick={(e) => {\n                  e.stopPropagation()\n                  onPresentLockedApyModal()\n                }}\n                variant=\"text\"\n                width=\"20px\"\n                height=\"20px\"\n                padding=\"0px\"\n                marginLeft=\"4px\"\n              >\n                <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n              </Button>\n            </AprLabelContainer>\n          </FlexGap>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </Flex>\n    </LightGreyCard>\n  )\n})\n","import { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, pendingTx } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={pendingTx}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton, Box } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport ConvertToLock from '../../LockedPool/Common/ConvertToLock'\n\ninterface HasStakeActionProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  performanceFee: number\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance, performanceFee }) => {\n  const {\n    userData: {\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { stakingToken } = pool\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} performanceFee={performanceFee} pool={pool} />,\n  )\n  const [onPresentUnstake] = useModal(\n    <VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />,\n    true,\n    true,\n    'withdraw-vault',\n  )\n\n  return (\n    <>\n      <Flex mb=\"16px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n          <Text as={Flex} fontSize=\"12px\" color=\"textSubtle\" flexWrap=\"wrap\">\n            {cakePriceBusd.gt(0) ? (\n              <Balance\n                value={stakedDollarValue}\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                prefix=\"~\"\n                unit=\" USD\"\n              />\n            ) : (\n              <Skeleton mt=\"1px\" height={16} width={64} />\n            )}\n          </Text>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n            <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n      <Box mb=\"16px\">\n        <ConvertToLock stakingToken={stakingToken} currentStakedAmount={cakeAsNumberBalance} />\n      </Box>\n    </>\n  )\n}\n\nexport default HasSharesActions\n","import { Flex, Skeleton, useModal } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { usePoolsWithVault } from 'state/pools/hooks'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { VaultStakeButtonGroup } from '../../Vault/VaultStakeButtonGroup'\nimport VaultStakeModal from '../VaultStakeModal'\nimport LockedStakeModal from '../../LockedPool/Modals/LockedStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  performanceFee: number\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  performanceFee,\n}) => {\n  const { stakingToken } = pool\n  const { userDataLoaded } = usePoolsWithVault()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} performanceFee={performanceFee} />,\n  )\n  const [openPresentLockedStakeModal] = useModal(\n    <LockedStakeModal\n      currentBalance={stakingTokenBalance}\n      stakingToken={stakingToken}\n      stakingTokenBalance={stakingTokenBalance}\n    />,\n  )\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} performanceFee={performanceFee} />\n    ) : (\n      <VaultStakeButtonGroup\n        onFlexibleClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n        onLockedClick={openPresentLockedStakeModal}\n      />\n    )\n  }\n\n  return (\n    <Flex flexDirection=\"column\">{userDataLoaded ? renderStakeAction() : <Skeleton width=\"100%\" height=\"52px\" />}</Flex>\n  )\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\n\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: DeserializedPool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n  performanceFee: number\n}> = ({ pool, accountHasSharesStaked, isLoading, performanceFee }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n            performanceFee={performanceFee}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import { useMemo } from 'react'\nimport { Flex, Box } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport AddCakeButton from '../Buttons/AddCakeButton'\nimport ExtendButton from '../Buttons/ExtendDurationButton'\nimport AfterLockedActions from './AfterLockedActions'\nimport { LockedActionsPropsType } from '../types'\n\nconst LockedActions: React.FC<LockedActionsPropsType> = ({\n  userShares,\n  locked,\n  lockEndTime,\n  lockStartTime,\n  stakingToken,\n  stakingTokenBalance,\n  lockedAmount,\n}) => {\n  const position = useMemo(\n    () =>\n      getVaultPosition({\n        userShares,\n        locked,\n        lockEndTime,\n      }),\n    [userShares, locked, lockEndTime],\n  )\n  const { t } = useTranslation()\n  const lockedAmountAsNumber = getBalanceNumber(lockedAmount)\n\n  const currentBalance = useMemo(\n    () => (stakingTokenBalance ? new BigNumber(stakingTokenBalance) : BIG_ZERO),\n    [stakingTokenBalance],\n  )\n\n  if (position === VaultPosition.Locked) {\n    return (\n      <Flex>\n        <Box width=\"100%\" mr=\"4px\">\n          <AddCakeButton\n            lockEndTime={lockEndTime}\n            lockStartTime={lockStartTime}\n            currentLockedAmount={lockedAmount}\n            stakingToken={stakingToken}\n            currentBalance={currentBalance}\n            stakingTokenBalance={stakingTokenBalance}\n          />\n        </Box>\n        <Box width=\"100%\" ml=\"4px\">\n          <ExtendButton\n            lockEndTime={lockEndTime}\n            lockStartTime={lockStartTime}\n            stakingToken={stakingToken}\n            currentLockedAmount={lockedAmountAsNumber}\n          >\n            {t('Extend')}\n          </ExtendButton>\n        </Box>\n      </Flex>\n    )\n  }\n\n  return (\n    <AfterLockedActions\n      lockEndTime={lockEndTime}\n      lockStartTime={lockStartTime}\n      position={position}\n      currentLockedAmount={lockedAmountAsNumber}\n      stakingToken={stakingToken}\n    />\n  )\n}\n\nexport default LockedActions\n","import { useMemo, memo } from 'react'\nimport { getVaultPosition, VaultPosition } from 'utils/cakePool'\n\nimport { Flex, Text, Box, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApy } from 'hooks/useVaultApy'\nimport { BalanceWithLoading } from 'components/Balance'\nimport Divider from 'components/Divider'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport isUndefinedOrNull from 'utils/isUndefinedOrNull'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport BurningCountDown from './Common/BurningCountDown'\nimport LockedActions from './Common/LockedActions'\nimport YieldBoostRow from './Common/YieldBoostRow'\nimport LockDurationRow from './Common/LockDurationRow'\nimport useUserDataInVaultPresenter from './hooks/useUserDataInVaultPresenter'\nimport { LockedStakingApyPropsType } from './types'\n\nconst LockedStakingApy: React.FC<LockedStakingApyPropsType> = ({ stakingToken, stakingTokenBalance, userData }) => {\n  const { t } = useTranslation()\n  const position = useMemo(\n    () =>\n      getVaultPosition({\n        userShares: userData?.userShares,\n        locked: userData?.locked,\n        lockEndTime: userData?.lockEndTime,\n      }),\n    [userData],\n  )\n\n  const currentLockedAmountAsBigNumber = useMemo(() => {\n    return userData?.balance?.cakeAsBigNumber\n  }, [userData?.balance?.cakeAsBigNumber])\n\n  const currentLockedAmount = getBalanceNumber(currentLockedAmountAsBigNumber)\n\n  const usdValueStaked = useBUSDCakeAmount(currentLockedAmount)\n\n  const { weekDuration, lockEndDate, secondDuration, remainingTime } = useUserDataInVaultPresenter({\n    lockStartTime: userData?.lockStartTime,\n    lockEndTime: userData?.lockEndTime,\n  })\n\n  const { lockedApy } = useVaultApy({ duration: secondDuration })\n\n  // earningTokenBalance includes overdue fee if any\n  const earningTokenBalance = useMemo(() => {\n    return getBalanceNumber(currentLockedAmountAsBigNumber.minus(userData?.cakeAtLastUserAction))\n  }, [currentLockedAmountAsBigNumber, userData?.cakeAtLastUserAction])\n\n  const tooltipContent = t(\n    'Calculated based on current rates and subject to change based on pool conditions. It is an estimate provided for your convenience only, and by no means represents guaranteed returns.',\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  return (\n    <LightGreyCard>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Box>\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('CAKE locked')}\n          </Text>\n          <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={currentLockedAmount} decimals={5} />\n          <BalanceWithLoading\n            value={usdValueStaked}\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            prefix=\"~\"\n            unit=\" USD\"\n          />\n        </Box>\n        <Box>\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('Unlocks In')}\n          </Text>\n          <Text color={position >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'} bold fontSize=\"16px\">\n            {position >= VaultPosition.LockedEnd ? t('Unlocked') : remainingTime}\n          </Text>\n          <Text color={position >= VaultPosition.LockedEnd ? '#D67E0A' : 'text'} fontSize=\"12px\">\n            {t('On %date%', { date: lockEndDate })}\n          </Text>\n        </Box>\n      </Flex>\n      <Box mb=\"16px\">\n        <LockedActions\n          userShares={userData?.userShares}\n          locked={userData?.locked}\n          lockEndTime={userData?.lockEndTime}\n          lockStartTime={userData?.lockStartTime}\n          stakingToken={stakingToken}\n          stakingTokenBalance={stakingTokenBalance}\n          lockedAmount={currentLockedAmountAsBigNumber}\n        />\n      </Box>\n      <Divider />\n      {![VaultPosition.LockedEnd, VaultPosition.AfterBurning].includes(position) && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          {tooltipVisible && tooltip}\n          <TooltipText>\n            <Text ref={targetRef} color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n              {t('APY')}\n            </Text>\n          </TooltipText>\n          <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={parseFloat(lockedApy)} decimals={2} unit=\"%\" />\n        </Flex>\n      )}\n      <LockDurationRow weekDuration={weekDuration} />\n      {![VaultPosition.LockedEnd, VaultPosition.AfterBurning].includes(position) && (\n        <YieldBoostRow secondDuration={secondDuration} />\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('Recent CAKE profit')}\n        </Text>\n        <BalanceWithLoading color=\"text\" bold fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n      </Flex>\n      {position === VaultPosition.LockedEnd && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('After Burning In')}\n          </Text>\n          <Text color=\"failure\" bold>\n            <BurningCountDown lockEndTime={userData?.lockEndTime} />\n          </Text>\n        </Flex>\n      )}\n      {position === VaultPosition.AfterBurning && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {t('After burning')}\n          </Text>\n          <Text color=\"failure\" bold>\n            {isUndefinedOrNull(userData?.currentOverdueFee)\n              ? '-'\n              : t('%amount% Burned', { amount: getFullDisplayBalance(userData?.currentOverdueFee, 18, 5) })}\n          </Text>\n        </Flex>\n      )}\n    </LightGreyCard>\n  )\n}\n\nexport default memo(LockedStakingApy)\n","import { Box, CardBody, CardProps, Flex, Text, TokenPairImage } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\n\nimport CardFooter from '../PoolCard/CardFooter'\nimport PoolCardHeader, { PoolCardHeaderTitle } from '../PoolCard/PoolCardHeader'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport { VaultPositionTagWithLabel } from '../Vault/VaultPositionTag'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\nimport { StakingApy } from './StakingApy'\nimport VaultCardActions from './VaultCardActions'\nimport LockedStakingApy from '../LockedPool/LockedStakingApy'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps extends CardProps {\n  pool: DeserializedPool\n  showStakedOnly: boolean\n  defaultFooterExpanded?: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly, defaultFooterExpanded, ...props }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const vaultPool = useVaultPoolByKey(pool.vaultKey)\n\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFeeAsDecimal },\n  } = vaultPool\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isActive {...props}>\n      <PoolCardHeader isStaking={accountHasSharesStaked}>\n        <PoolCardHeaderTitle\n          title={vaultPoolConfig[pool.vaultKey].name}\n          subTitle={vaultPoolConfig[pool.vaultKey].description}\n        />\n        <TokenPairImage {...vaultPoolConfig[pool.vaultKey].tokenImage} width={64} height={64} />\n      </PoolCardHeader>\n      <StyledCardBody isLoading={isLoading}>\n        {account && <VaultPositionTagWithLabel userData={vaultPool.userData} />}\n        {account && vaultPool?.userData?.locked ? (\n          <LockedStakingApy\n            userData={vaultPool?.userData}\n            stakingToken={pool?.stakingToken}\n            stakingTokenBalance={pool?.userData?.stakingTokenBalance}\n          />\n        ) : (\n          <>\n            <StakingApy pool={pool} />\n            <FlexGap mt=\"16px\" gap=\"24px\" flexDirection={accountHasSharesStaked ? 'column-reverse' : 'column'}>\n              <Box>\n                {account && (\n                  <Box mb=\"8px\">\n                    <UnstakingFeeCountdownRow vaultKey={pool.vaultKey} />\n                  </Box>\n                )}\n                <RecentCakeProfitRow pool={pool} />\n              </Box>\n              <Flex flexDirection=\"column\">\n                {account ? (\n                  <VaultCardActions\n                    pool={pool}\n                    accountHasSharesStaked={accountHasSharesStaked}\n                    isLoading={isLoading}\n                    performanceFee={performanceFeeAsDecimal}\n                  />\n                ) : (\n                  <>\n                    <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                      {t('Start earning')}\n                    </Text>\n                    <ConnectWalletButton />\n                  </>\n                )}\n              </Flex>\n            </FlexGap>\n          </>\n        )}\n      </StyledCardBody>\n      <CardFooter defaultExpanded={defaultFooterExpanded} pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { NextLinkFromReactRouter } from 'components/NextLink'\nimport ToggleView from 'components/ToggleView/ToggleView'\nimport { ViewMode } from 'state/user/actions'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const router = useRouter()\n\n  const { t } = useTranslation()\n\n  const isExact = router.asPath === '/pools'\n\n  const viewModeToggle = (\n    <ToggleView idPrefix=\"clickPool\" viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n  )\n\n  const liveOrFinishedSwitch = (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={NextLinkFromReactRouter} to=\"/pools\" replace>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedPools}>\n          <ButtonMenuItem id=\"finished-pools-button\" as={NextLinkFromReactRouter} to=\"/pools/history\" replace>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n\n  const stakedOnlySwitch = (\n    <ToggleWrapper>\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n      <Text> {t('Staked only')}</Text>\n    </ToggleWrapper>\n  )\n\n  return (\n    <ViewControls>\n      {viewModeToggle}\n      {stakedOnlySwitch}\n      {liveOrFinishedSwitch}\n    </ViewControls>\n  )\n}\n\nexport default PoolTabButtons\n","import styled from 'styled-components'\nimport { Skeleton, Text, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { stakingToken, totalStaked, vaultKey } = pool\n  const { totalCakeInVault } = useVaultPoolByKey(vaultKey)\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"20px\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { DeserializedPool } from 'state/types'\nimport { useCurrentBlock } from 'state/block/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const currentBlock = useCurrentBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingBlockData = !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const isLoadingPublicData = hasPoolStarted ? !totalStaked.gt(0) || isLoadingBlockData : isLoadingBlockData\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import { Box, Flex, Skeleton, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface StakedCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)``\n\nconst StakedCell: React.FC<StakedCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const {\n    userData: {\n      locked,\n      isLoading: vaultUserDataLoading,\n      userShares,\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = pool.vaultKey && hasSharesStaked\n\n  // pool\n  const { stakingTokenPrice, stakingToken, userData } = pool\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const labelText = `${pool.stakingToken.symbol} ${locked ? t('Locked') : t('Staked')}`\n\n  const hasStaked = account && (stakedBalance.gt(0) || isVaultWithShares)\n\n  const userDataLoading = pool.vaultKey ? vaultUserDataLoading : !userDataLoaded\n\n  return (\n    <StyledCell role=\"cell\" flex={pool.vaultKey && !hasStaked ? '1 0 120px' : '2 0 100px'}>\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {userDataLoading && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasStaked ? 'primary' : 'textDisabled'}\n                  decimals={hasStaked ? 5 : 1}\n                  value={\n                    hasStaked\n                      ? pool.vaultKey\n                        ? Number.isNaN(cakeAsNumberBalance)\n                          ? 0\n                          : cakeAsNumberBalance\n                        : stakedTokenBalance\n                      : 0\n                  }\n                />\n                {hasStaked ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={pool.vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport AutoAprCell from './Cells/AutoAprCell'\nimport StakedCell from './Cells/StakedCell'\n\ninterface PoolRowProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl, isXxl, isTablet, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const isXLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const isCakePool = pool.sousId === 0\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        {pool.vaultKey ? (\n          isXLargerScreen && pool.vaultKey === VaultKey.CakeVault && <AutoEarningsCell pool={pool} account={account} />\n        ) : (\n          <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        )}\n        {isXLargerScreen && pool.vaultKey === VaultKey.CakeVault && isCakePool ? (\n          <StakedCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        ) : null}\n        {isLargerScreen && !isCakePool && <TotalStakedCell pool={pool} />}\n        {pool.vaultKey ? <AutoAprCell pool={pool} /> : <AprCell pool={pool} />}\n        {isLargerScreen && isCakePool && <TotalStakedCell pool={pool} />}\n        {isDesktop && !isCakePool && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: DeserializedPool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  scroll-margin-top: 64px;\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable id=\"pools-table\" role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow key={pool.vaultKey ?? pool.sousId} pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { BigNumber as EthersBigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text, Link } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { usePoolsPageFetch, usePoolsWithVault } from 'state/pools/hooks'\nimport { latinise } from 'utils/latinise'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { DeserializedPool, DeserializedPoolVault } from 'state/types'\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport { useRouter } from 'next/router'\nimport Loading from 'components/Loading'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { BSC_BLOCK_TIME } from 'config'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { getCakeVaultEarnings } from './helpers'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst FinishedTextContainer = styled(Flex)`\n  padding-bottom: 32px;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst FinishedTextLink = styled(Link)`\n  font-weight: 400;\n  white-space: nowrap;\n  text-decoration: underline;\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst sortPools = (account: string, sortOption: string, pools: DeserializedPool[], poolsToSort: DeserializedPool[]) => {\n  switch (sortOption) {\n    case 'apr':\n      // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n      return orderBy(poolsToSort, (pool: DeserializedPool) => (pool.apr ? pool.apr : 0), 'desc')\n    case 'earned':\n      return orderBy(\n        poolsToSort,\n        (pool: DeserializedPool) => {\n          if (!pool.userData || !pool.earningTokenPrice) {\n            return 0\n          }\n\n          if (pool.vaultKey) {\n            const vault = pool as DeserializedPoolVault\n            if (!vault.userData || !vault.userData.userShares) {\n              return 0\n            }\n            return getCakeVaultEarnings(\n              account,\n              vault.userData.cakeAtLastUserAction,\n              vault.userData.userShares,\n              vault.pricePerFullShare,\n              vault.earningTokenPrice,\n              vault.userData.currentOverdueFee.plus(vault.userData.currentPerformanceFee),\n            ).autoUsdToDisplay\n          }\n          return pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n        },\n        'desc',\n      )\n    case 'totalStaked': {\n      return orderBy(\n        poolsToSort,\n        (pool: DeserializedPool) => {\n          let totalStaked = Number.NaN\n          if (pool.vaultKey) {\n            const vault = pool as DeserializedPoolVault\n            if (pool.stakingTokenPrice && vault.totalCakeInVault.isFinite()) {\n              totalStaked =\n                +formatUnits(EthersBigNumber.from(vault.totalCakeInVault.toString()), pool.stakingToken.decimals) *\n                pool.stakingTokenPrice\n            }\n          } else if (pool.totalStaked?.isFinite() && pool.stakingTokenPrice) {\n            totalStaked =\n              +formatUnits(EthersBigNumber.from(pool.totalStaked.toString()), pool.stakingToken.decimals) *\n              pool.stakingTokenPrice\n          }\n          return Number.isFinite(totalStaked) ? totalStaked : 0\n        },\n        'desc',\n      )\n    }\n    case 'latest':\n      return orderBy(poolsToSort, (pool: DeserializedPool) => Number(pool.sousId), 'desc')\n    default:\n      return poolsToSort\n  }\n}\n\nconst POOL_START_BLOCK_THRESHOLD = (60 / BSC_BLOCK_TIME) * 4\n\nconst Pools: React.FC = () => {\n  const router = useRouter()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools, userDataLoaded } = usePoolsWithVault()\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly()\n  const [viewMode, setViewMode] = useUserPoolsViewMode()\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenPoolsLength = useRef(0)\n  const initialBlock = useInitialBlock()\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const openPoolsWithStartBlockFilter = useMemo(\n    () =>\n      openPools.filter((pool) =>\n        initialBlock > 0 && pool.startBlock\n          ? Number(pool.startBlock) < initialBlock + POOL_START_BLOCK_THRESHOLD\n          : true,\n      ),\n    [initialBlock, openPools],\n  )\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.vaultKey) {\n          const vault = pool as DeserializedPoolVault\n          return vault.userData.userShares && vault.userData.userShares.gt(0)\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools],\n  )\n  const stakedOnlyOpenPools = useCallback(() => {\n    return openPoolsWithStartBlockFilter.filter((pool) => {\n      if (pool.vaultKey) {\n        const vault = pool as DeserializedPoolVault\n        return vault.userData.userShares && vault.userData.userShares.gt(0)\n      }\n      return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n    })\n  }, [openPoolsWithStartBlockFilter])\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePoolsPageFetch()\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n          return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\n        }\n        return poolsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const showFinishedPools = router.pathname.includes('history')\n\n  const handleChangeSearchQuery = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(event.target.value),\n    [],\n  )\n\n  const handleSortOptionChange = useCallback((option: OptionProps) => setSortOption(option.value), [])\n\n  let chosenPools\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools() : openPoolsWithStartBlockFilter\n  }\n\n  chosenPools = useMemo(() => {\n    const sortedPools = sortPools(account, sortOption, pools, chosenPools).slice(0, numberOfPoolsVisible)\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      return sortedPools.filter((pool) => latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery))\n    }\n    return sortedPools\n  }, [account, sortOption, pools, chosenPools, numberOfPoolsVisible, searchQuery])\n  chosenPoolsLength.current = chosenPools.length\n\n  const cardLayout = (\n    <CardLayout>\n      {chosenPools.map((pool) =>\n        pool.vaultKey ? (\n          <CakeVaultCard key={pool.vaultKey} pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Syrup Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Just stake some tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolControls>\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <FilterContainer>\n            <LabelWrapper>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                    {\n                      label: t('Latest'),\n                      value: 'latest',\n                    },\n                  ]}\n                  onOptionChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <FinishedTextContainer>\n            <Text fontSize={['16px', null, '20px']} color=\"failure\" pr=\"4px\">\n              {t('Looking for v1 CAKE syrup pools?')}\n            </Text>\n            <FinishedTextLink href=\"/migration\" fontSize={['16px', null, '20px']} color=\"failure\">\n              {t('Go to migration page')}.\n            </FinishedTextLink>\n          </FinishedTextContainer>\n        )}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\" mb=\"4px\">\n            <Loading />\n          </Flex>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={observerRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"names":["partition","createAggregator","result","value","key","push","module","exports","CardBody","styled","space","defaultProps","p","CardFooter","theme","colors","cardBorder","StyledCardRibbon","zIndices","ribbon","variantColor","ribbonPosition","CardRibbon","text","props","div","title","pool","stakedBalance","performanceFee","showIcon","useTranslation","t","vaultKey","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","Flex","alignItems","justifyContent","TooltipText","ref","Apr","StyledCard","Card","isFinished","mediaQueries","sm","ExpandableButtonWrapper","ExpandedWrapper","account","defaultExpanded","children","useState","manualTooltipText","autoTooltipText","CompoundingPoolTag","ManualPoolTag","HelpIcon","ml","width","height","color","ExpandableLabel","expanded","isExpanded","onClick","setIsExpanded","flexDirection","PoolStatsInfo","Wrapper","CardHeader","background","backgroundDisabled","gradients","radii","card","PoolCardHeaderTitle","subTitle","Heading","scale","Text","fontSize","isStaking","isLoading","sousId","stakingToken","earningToken","stakingTokenContract","useERC20","address","useApprovePool","symbol","handleApprove","pendingTx","Skeleton","Button","endIcon","AutoRenewIcon","spin","disabled","stakingTokenBalance","isBnbPool","isStaked","stakingTokenPrice","stakingLimit","userData","stakedTokenBalance","getBalanceNumber","decimals","stakedTokenDollarBalance","multipliedBy","onPresentTokenRequired","useModal","NotEnoughTokensModal","tokenSymbol","onPresentStake","StakeModal","onPresentUnstake","isRemovingStake","reachStakingLimit","gt","gte","Balance","bold","prefix","unit","IconButton","variant","mr","MinusIcon","span","AddIcon","earnings","earningTokenPrice","earningTokenBalance","formattedBalance","formatNumber","earningTokenDollarBalance","fullBalance","getFullDisplayBalance","hasEarnings","toNumber","isCompoundPool","onPresentCollect","CollectModal","earningsDollarValue","mb","display","InlineText","harvest","poolCategory","profileRequirement","PoolCategory","allowance","BigNumber","BIG_ZERO","pendingReward","needsApproval","useProfileRequirement","notMeetRequired","notMeetThreshold","Box","textTransform","HarvestActions","ProfileRequirementWarning","ApprovalAction","StakeActions","accountHasStakedBalance","isCakePool","PoolCardHeader","asset","TokenPairImage","primaryToken","secondaryToken","AprRow","mt","CardActions","ConnectWalletButton","cakeToDisplay","AutoEarningsBreakdown","small","useWeb3React","useVaultPoolByKey","pricePerFullShare","cakeAtLastUserAction","userShares","currentOverdueFee","currentPerformanceFee","cakePriceBusd","usePriceCakeBusd","getCakeVaultEarnings","plus","hasAutoEarnings","autoCakeToDisplay","RecentCakeProfitBalance","AprLabelContainer","StakingApy","memo","useVaultApy","flexibleApy","lockedApy","onPresentFlexibleApyModal","VaultRoiCalculatorModal","onPresentLockedApyModal","initialView","LightGreyCard","parseFloat","e","stopPropagation","padding","marginLeft","CalculateIcon","FlexGap","gap","flexWrap","style","whiteSpace","setLastUpdated","useVaultApprove","balance","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","VaultStakeModal","stakingMax","as","ConvertToLock","currentStakedAmount","accountHasSharesStaked","usePoolsWithVault","userDataLoaded","openPresentLockedStakeModal","LockedStakeModal","currentBalance","HasSharesActions","VaultStakeButtonGroup","onFlexibleClick","onLockedClick","useCheckVaultApprovalStatus","isVaultApproved","VaultStakeActions","VaultApprovalAction","locked","lockEndTime","lockStartTime","lockedAmount","position","useMemo","getVaultPosition","lockedAmountAsNumber","VaultPosition","AddCakeButton","currentLockedAmount","ExtendButton","AfterLockedActions","LockedStakingApy","currentLockedAmountAsBigNumber","usdValueStaked","useBUSDCakeAmount","useUserDataInVaultPresenter","weekDuration","lockEndDate","secondDuration","remainingTime","duration","minus","BalanceWithLoading","date","LockedActions","Divider","includes","LockDurationRow","YieldBoostRow","BurningCountDown","isUndefinedOrNull","amount","StyledCardBody","vaultPool","showStakedOnly","defaultFooterExpanded","fees","performanceFeeAsDecimal","isVaultUserDataLoading","isActive","vaultPoolConfig","name","description","tokenImage","VaultPositionTagWithLabel","UnstakingFeeCountdownRow","RecentCakeProfitRow","VaultCardActions","ToggleWrapper","ViewControls","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","router","useRouter","isExact","asPath","viewModeToggle","ToggleView","idPrefix","onToggle","mode","liveOrFinishedSwitch","ButtonMenu","activeIndex","ButtonMenuItem","NextLinkFromReactRouter","to","replace","NotificationDot","show","id","stakedOnlySwitch","Toggle","checked","onChange","StyledCell","BaseCell","useMatchBreakpoints","isMobile","isManualCakePool","labelText","role","CellContent","textAlign","event","undefined","totalStaked","totalCakeInVault","totalStakedBalance","startBlock","endBlock","currentBlock","useCurrentBlock","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","renderBlocks","flex","Link","external","href","getBscScanLink","TimerIcon","isLoadingBlockData","showLoading","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","hasStaked","userDataLoading","vaultUserDataLoading","Number","isNaN","StyledRow","isXs","isSm","isMd","isLg","isXl","isXxl","isTablet","isDesktop","isLargerScreen","isXLargerScreen","shouldRenderActionPanel","useDelayedUnmount","setExpanded","prev","NameCell","VaultKey","AutoEarningsCell","EarningsCell","StakedCell","TotalStakedCell","AutoAprCell","AprCell","EndsInCell","ExpandActionCell","isFullLayout","ActionPanel","breakpoints","StyledTable","StyledTableBorder","ScrollButtonContainer","pools","tableWrapperEl","useRef","map","PoolRow","current","scrollIntoView","behavior","ChevronUpIcon","CardLayout","FlexLayout","PoolControls","FilterContainer","LabelWrapper","ControlStretch","FinishedTextContainer","md","FinishedTextLink","POOL_START_BLOCK_THRESHOLD","BSC_BLOCK_TIME","useUserPoolStakedOnly","useUserPoolsViewMode","useIntersectionObserver","observerRef","isIntersecting","chosenPoolsLength","initialBlock","useInitialBlock","openPoolsWithStartBlockFilter","openPools","filter","stakedOnlyFinishedPools","finishedPools","vault","isGreaterThan","stakedOnlyOpenPools","useCallback","length","usePoolsPageFetch","useEffect","setNumberOfPoolsVisible","poolsCurrentlyVisible","chosenPools","showFinishedPools","pathname","handleChangeSearchQuery","setSearchQuery","target","handleSortOptionChange","option","setSortOption","sortedPools","sortOption","poolsToSort","orderBy","apr","autoUsdToDisplay","times","NaN","isFinite","formatUnits","EthersBigNumber","toString","sortPools","slice","numberOfPoolsVisible","searchQuery","lowercaseQuery","latinise","toLowerCase","cardLayout","CakeVaultCard","PoolCard","tableLayout","PoolsTable","PageHeader","Page","PoolTabButtons","Select","options","label","onOptionChange","SearchInput","placeholder","pr","Loading","ViewMode","Image","mx","src","alt"],"sourceRoot":""}