{"version":3,"file":"static/chunks/5615-190dc4ea08f3e7b9.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowDown.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowUpDown.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/AutoRenew.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ChevronRight.tsx","webpack://_N_E/./src/components/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/hooks/useTransactionDeadline.ts","webpack://_N_E/./src/hooks/useCurrentBlockTimestamp.ts","webpack://_N_E/./src/utils/maxAmountSpend.ts","webpack://_N_E/./src/config/constants/swapWarningTokens.ts","webpack://_N_E/./src/utils/shouldShowSwapWarning.ts","webpack://_N_E/./src/views/Swap/hooks/useRefreshBlockNumber.ts","webpack://_N_E/./src/views/Swap/components/AddressInputPanel.tsx","webpack://_N_E/./src/views/Swap/components/styleds.tsx","webpack://_N_E/./src/views/Swap/components/FormattedPriceImpact.tsx","webpack://_N_E/./src/views/Swap/components/SwapModalFooter.tsx","webpack://_N_E/./src/views/Swap/components/SwapModalHeader.tsx","webpack://_N_E/./src/views/Swap/components/ConfirmSwapModal.tsx","webpack://_N_E/./src/hooks/useLast.ts","webpack://_N_E/./src/views/Swap/components/SwapRoute.tsx","webpack://_N_E/./src/views/Swap/components/AdvancedSwapDetails.tsx","webpack://_N_E/./src/views/Swap/components/AdvancedSwapDetailsDropdown.tsx","webpack://_N_E/./src/views/Swap/components/TradePrice.tsx","webpack://_N_E/./src/views/Swap/components/ImportTokenWarningModal.tsx","webpack://_N_E/./src/views/Swap/components/ProgressSteps.tsx","webpack://_N_E/./src/components/CardNav/index.tsx","webpack://_N_E/./src/components/TxMining/index.tsx","webpack://_N_E/./src/utils/isZero.ts","webpack://_N_E/./src/hooks/useSwapCallback.ts","webpack://_N_E/./src/hooks/useSwapCallArguments.ts","webpack://_N_E/./src/hooks/useWrapCallback.ts","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/SafemoonWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/ItamWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/BondlyWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/Acknowledgement.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/CcarWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/BTTWarning.tsx","webpack://_N_E/./src/views/Swap/components/SwapWarningModal/index.tsx","webpack://_N_E/./src/views/Swap/styles.tsx","webpack://_N_E/./src/views/Swap/components/CurrencyInputHeader.tsx","webpack://_N_E/./src/views/Swap/index.tsx","webpack://_N_E/./src/views/Swap/components/confirmPriceImpactWithoutFee.ts"],"sourcesContent":["import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M11 5V16.17L6.11997 11.29C5.72997 10.9 5.08997 10.9 4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7L11.29 19.29C11.68 19.68 12.31 19.68 12.7 19.29L19.29 12.7C19.68 12.31 19.68 11.68 19.29 11.29C18.9 10.9 18.27 10.9 17.88 11.29L13 16.17V5C13 4.45 12.55 4 12 4C11.45 4 11 4.45 11 5Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M16 17.01V11c0-.55-.45-1-1-1s-1 .45-1 1v6.01h-1.79c-.45 0-.67.54-.35.85l2.79 2.78c.2.19.51.19.71 0l2.79-2.78c.32-.31.09-.85-.35-.85H16zM8.65 3.35L5.86 6.14c-.32.31-.1.85.35.85H8V13c0 .55.45 1 1 1s1-.45 1-1V6.99h1.79c.45 0 .67-.54.35-.85L9.35 3.35a.501.501 0 00-.7 0z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M12 6V7.79C12 8.24 12.54 8.46 12.85 8.14L15.64 5.35C15.84 5.15 15.84 4.84 15.64 4.64L12.85 1.85C12.54 1.54 12 1.76 12 2.21V4C7.58 4 4 7.58 4 12C4 13.04 4.2 14.04 4.57 14.95C4.84 15.62 5.7 15.8 6.21 15.29C6.48 15.02 6.59 14.61 6.44 14.25C6.15 13.56 6 12.79 6 12C6 8.69 8.69 6 12 6ZM17.79 8.71C17.52 8.98 17.41 9.4 17.56 9.75C17.84 10.45 18 11.21 18 12C18 15.31 15.31 18 12 18V16.21C12 15.76 11.46 15.54 11.15 15.86L8.36 18.65C8.16 18.85 8.16 19.16 8.36 19.36L11.15 22.15C11.46 22.46 12 22.24 12 21.8V20C16.42 20 20 16.42 20 12C20 10.96 19.8 9.96 19.43 9.05C19.16 8.38 18.3 8.2 17.79 8.71Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M9.29006 15.88L13.1701 12L9.29006 8.12001C8.90006 7.73001 8.90006 7.10001 9.29006 6.71001C9.68006 6.32001 10.3101 6.32001 10.7001 6.71001L15.2901 11.3C15.6801 11.69 15.6801 12.32 15.2901 12.71L10.7001 17.3C10.3101 17.69 9.68006 17.69 9.29006 17.3C8.91006 16.91 8.90006 16.27 9.29006 15.88Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<Props> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title={t('Unsupported Assets')} maxWidth=\"420px\" onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link external small color=\"primaryDark\" href={getBscScanLink(token.address, 'address', chainId)}>\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            {t(\n              'Some assets are not available through this interface because they may not work well with our smart contract or we are unable to allow trading for legal reasons.',\n            )}\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const { t } = useTranslation()\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        {t('Read more about unsupported assets')}\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\nimport { MIN_BNB } from '../config/constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\n    }\n    return CurrencyAmount.ether(JSBI.BigInt(0))\n  }\n  return currencyAmount\n}\n","import { Token } from '@pancakeswap/sdk'\nimport tokens from 'config/constants/tokens'\n\nconst { bondly, safemoon, itam, ccar, bttold } = tokens\n\ninterface WarningTokenList {\n  [key: string]: Token\n}\n\nconst SwapWarningTokens = <WarningTokenList>{\n  safemoon,\n  bondly,\n  itam,\n  ccar,\n  bttold,\n}\n\nexport default SwapWarningTokens\n","import { Token } from '@pancakeswap/sdk'\nimport SwapWarningTokens from 'config/constants/swapWarningTokens'\n\nconst swapWarningTokens = Object.values(SwapWarningTokens)\n\nconst shouldShowSwapWarning = (swapCurrency: Token) => {\n  return swapWarningTokens.some((warningToken) => swapCurrency.address === warningToken.address)\n}\n\nexport default shouldShowSwapWarning\n","import { useState, useCallback, useEffect } from 'react'\nimport { useSWRConfig } from 'swr'\n\nexport const useRefreshBlockNumber = () => {\n  const [isLoading, setFetch] = useState(false)\n\n  const refreshBlockNumber = useCallback(() => {\n    if (!isLoading) {\n      setFetch(true)\n    }\n  }, [isLoading])\n\n  const { mutate } = useSWRConfig()\n\n  useEffect(() => {\n    if (!isLoading) return\n\n    mutate('blockNumber')\n\n    // setTimeout is used to demonstrate the loading\n    // because the real loading state occurs on multicall state\n    // we don't know when the fetch is finished.\n    setTimeout(() => setFetch(false), 500)\n  }, [mutate, isLoading])\n\n  return { refreshBlockNumber, isLoading }\n}\n\nexport default useRefreshBlockNumber\n","import { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Text, Link } from '@pancakeswap/uikit'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\nimport { AutoColumn } from '../../../components/Layout/Column'\nimport { RowBetween } from '../../../components/Layout/Row'\nimport { getBscScanLink } from '../../../utils'\n\nconst InputPanel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-radius: 1.25rem;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div<{ error: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1.25rem;\n  border: 1px solid ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.background)};\n  transition: border-color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')},\n    color 500ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst Input = styled.input<{ error?: boolean }>`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  transition: color 300ms ${({ error }) => (error ? 'step-end' : 'step-start')};\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.primary)};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textDisabled};\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nexport default function AddressInputPanel({\n  id,\n  value,\n  onChange,\n}: {\n  id?: string\n  // the typed string value\n  value: string\n  // triggers whenever the typed value changes\n  onChange: (value: string) => void\n}) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const address = isAddress(value) ? value : undefined\n\n  const handleInput = useCallback(\n    (event) => {\n      const input = event.target.value\n      const withoutSpaces = input.replace(/\\s+/g, '')\n      onChange(withoutSpaces)\n    },\n    [onChange],\n  )\n\n  const error = Boolean(value.length > 0 && !address)\n\n  return (\n    <InputPanel id={id}>\n      <ContainerRow error={error}>\n        <InputContainer>\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <Text>{t('Recipient')}</Text>\n              {address && chainId && (\n                <Link external small href={getBscScanLink(address, 'address', chainId)}>\n                  ({t('View on BscScan')})\n                </Link>\n              )}\n            </RowBetween>\n            <Input\n              className=\"recipient-address-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              placeholder={t('Wallet Address')}\n              error={error}\n              pattern=\"^(0x[a-fA-F0-9]{40})$\"\n              onChange={handleInput}\n              value={value}\n            />\n          </AutoColumn>\n        </InputContainer>\n      </ContainerRow>\n    </InputPanel>\n  )\n}\n","import { ErrorIcon, Flex, Text } from '@pancakeswap/uikit'\nimport { AutoColumn } from 'components/Layout/Column'\nimport styled, { css } from 'styled-components'\n\nexport const Wrapper = styled(Flex)`\n  position: relative;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`\n\nexport const ArrowWrapper = styled.div<{ clickable: boolean }>`\n  padding: 2px;\n\n  ${({ clickable }) =>\n    clickable\n      ? css`\n          :hover {\n            cursor: pointer;\n            opacity: 0.8;\n          }\n        `\n      : null}\n`\n\nexport const ErrorText = styled(Text)<{ severity?: 0 | 1 | 2 | 3 | 4 }>`\n  color: ${({ theme, severity }) =>\n    severity === 3 || severity === 4\n      ? theme.colors.failure\n      : severity === 2\n      ? theme.colors.warning\n      : severity === 1\n      ? theme.colors.text\n      : theme.colors.success};\n`\n\nexport const StyledBalanceMaxMini = styled.button`\n  height: 22px;\n  width: 22px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: none;\n  border-radius: 50%;\n  padding: 0.2rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  margin-left: 0.4rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  float: right;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n  }\n  :focus {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n    outline: none;\n  }\n`\n\nexport const TruncatedText = styled(Text).attrs({ ellipsis: true })`\n  width: 220px;\n`\n\nconst SwapCallbackErrorInner = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure}33`};\n  border-radius: 1rem;\n  display: flex;\n  align-items: center;\n  font-size: 0.825rem;\n  width: 100%;\n  padding: 3rem 1.25rem 1rem 1rem;\n  margin-top: -2rem;\n  color: ${({ theme }) => theme.colors.failure};\n  z-index: -1;\n  p {\n    padding: 0;\n    margin: 0;\n    font-weight: 500;\n  }\n`\n\nconst SwapCallbackErrorInnerAlertTriangle = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure}33`};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  border-radius: 12px;\n  min-width: 48px;\n  height: 48px;\n`\n\nexport function SwapCallbackError({ error }: { error: string }) {\n  return (\n    <SwapCallbackErrorInner>\n      <SwapCallbackErrorInnerAlertTriangle>\n        <ErrorIcon width=\"24px\" />\n      </SwapCallbackErrorInnerAlertTriangle>\n      <p>{error}</p>\n    </SwapCallbackErrorInner>\n  )\n}\n\nexport const SwapShowAcceptChanges = styled(AutoColumn)`\n  background-color: ${({ theme }) => `${theme.colors.warning}33`};\n  padding: 0.5rem;\n  border-radius: 12px;\n  margin-top: 8px;\n`\n","import { Percent } from '@pancakeswap/sdk'\nimport { warningSeverity } from 'utils/prices'\nimport { ONE_BIPS } from '../../../config/constants'\nimport { ErrorText } from './styleds'\n\n/**\n * Formatted version of price impact text with warning colors\n */\nexport default function FormattedPriceImpact({ priceImpact }: { priceImpact?: Percent }) {\n  return (\n    <ErrorText fontSize=\"14px\" severity={warningSeverity(priceImpact)}>\n      {priceImpact ? (priceImpact.lessThan(ONE_BIPS) ? '<0.01%' : `${priceImpact.toFixed(2)}%`) : '-'}\n    </ErrorText>\n  )\n}\n","import { useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Trade, TradeType } from '@pancakeswap/sdk'\nimport { Button, Text, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Field } from 'state/swap/actions'\nimport {\n  computeSlippageAdjustedAmounts,\n  computeTradePriceBreakdown,\n  formatExecutionPrice,\n  warningSeverity,\n} from 'utils/prices'\nimport { AutoColumn } from 'components/Layout/Column'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { AutoRow, RowBetween, RowFixed } from 'components/Layout/Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\n\nconst SwapModalFooterContainer = styled(AutoColumn)`\n  margin-top: 24px;\n  padding: 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport default function SwapModalFooter({\n  trade,\n  onConfirm,\n  allowedSlippage,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: Trade\n  allowedSlippage: number\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  disabledConfirm: boolean\n}) {\n  const { t } = useTranslation()\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const slippageAdjustedAmounts = useMemo(\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\n    [allowedSlippage, trade],\n  )\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n\n  return (\n    <>\n      <SwapModalFooterContainer>\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">{t('Price')}</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '10px',\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <AutoRenewIcon width=\"14px\" />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT ? t('Minimum received') : t('Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={t(\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n              )}\n              ml=\"4px\"\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Price Impact')}</Text>\n            <QuestionHelper\n              text={t('The difference between the market price and your price due to trade size.')}\n              ml=\"4px\"\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{t('Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={\n                <>\n                  <Text mb=\"12px\">{t('For each trade a %amount% fee is paid', { amount: '0.25%' })}</Text>\n                  <Text>- {t('%amount% to LP token holders', { amount: '0.17%' })}</Text>\n                  <Text>- {t('%amount% to the Treasury', { amount: '0.03%' })}</Text>\n                  <Text>- {t('%amount% towards CAKE buyback and burn', { amount: '0.05%' })}</Text>\n                </>\n              }\n              ml=\"4px\"\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </SwapModalFooterContainer>\n\n      <AutoRow>\n        <Button\n          variant={severity > 2 ? 'danger' : 'primary'}\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          mt=\"12px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {severity > 2 ? t('Swap Anyway') : t('Confirm Swap')}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n","import { useMemo } from 'react'\nimport { Trade, TradeType } from '@pancakeswap/sdk'\nimport { Button, Text, ErrorIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { Field } from 'state/swap/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport truncateHash from 'utils/truncateHash'\nimport { TruncatedText, SwapShowAcceptChanges } from './styleds'\n\nexport default function SwapModalHeader({\n  trade,\n  allowedSlippage,\n  recipient,\n  showAcceptChanges,\n  onAcceptChanges,\n}: {\n  trade: Trade\n  allowedSlippage: number\n  recipient: string | null\n  showAcceptChanges: boolean\n  onAcceptChanges: () => void\n}) {\n  const { t } = useTranslation()\n  const slippageAdjustedAmounts = useMemo(\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\n    [trade, allowedSlippage],\n  )\n  const { priceImpactWithoutFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  const amount =\n    trade.tradeType === TradeType.EXACT_INPUT\n      ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(6)\n      : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(6)\n  const symbol =\n    trade.tradeType === TradeType.EXACT_INPUT ? trade.outputAmount.currency.symbol : trade.inputAmount.currency.symbol\n\n  const tradeInfoText =\n    trade.tradeType === TradeType.EXACT_INPUT\n      ? t('Output is estimated. You will receive at least %amount% %symbol% or the transaction will revert.', {\n          amount,\n          symbol,\n        })\n      : t('Input is estimated. You will sell at most %amount% %symbol% or the transaction will revert.', {\n          amount,\n          symbol,\n        })\n\n  const [estimatedText, transactionRevertText] = tradeInfoText.split(`${amount} ${symbol}`)\n\n  const truncatedRecipient = recipient ? truncateHash(recipient) : ''\n\n  const recipientInfoText = t('Output will be sent to %recipient%', {\n    recipient: truncatedRecipient,\n  })\n\n  const [recipientSentToText, postSentToText] = recipientInfoText.split(truncatedRecipient)\n\n  return (\n    <AutoColumn gap=\"md\">\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"0px\">\n          <CurrencyLogo currency={trade.inputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\n          <TruncatedText\n            fontSize=\"24px\"\n            color={showAcceptChanges && trade.tradeType === TradeType.EXACT_OUTPUT ? 'primary' : 'text'}\n          >\n            {trade.inputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed gap=\"0px\">\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {trade.inputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <RowFixed>\n        <ArrowDownIcon width=\"16px\" ml=\"4px\" />\n      </RowFixed>\n      <RowBetween align=\"flex-end\">\n        <RowFixed gap=\"0px\">\n          <CurrencyLogo currency={trade.outputAmount.currency} size=\"24px\" style={{ marginRight: '12px' }} />\n          <TruncatedText\n            fontSize=\"24px\"\n            color={\n              priceImpactSeverity > 2\n                ? 'failure'\n                : showAcceptChanges && trade.tradeType === TradeType.EXACT_INPUT\n                ? 'primary'\n                : 'text'\n            }\n          >\n            {trade.outputAmount.toSignificant(6)}\n          </TruncatedText>\n        </RowFixed>\n        <RowFixed gap=\"0px\">\n          <Text fontSize=\"24px\" ml=\"10px\">\n            {trade.outputAmount.currency.symbol}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      {showAcceptChanges ? (\n        <SwapShowAcceptChanges justify=\"flex-start\" gap=\"0px\">\n          <RowBetween>\n            <RowFixed>\n              <ErrorIcon mr=\"8px\" />\n              <Text bold> {t('Price Updated')}</Text>\n            </RowFixed>\n            <Button onClick={onAcceptChanges}>{t('Accept')}</Button>\n          </RowBetween>\n        </SwapShowAcceptChanges>\n      ) : null}\n      <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '24px 0 0 0px' }}>\n        <Text small color=\"textSubtle\" textAlign=\"left\" style={{ width: '100%' }}>\n          {estimatedText}\n          <b>\n            {amount} {symbol}\n          </b>\n          {transactionRevertText}\n        </Text>\n      </AutoColumn>\n      {recipient !== null ? (\n        <AutoColumn justify=\"flex-start\" gap=\"sm\" style={{ padding: '12px 0 0 0px' }}>\n          <Text color=\"textSubtle\">\n            {recipientSentToText}\n            <b title={recipient}>{truncatedRecipient}</b>\n            {postSentToText}\n          </Text>\n        </AutoColumn>\n      ) : null}\n    </AutoColumn>\n  )\n}\n","import { useCallback, useMemo } from 'react'\nimport { currencyEquals, Trade } from '@pancakeswap/sdk'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from 'components/TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\ninterface ConfirmSwapModalProps {\n  trade?: Trade\n  originalTrade?: Trade\n  attemptingTxn: boolean\n  txHash?: string\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage?: string\n  customOnDismiss?: () => void\n}\n\nconst ConfirmSwapModal: React.FC<InjectedModalProps & ConfirmSwapModalProps> = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash,\n}) => {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade],\n  )\n\n  const { t } = useTranslation()\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        allowedSlippage={allowedSlippage}\n      />\n    ) : null\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n    amountA: trade?.inputAmount?.toSignificant(6) ?? '',\n    symbolA: trade?.inputAmount?.currency?.symbol ?? '',\n    amountB: trade?.outputAmount?.toSignificant(6) ?? '',\n    symbolB: trade?.outputAmount?.currency?.symbol ?? '',\n  })\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      title={t('Confirm Swap')}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n      currencyToAdd={trade?.outputAmount.currency}\n    />\n  )\n}\n\nexport default ConfirmSwapModal\n","import { useEffect, useState } from 'react'\n\n/**\n * Returns the last value of type T that passes a filter function\n * @param value changing value\n * @param filterFn function that determines whether a given value should be considered for the last value\n */\nfunction useLast<T>(\n  value: T | undefined | null,\n  filterFn?: (value: T | null | undefined) => boolean,\n): T | null | undefined {\n  const [last, setLast] = useState<T | null | undefined>(filterFn && filterFn(value) ? value : undefined)\n  useEffect(() => {\n    setLast((prev) => {\n      const shouldUse: boolean = filterFn ? filterFn(value) : true\n      if (shouldUse) return value\n      return prev\n    })\n  }, [filterFn, value])\n  return last\n}\n\nfunction isDefined<T>(x: T | null | undefined): x is T {\n  return x !== null && x !== undefined\n}\n\n/**\n * Returns the last truthy value of type T\n * @param value changing value\n */\nfunction useLastTruthy<T>(value: T | undefined | null): T | null | undefined {\n  return useLast(value, isDefined)\n}\n\nexport default useLastTruthy\n","import { Fragment, memo } from 'react'\nimport { Trade } from '@pancakeswap/sdk'\nimport { Text, Flex, ChevronRightIcon } from '@pancakeswap/uikit'\nimport { unwrappedToken } from 'utils/wrappedCurrency'\n\nexport default memo(function SwapRoute({ trade }: { trade: Trade }) {\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\" justifyContent=\"flex-end\" alignItems=\"center\">\n      {trade.route.path.map((token, i, path) => {\n        const isLastItem: boolean = i === path.length - 1\n        const currency = unwrappedToken(token)\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Fragment key={i}>\n            <Flex alignItems=\"end\">\n              <Text fontSize=\"14px\" ml=\"0.125rem\" mr=\"0.125rem\">\n                {currency.symbol}\n              </Text>\n            </Flex>\n            {!isLastItem && <ChevronRightIcon width=\"12px\" />}\n          </Fragment>\n        )\n      })}\n    </Flex>\n  )\n})\n","import { Trade, TradeType } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport { Field } from 'state/swap/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserSlippageTolerance } from 'state/user/hooks'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from 'utils/prices'\nimport { AutoColumn } from 'components/Layout/Column'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport SwapRoute from './SwapRoute'\n\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\n  const { t } = useTranslation()\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\n\n  return (\n    <AutoColumn style={{ padding: '0 16px' }}>\n      <RowBetween>\n        <RowFixed>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {isExactIn ? t('Minimum received') : t('Maximum sold')}\n          </Text>\n          <QuestionHelper\n            text={t(\n              'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.',\n            )}\n            ml=\"4px\"\n            placement=\"top-start\"\n          />\n        </RowFixed>\n        <RowFixed>\n          <Text fontSize=\"14px\">\n            {isExactIn\n              ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\n                '-'\n              : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ?? '-'}\n          </Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <RowFixed>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Price Impact')}\n          </Text>\n          <QuestionHelper\n            text={t('The difference between the market price and estimated price due to trade size.')}\n            ml=\"4px\"\n            placement=\"top-start\"\n          />\n        </RowFixed>\n        <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n      </RowBetween>\n\n      <RowBetween>\n        <RowFixed>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Liquidity Provider Fee')}\n          </Text>\n          <QuestionHelper\n            text={\n              <>\n                <Text mb=\"12px\">{t('For each trade a %amount% fee is paid', { amount: '0.25%' })}</Text>\n                <Text>- {t('%amount% to LP token holders', { amount: '0.17%' })}</Text>\n                <Text>- {t('%amount% to the Treasury', { amount: '0.03%' })}</Text>\n                <Text>- {t('%amount% towards CAKE buyback and burn', { amount: '0.05%' })}</Text>\n              </>\n            }\n            ml=\"4px\"\n            placement=\"top-start\"\n          />\n        </RowFixed>\n        <Text fontSize=\"14px\">\n          {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\n        </Text>\n      </RowBetween>\n    </AutoColumn>\n  )\n}\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: Trade\n}\n\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\n  const { t } = useTranslation()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\n\n  return (\n    <AutoColumn gap=\"0px\">\n      {trade && (\n        <>\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\n          {showRoute && (\n            <>\n              <RowBetween style={{ padding: '0 16px' }}>\n                <span style={{ display: 'flex', alignItems: 'center' }}>\n                  <Text fontSize=\"14px\" color=\"textSubtle\">\n                    {t('Route')}\n                  </Text>\n                  <QuestionHelper\n                    text={t('Routing through these tokens resulted in the best price for your trade.')}\n                    ml=\"4px\"\n                    placement=\"top-start\"\n                  />\n                </span>\n                <SwapRoute trade={trade} />\n              </RowBetween>\n            </>\n          )}\n        </>\n      )}\n    </AutoColumn>\n  )\n}\n","import styled from 'styled-components'\nimport useLastTruthy from 'hooks/useLast'\nimport { AdvancedSwapDetails, AdvancedSwapDetailsProps } from './AdvancedSwapDetails'\n\nconst AdvancedDetailsFooter = styled.div<{ show: boolean }>`\n  margin-top: ${({ show }) => (show ? '16px' : 0)};\n  padding-top: 16px;\n  padding-bottom: 16px;\n  width: 100%;\n  max-width: 400px;\n  border-radius: 20px;\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\n  transition: transform 300ms ease-in-out;\n`\n\nexport default function AdvancedSwapDetailsDropdown({ trade, ...rest }: AdvancedSwapDetailsProps) {\n  const lastTrade = useLastTruthy(trade)\n\n  return (\n    <AdvancedDetailsFooter show={Boolean(trade)}>\n      <AdvancedSwapDetails {...rest} trade={trade ?? lastTrade ?? undefined} />\n    </AdvancedDetailsFooter>\n  )\n}\n","import { Price } from '@pancakeswap/sdk'\nimport { Text, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { StyledBalanceMaxMini } from './styleds'\n\ninterface TradePriceProps {\n  price?: Price\n  showInverted: boolean\n  setShowInverted: (showInverted: boolean) => void\n}\n\nexport default function TradePrice({ price, showInverted, setShowInverted }: TradePriceProps) {\n  const formattedPrice = showInverted ? price?.toSignificant(6) : price?.invert()?.toSignificant(6)\n\n  const show = Boolean(price?.baseCurrency && price?.quoteCurrency)\n  const label = showInverted\n    ? `${price?.quoteCurrency?.symbol} per ${price?.baseCurrency?.symbol}`\n    : `${price?.baseCurrency?.symbol} per ${price?.quoteCurrency?.symbol}`\n\n  return (\n    <Text style={{ justifyContent: 'center', alignItems: 'center', display: 'flex' }}>\n      {show ? (\n        <>\n          {formattedPrice ?? '-'} {label}\n          <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n            <AutoRenewIcon width=\"14px\" />\n          </StyledBalanceMaxMini>\n        </>\n      ) : (\n        '-'\n      )}\n    </Text>\n  )\n}\n","import { Token } from '@pancakeswap/sdk'\nimport { Modal, InjectedModalProps } from '@pancakeswap/uikit'\nimport ImportToken from 'components/SearchModal/ImportToken'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props extends InjectedModalProps {\n  tokens: Token[]\n  onCancel: () => void\n}\n\nconst ImportTokenWarningModal: React.FC<Props> = ({ tokens, onDismiss, onCancel }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal\n      title={t('Import Token')}\n      onDismiss={() => {\n        onDismiss?.()\n        onCancel()\n      }}\n      style={{ maxWidth: '420px' }}\n    >\n      <ImportToken tokens={tokens} handleCurrencySelect={onDismiss} />\n    </Modal>\n  )\n}\n\nexport default ImportTokenWarningModal\n","import styled from 'styled-components'\nimport { RowBetween } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\n\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`\n\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({ theme, confirmed, disabled }) =>\n    disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\n  border-radius: 50%;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n`\n\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`\n\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\n  width: 100%;\n  height: 2px;\n  background: linear-gradient(\n    90deg,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled ? theme.colors.backgroundDisabled : prevConfirmed ? theme.colors.success : theme.colors.primary}\n      0%,\n    ${({ theme, prevConfirmed, disabled }) =>\n        disabled\n          ? theme.colors.backgroundDisabled\n          : prevConfirmed\n          ? theme.colors.primary\n          : theme.colors.backgroundDisabled}\n      80%\n  );\n  opacity: 0.6;\n`\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  return (\n    <AutoColumn justify=\"center\" {...rest}>\n      <Grouping>\n        {steps.map((step, i) => {\n          return (\n            // eslint-disable-next-line react/no-array-index-key\n            <CircleRow key={i}>\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\n                {step ? '✓' : i + 1}\n              </Circle>\n              <Connector prevConfirmed={step} disabled={disabled} />\n            </CircleRow>\n          )\n        })}\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\n      </Grouping>\n    </AutoColumn>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\n\nconst StyledNav = styled.div`\n  margin-bottom: 40px;\n`\n\nfunction Nav({ activeIndex = 0 }: { activeIndex?: number }) {\n  //   const TranslateString = useI18n()\n  return (\n    <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n      <ButtonMenuItem id=\"swap-nav-link\">Swap</ButtonMenuItem>\n      <ButtonMenuItem id=\"pool-nav-link\">Liquidity</ButtonMenuItem>\n      <ButtonMenuItem\n        id=\"pool-nav-link\"\n        as=\"a\"\n        href=\"https://www.binance.org/en/bridge?utm_source=PancakeSwap\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        Bridge\n      </ButtonMenuItem>\n    </ButtonMenu>\n  )\n}\n\nexport default Nav\n","import { TxMiningIcon, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst RoundBox = styled.div<{ isMobile }>`\n  font-size: 14px;\n  width: fit-content;\n  border-radius: 35px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  justify-content: space-between;\n  border-radius: 35px;\n  font-weight: 800;\n  border: 2px solid transparent;\n  background-image: ${({ theme }) =>\n      theme.isDark ? 'linear-gradient(#3E3D5B,#3E3D5B)' : 'linear-gradient(#B3D2F5,#B3D2F5)'},\n    linear-gradient(90deg, #ffffff 1.47%, #007be4 100%);\n  background-origin: border-box;\n\n  background-clip: padding-box, border-box;\n\n  padding: 6px 16px;\n  box-sizing: border-box;\n  margin: 16px 0;\n  width: ${({ isMobile }) => (isMobile ? '328px' : '400px')};\n`\n\nconst Intro = styled.div`\n  text-align: left;\n  line-height: 1.2;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const TxMining = ({ isMobile }: { isMobile?: boolean }) => {\n  return (\n    <Wrapper>\n      <RoundBox isMobile={isMobile} style={{ borderRadius: !isMobile ? '35px' : '15px' }}>\n        <Intro>\n          Trade Mining {isMobile && <br />}\n          Reward 0.0024 MDAO\n        </Intro>\n        <IconButton style={{ width: 'unset', borderRadius: 35, padding: '12px 16px', fontSize: 14, height: 'unset' }}>\n          <span>Withdraw</span>\n          {/* <TxMiningIcon color=\"invertedContrast\" /> */}\n        </IconButton>\n      </RoundBox>\n      {/* {!isMobile && <Intro>{'Try Smart Router for a better Slippage ->'}</Intro>} */}\n    </Wrapper>\n  )\n}\n","/**\n * Returns true if the string value is zero in hex\n * @param hexNumberString\n */\nexport default function isZero(hexNumberString: string) {\n  return /^0x0*$/.test(hexNumberString)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { SwapParameters, Trade } from '@pancakeswap/sdk'\nimport { TranslateFunction, useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { useGasPrice } from 'state/user/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useSwapCallArguments } from './useSwapCallArguments'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall extends SwapCallEstimate {\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  error: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddress)\n\n  const { t } = useTranslation()\n\n  const addTransaction = useTransactionAdder()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddress !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: t('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n\n                    return { call, error: swapErrorToUserReadableMessage(callError, t) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw new Error(errorCalls[errorCalls.length - 1].error)\n          throw new Error(t('Unexpected error. Could not estimate gas for the swap.'))\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddress && isAddress(recipientAddress) ? truncateHash(recipientAddress) : recipientAddress\n                  }`\n\n            addTransaction(response, {\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(t('Swap failed: %message%', { message: swapErrorToUserReadableMessage(error, t) }))\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddress, swapCalls, gasPrice, t, addTransaction])\n}\n\n/**\n * This is hacking out the revert reason from the ethers provider thrown error however it can.\n * This object seems to be undocumented by ethers.\n * @param error an error from the ethers provider\n */\nfunction swapErrorToUserReadableMessage(error: any, t: TranslateFunction) {\n  let reason: string | undefined\n  while (error) {\n    reason = error.reason ?? error.data?.message ?? error.message ?? reason\n    // eslint-disable-next-line no-param-reassign\n    error = error.error ?? error.data?.originalError\n  }\n\n  if (reason?.indexOf('execution reverted: ') === 0) reason = reason.substring('execution reverted: '.length)\n\n  switch (reason) {\n    case 'PancakeRouter: EXPIRED':\n      return t(\n        'The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.',\n      )\n    case 'PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n    case 'PancakeRouter: EXCESSIVE_INPUT_AMOUNT':\n      return t(\n        'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.',\n      )\n    case 'TransferHelper: TRANSFER_FROM_FAILED':\n      return t('The input token cannot be transferred. There may be an issue with the input token.')\n    case 'Pancake: TRANSFER_FAILED':\n      return t('The output token cannot be transferred. There may be an issue with the output token.')\n    default:\n      if (reason?.indexOf('undefined is not an object') !== -1) {\n        console.error(error, reason)\n        return t(\n          'An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading.',\n        )\n      }\n      return t('Unknown error%reason%. Try increasing your slippage tolerance.', {\n        reason: reason ? `: \"${reason}\"` : '',\n      })\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pancakeswap/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\nimport { getRouterContract } from '../utils'\nimport useTransactionDeadline from './useTransactionDeadline'\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nexport function useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddress: string | null, // the address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const recipient = recipientAddress === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    const contract = getRouterContract(chainId, library, account)\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    swapMethods.push(\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber(),\n      }),\n    )\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\n}\n","import { Currency, currencyEquals, ETHER, WETH } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport tryParseAmount from 'utils/tryParseAmount'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useWBNBContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined,\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { t } = useTranslation()\n  const { chainId, account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const wbnbContract = useWBNBContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wbnbContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wbnbContract, 'deposit', undefined, {\n                    value: `0x${inputAmount.raw.toString(16)}`,\n                  })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : t('Insufficient BNB balance'),\n      }\n    }\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wbnbContract, 'withdraw', [\n                    `0x${inputAmount.raw.toString(16)}`,\n                  ])\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : t('Insufficient WBNB balance'),\n      }\n    }\n    return NOT_APPLICABLE\n  }, [wbnbContract, chainId, inputCurrency, outputCurrency, t, inputAmount, balance, addTransaction, callWithGasPrice])\n}\n","import { useTranslation } from 'contexts/Localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst SafemoonWarning = () => {\n  const { t } = useTranslation()\n\n  // Break translation sentences into pieces because the current translation approach doesn't support Link interpolation.\n  return (\n    <>\n      <Text>\n        {t('SAFEMOON has been migrated to')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          external\n          href=\"https://bscscan.com/address/0x42981d0bfbAf196529376EE702F2a9Eb9092fcB5\"\n        >\n          {t('a new contract address.')}\n        </Link>{' '}\n        {t(\n          'Trading on the old address may result in the complete loss of your assets. For more information please refer to',\n        )}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://twitter.com/safemoon/status/1477770592031887360\">\n          {t(\"Safemoon's announcement\")}.\n        </Link>\n      </Text>\n    </>\n  )\n}\n\nexport default SafemoonWarning\n","import { useTranslation } from 'contexts/Localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst ItamWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t('ITAM has been rebranded as ITAM CUBE.')}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://itam.network/swap\">\n          {t('Please proceed to ITAM bridge to conduct a one-way swap of your ITAM tokens.')}\n        </Link>{' '}\n        {t('All transfers of the old ITAM token will be disabled after the swap.')}\n      </Text>\n    </>\n  )\n}\n\nexport default ItamWarning\n","import { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst BondlyWarning = () => {\n  const { t } = useTranslation()\n\n  return <Text>{t('Warning: BONDLY has been compromised. Please remove liquidity until further notice.')}</Text>\n}\n\nexport default BondlyWarning\n","import { useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Flex, Checkbox, Button } from '@pancakeswap/uikit'\n\ninterface AcknowledgementProps {\n  handleContinueClick: () => void\n}\n\nconst Acknowledgement: React.FC<AcknowledgementProps> = ({ handleContinueClick }) => {\n  const { t } = useTranslation()\n  const [isConfirmed, setIsConfirmed] = useState(false)\n\n  return (\n    <>\n      <Flex justifyContent=\"space-between\">\n        <Flex alignItems=\"center\">\n          <Checkbox\n            name=\"confirmed\"\n            type=\"checkbox\"\n            checked={isConfirmed}\n            onChange={() => setIsConfirmed(!isConfirmed)}\n            scale=\"sm\"\n          />\n          <Text ml=\"10px\" style={{ userSelect: 'none' }}>\n            {t('I understand')}\n          </Text>\n        </Flex>\n\n        <Button disabled={!isConfirmed} onClick={handleContinueClick}>\n          {t('Continue')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default Acknowledgement\n","import { useTranslation } from 'contexts/Localization'\nimport { Text, Link } from '@pancakeswap/uikit'\n\nconst CcarWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t('Crypto Cars (CCAR) has been migrated to')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          external\n          href=\"https://bscscan.com/token/0x322e5015Cc464Ada7f99dE7131CE494dE1834396\"\n        >\n          {t('a new contract address.')}\n        </Link>{' '}\n        {t(\n          'Trading on the old address may result in the complete loss of your assets. For more information please refer to',\n        )}{' '}\n        <Link style={{ display: 'inline' }} external href=\"https://t.me/Crypto_Cars_Official/465037\">\n          {t('the announcement.')}\n        </Link>\n      </Text>\n    </>\n  )\n}\n\nexport default CcarWarning\n","import { useTranslation } from 'contexts/Localization'\nimport { Text, Link, LinkExternal } from '@pancakeswap/uikit'\n\nconst BTTWarning = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text>\n        {t(\n          'Please note that this is the old BTT token, which has been swapped to the new BTT tokens in the following ratio:',\n        )}\n      </Text>\n      <Text>1 BTT (OLD) = 1,000 BTT (NEW)</Text>\n      <Text mb=\"8px\">\n        {t('Trade the new BTT token')}{' '}\n        <Link\n          style={{ display: 'inline' }}\n          href=\"https://pancakeswap.finance/swap?outputCurrency=0x352Cb5E19b12FC216548a2677bD0fce83BaE434B\"\n        >\n          {t('here')}\n        </Link>\n      </Text>\n      <LinkExternal href=\"https://medium.com/@BitTorrent/tutorial-how-to-swap-bttold-to-btt-453264d7142\">\n        {t('For more details on the swap, please refer here.')}\n      </LinkExternal>\n    </>\n  )\n}\n\nexport default BTTWarning\n","import { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ModalBody, ModalContainer, Message, ModalHeader, Box, Heading } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport { WrappedTokenInfo } from 'state/types'\nimport SwapWarningTokensConfig from 'config/constants/swapWarningTokens'\nimport SafemoonWarning from './SafemoonWarning'\nimport ItamWarning from './ItamWarning'\nimport BondlyWarning from './BondlyWarning'\nimport Acknowledgement from './Acknowledgement'\nimport CcarWarning from './CcarWarning'\nimport BTTWarning from './BTTWarning'\n\nconst StyledModalContainer = styled(ModalContainer)`\n  max-width: 440px;\n`\n\nconst MessageContainer = styled(Message)`\n  align-items: flex-start;\n  justify-content: flex-start;\n`\n\ninterface SwapWarningModalProps {\n  swapCurrency: WrappedTokenInfo\n  onDismiss?: () => void\n}\n\n// Modal is fired by a useEffect and doesn't respond to closeOnOverlayClick prop being set to false\nconst usePreventModalOverlayClick = () => {\n  useEffect(() => {\n    const preventClickHandler = (e) => {\n      e.stopPropagation()\n      e.preventDefault()\n      return false\n    }\n\n    document.querySelectorAll('[role=\"presentation\"]').forEach((el) => {\n      el.addEventListener('click', preventClickHandler, true)\n    })\n\n    return () => {\n      document.querySelectorAll('[role=\"presentation\"]').forEach((el) => {\n        el.removeEventListener('click', preventClickHandler, true)\n      })\n    }\n  }, [])\n}\n\nconst SwapWarningModal: React.FC<SwapWarningModalProps> = ({ swapCurrency, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  usePreventModalOverlayClick()\n\n  const TOKEN_WARNINGS = {\n    [SwapWarningTokensConfig.safemoon.address]: {\n      symbol: SwapWarningTokensConfig.safemoon.symbol,\n      component: <SafemoonWarning />,\n    },\n    [SwapWarningTokensConfig.bondly.address]: {\n      symbol: SwapWarningTokensConfig.bondly.symbol,\n      component: <BondlyWarning />,\n    },\n    [SwapWarningTokensConfig.itam.address]: {\n      symbol: SwapWarningTokensConfig.itam.symbol,\n      component: <ItamWarning />,\n    },\n    [SwapWarningTokensConfig.ccar.address]: {\n      symbol: SwapWarningTokensConfig.ccar.symbol,\n      component: <CcarWarning />,\n    },\n    [SwapWarningTokensConfig.bttold.address]: {\n      symbol: SwapWarningTokensConfig.bttold.symbol,\n      component: <BTTWarning />,\n    },\n  }\n\n  const SWAP_WARNING = TOKEN_WARNINGS[swapCurrency.address]\n\n  return (\n    <StyledModalContainer minWidth=\"280px\">\n      <ModalHeader background={theme.colors.gradients.cardHeader}>\n        <Heading p=\"12px 24px\">{t('Notice for trading %symbol%', { symbol: SWAP_WARNING.symbol })}</Heading>\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <MessageContainer variant=\"warning\" mb=\"24px\">\n          <Box>{SWAP_WARNING.component}</Box>\n        </MessageContainer>\n        <Acknowledgement handleContinueClick={onDismiss} />\n      </ModalBody>\n    </StyledModalContainer>\n  )\n}\n\nexport default SwapWarningModal\n","import { Box, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledSwapContainer = styled(Flex)<{ $isChartExpanded: boolean }>`\n  flex-shrink: 0;\n  height: fit-content;\n  padding: 0 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0 40px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    ${({ $isChartExpanded }) => ($isChartExpanded ? 'padding: 0 120px' : 'padding: 0 40px')};\n  }\n`\n\nexport const StyledInputCurrencyWrapper = styled(Box)`\n  width: 328px;\n`\n","import styled from 'styled-components'\nimport { Flex, Heading, HistoryIcon, IconButton, NotificationDot, Text, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from 'components/App/Transactions/TransactionsModal'\nimport GlobalSettings from 'components/Menu/GlobalSettings'\nimport { useExpertModeManager } from 'state/user/hooks'\nimport RefreshIcon from 'components/Svg/RefreshIcon'\n\ninterface Props {\n  title: string\n  subtitle: string\n  noConfig?: boolean\n  setIsChartDisplayed?: React.Dispatch<React.SetStateAction<boolean>>\n  isChartDisplayed?: boolean\n  hasAmount: boolean\n  onRefreshPrice: () => void\n}\n\nconst CurrencyInputContainer = styled(Flex)`\n  flex-direction: column;\n  align-items: center;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst CurrencyInputHeader: React.FC<Props> = ({ title, subtitle, hasAmount, onRefreshPrice }) => {\n  const [expertMode] = useExpertModeManager()\n\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n\n  return (\n    <CurrencyInputContainer>\n      <Flex width=\"100%\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" alignItems=\"flex-start\" width=\"100%\" mr={18}>\n          <Heading as=\"h2\">{title}</Heading>\n        </Flex>\n        <Flex>\n          <NotificationDot show={expertMode}>\n            <GlobalSettings color=\"textSubtle\" mr=\"0\" />\n          </NotificationDot>\n          <IconButton onClick={onPresentTransactionsModal} variant=\"text\" scale=\"sm\">\n            <HistoryIcon color=\"textSubtle\" width=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n      <Flex style={{ placeSelf: 'baseline' }}>\n        <Text color=\"textSubtle\" fontSize=\"14px\">\n          {subtitle}\n        </Text>\n      </Flex>\n    </CurrencyInputContainer>\n  )\n}\n\nexport default CurrencyInputHeader\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { CurrencyAmount, JSBI, Token, Trade } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ArrowDownIcon,\n  Box,\n  useModal,\n  Flex,\n  IconButton,\n  useMatchBreakpoints,\n  ArrowUpDownIcon,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport { useRouter } from 'next/router'\nimport { useTranslation } from 'contexts/Localization'\nimport { EXCHANGE_DOCS_URLS } from 'config/constants'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\nimport shouldShowSwapWarning from 'utils/shouldShowSwapWarning'\nimport useRefreshBlockNumberID from './hooks/useRefreshBlockNumber'\nimport AddressInputPanel from './components/AddressInputPanel'\nimport { GreyCard } from '../../components/Card'\nimport Column, { AutoColumn } from '../../components/Layout/Column'\nimport ConfirmSwapModal from './components/ConfirmSwapModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { AutoRow, RowBetween } from '../../components/Layout/Row'\nimport AdvancedSwapDetailsDropdown from './components/AdvancedSwapDetailsDropdown'\nimport confirmPriceImpactWithoutFee from './components/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, SwapCallbackError, Wrapper } from './components/styleds'\nimport TradePrice from './components/TradePrice'\nimport ImportTokenWarningModal from './components/ImportTokenWarningModal'\nimport ProgressSteps from './components/ProgressSteps'\nimport { AppBody } from '../../components/App'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\nimport CardNav from '../../components/CardNav'\nimport {TxMining} from '../../components/TxMining'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n  useSingleTokenSwapInfo,\n} from '../../state/swap/hooks'\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n  useExchangeChartManager,\n} from '../../state/user/hooks'\nimport CircleLoader from '../../components/Loader/CircleLoader'\nimport Page from '../Page'\nimport SwapWarningModal from './components/SwapWarningModal'\nimport PriceChartContainer from './components/Chart/PriceChartContainer'\nimport { StyledInputCurrencyWrapper, StyledSwapContainer } from './styles'\nimport CurrencyInputHeader from './components/CurrencyInputHeader'\n\nconst Label = styled(Text)`\n  font-size: 12px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nconst SwitchIconButton = styled(IconButton)`\n  box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.1);\n  .icon-up-down {\n    display: none;\n  }\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.primary};\n    .icon-down {\n      display: none;\n      fill: white;\n    }\n    .icon-up-down {\n      display: block;\n      fill: white;\n    }\n  }\n`\nconst BackgroundWrapper = styled(Page)`\n  background-image: ${({ theme }) => (theme.isDark ? `url('/images/bg/dark.png')` : `url('/images/bg/light.png')`)};\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n`\n\nexport default function Swap() {\n  const router = useRouter()\n  const loadedUrlParams = useDefaultsFromURLSearch()\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const [isChartExpanded, setIsChartExpanded] = useState(false)\n  const [userChartPreference, setUserChartPreference] = useExchangeChartManager(isMobile)\n  const [isChartDisplayed, setIsChartDisplayed] = useState(userChartPreference)\n  const { refreshBlockNumber, isLoading } = useRefreshBlockNumberID()\n\n  useEffect(() => {\n    setUserChartPreference(isChartDisplayed)\n  }, [isChartDisplayed, setUserChartPreference])\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency],\n  )\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !(token.address in defaultTokens)\n    })\n\n  const { account } = useActiveWeb3React()\n\n  // for expert mode\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state & price data\n  const {\n    independentField,\n    typedValue,\n    recipient,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n  } = useSwapState()\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo(independentField, typedValue, inputCurrency, outputCurrency, recipient)\n\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const trade = showWrap ? undefined : v2Trade\n\n  const singleTokenPrice = useSingleTokenSwapInfo(inputCurrencyId, inputCurrency, outputCurrencyId, outputCurrency)\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput],\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput],\n  )\n\n  // modal and loading\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee, t)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, t])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\n  }, [attemptingTxn, swapErrorMessage, trade, txHash])\n\n  // swap warning state\n  const [swapWarningCurrency, setSwapWarningCurrency] = useState(null)\n  const [onPresentSwapWarningModal] = useModal(<SwapWarningModal swapCurrency={swapWarningCurrency} />)\n\n  useEffect(() => {\n    if (swapWarningCurrency) {\n      onPresentSwapWarningModal()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [swapWarningCurrency])\n\n  const handleInputSelect = useCallback(\n    (currencyInput) => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, currencyInput)\n      const showSwapWarning = shouldShowSwapWarning(currencyInput)\n      if (showSwapWarning) {\n        setSwapWarningCurrency(currencyInput)\n      } else {\n        setSwapWarningCurrency(null)\n      }\n    },\n    [onCurrencySelection],\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (currencyOutput) => {\n      onCurrencySelection(Field.OUTPUT, currencyOutput)\n      const showSwapWarning = shouldShowSwapWarning(currencyOutput)\n      if (showSwapWarning) {\n        setSwapWarningCurrency(currencyOutput)\n      } else {\n        setSwapWarningCurrency(null)\n      }\n    },\n\n    [onCurrencySelection],\n  )\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  const [onPresentImportTokenWarningModal] = useModal(\n    <ImportTokenWarningModal tokens={importTokensNotInDefault} onCancel={() => router.push('/swap')} />,\n  )\n\n  useEffect(() => {\n    if (importTokensNotInDefault.length > 0) {\n      onPresentImportTokenWarningModal()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [importTokensNotInDefault.length])\n\n  const [onPresentConfirmModal] = useModal(\n    <ConfirmSwapModal\n      trade={trade}\n      originalTrade={tradeToConfirm}\n      onAcceptChanges={handleAcceptChanges}\n      attemptingTxn={attemptingTxn}\n      txHash={txHash}\n      recipient={recipient}\n      allowedSlippage={allowedSlippage}\n      onConfirm={handleSwap}\n      swapErrorMessage={swapErrorMessage}\n      customOnDismiss={handleConfirmDismiss}\n    />,\n    true,\n    true,\n    'confirmSwapModal',\n  )\n\n  const hasAmount = Boolean(parsedAmount)\n\n  const onRefreshPrice = useCallback(() => {\n    if (hasAmount) {\n      refreshBlockNumber()\n    }\n  }, [hasAmount, refreshBlockNumber])\n\n  return (\n    <BackgroundWrapper removePadding={isChartExpanded} hideFooterOnDesktop={isChartExpanded}>\n      <CardNav />\n      <TxMining isMobile={isMobile}/>\n      <Flex width=\"100%\" justifyContent=\"center\" position=\"relative\">\n        <Flex flexDirection=\"column\">\n          <StyledSwapContainer $isChartExpanded={isChartExpanded}>\n            <StyledInputCurrencyWrapper style={{ width: !isMobile && '400px' }} mt={isChartExpanded ? '24px' : '0'}>\n              <AppBody>\n                <CurrencyInputHeader\n                  title={t('Swap')}\n                  subtitle={t('Trade tokens in an instant')}\n                  setIsChartDisplayed={setIsChartDisplayed}\n                  isChartDisplayed={isChartDisplayed}\n                  hasAmount={hasAmount}\n                  onRefreshPrice={onRefreshPrice}\n                />\n                <Wrapper id=\"swap-page\" style={{ minHeight: '412px' }}>\n                  <AutoColumn gap=\"sm\">\n                    <CurrencyInputPanel\n                      label={\n                        independentField === Field.OUTPUT && !showWrap && trade ? t('From (estimated)') : t('From')\n                      }\n                      value={formattedAmounts[Field.INPUT]}\n                      showMaxButton={!atMaxAmountInput}\n                      currency={currencies[Field.INPUT]}\n                      onUserInput={handleTypeInput}\n                      onMax={handleMaxInput}\n                      onCurrencySelect={handleInputSelect}\n                      otherCurrency={currencies[Field.OUTPUT]}\n                      id=\"swap-currency-input\"\n                    />\n\n                    <AutoColumn justify=\"space-between\">\n                      <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                        <SwitchIconButton\n                          variant=\"light\"\n                          scale=\"sm\"\n                          onClick={() => {\n                            setApprovalSubmitted(false) // reset 2 step UI for approvals\n                            onSwitchTokens()\n                          }}\n                        >\n                          <ArrowDownIcon\n                            className=\"icon-down\"\n                            color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\n                          />\n                          <ArrowUpDownIcon\n                            className=\"icon-up-down\"\n                            color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\n                          />\n                        </SwitchIconButton>\n                        {recipient === null && !showWrap && isExpertMode ? (\n                          <Button variant=\"text\" id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                            {t('+ Add a send (optional)')}\n                          </Button>\n                        ) : null}\n                      </AutoRow>\n                    </AutoColumn>\n                    <CurrencyInputPanel\n                      value={formattedAmounts[Field.OUTPUT]}\n                      onUserInput={handleTypeOutput}\n                      label={independentField === Field.INPUT && !showWrap && trade ? t('To (estimated)') : t('To')}\n                      showMaxButton={false}\n                      currency={currencies[Field.OUTPUT]}\n                      onCurrencySelect={handleOutputSelect}\n                      otherCurrency={currencies[Field.INPUT]}\n                      id=\"swap-currency-output\"\n                    />\n\n                    {isExpertMode && recipient !== null && !showWrap ? (\n                      <>\n                        <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                          <ArrowWrapper clickable={false}>\n                            <ArrowDownIcon width=\"16px\" />\n                          </ArrowWrapper>\n                          <Button variant=\"text\" id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                            {t('- Remove send')}\n                          </Button>\n                        </AutoRow>\n                        <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n                      </>\n                    ) : null}\n\n                    {showWrap ? null : (\n                      <AutoColumn gap=\"7px\" style={{ padding: '0 16px' }}>\n                        <RowBetween align=\"center\">\n                          {Boolean(trade) && (\n                            <>\n                              <Label>{t('Price')}</Label>\n                              {isLoading ? (\n                                <Skeleton width=\"100%\" ml=\"8px\" height=\"24px\" />\n                              ) : (\n                                <TradePrice\n                                  price={trade?.executionPrice}\n                                  showInverted={showInverted}\n                                  setShowInverted={setShowInverted}\n                                />\n                              )}\n                            </>\n                          )}\n                        </RowBetween>\n                        <RowBetween align=\"center\">\n                          <Label>{t('Slippage Tolerance')}</Label>\n                          <Text bold color=\"primary\">\n                            {allowedSlippage / 100}%\n                          </Text>\n                        </RowBetween>\n                      </AutoColumn>\n                    )}\n                  </AutoColumn>\n                  <Box mt=\"0.25rem\">\n                    {swapIsUnsupported ? (\n                      <Button width=\"100%\" disabled>\n                        {t('Unsupported Asset')}\n                      </Button>\n                    ) : !account ? (\n                      <ConnectWalletButton width=\"100%\" />\n                    ) : showWrap ? (\n                      <Button width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                        {wrapInputError ??\n                          (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n                      </Button>\n                    ) : noRoute && userHasSpecifiedInputOutput ? (\n                      <GreyCard style={{ textAlign: 'center', padding: '0.75rem' }}>\n                        <Text color=\"textSubtle\">{t('Insufficient liquidity for this trade.')}</Text>\n                        {singleHopOnly && <Text color=\"textSubtle\">{t('Try enabling multi-hop trades.')}</Text>}\n                      </GreyCard>\n                    ) : showApproveFlow ? (\n                      <RowBetween>\n                        <Button\n                          variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\n                          onClick={approveCallback}\n                          disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                          width=\"48%\"\n                        >\n                          {approval === ApprovalState.PENDING ? (\n                            <AutoRow gap=\"6px\" justify=\"center\">\n                              {t('Enabling')} <CircleLoader stroke=\"white\" />\n                            </AutoRow>\n                          ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                            t('Enabled')\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\n                          )}\n                        </Button>\n                        <Button\n                          variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\n                          onClick={() => {\n                            if (isExpertMode) {\n                              handleSwap()\n                            } else {\n                              setSwapState({\n                                tradeToConfirm: trade,\n                                attemptingTxn: false,\n                                swapErrorMessage: undefined,\n                                txHash: undefined,\n                              })\n                              onPresentConfirmModal()\n                            }\n                          }}\n                          width=\"48%\"\n                          id=\"swap-button\"\n                          disabled={\n                            !isValid ||\n                            approval !== ApprovalState.APPROVED ||\n                            (priceImpactSeverity > 3 && !isExpertMode)\n                          }\n                        >\n                          {priceImpactSeverity > 3 && !isExpertMode\n                            ? t('Price Impact High')\n                            : priceImpactSeverity > 2\n                            ? t('Swap Anyway')\n                            : t('Swap')}\n                        </Button>\n                      </RowBetween>\n                    ) : (\n                      <Button\n                        variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\n                        onClick={() => {\n                          if (isExpertMode) {\n                            handleSwap()\n                          } else {\n                            setSwapState({\n                              tradeToConfirm: trade,\n                              attemptingTxn: false,\n                              swapErrorMessage: undefined,\n                              txHash: undefined,\n                            })\n                            onPresentConfirmModal()\n                          }\n                        }}\n                        id=\"swap-button\"\n                        width=\"100%\"\n                        disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                      >\n                        {swapInputError ||\n                          (priceImpactSeverity > 3 && !isExpertMode\n                            ? t('Price Impact Too High')\n                            : priceImpactSeverity > 2\n                            ? t('Swap Anyway')\n                            : t('Swap'))}\n                      </Button>\n                    )}\n                    {showApproveFlow && (\n                      <Column style={{ marginTop: '1rem' }}>\n                        <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n                      </Column>\n                    )}\n                    {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n                  </Box>\n                </Wrapper>\n              </AppBody>\n              {!swapIsUnsupported ? (\n                trade && <AdvancedSwapDetailsDropdown trade={trade} />\n              ) : (\n                <UnsupportedCurrencyFooter currencies={[currencies.INPUT, currencies.OUTPUT]} />\n              )}\n            </StyledInputCurrencyWrapper>\n          </StyledSwapContainer>\n        </Flex>\n      </Flex>\n    </BackgroundWrapper>\n  )\n}\n","import { Percent } from '@pancakeswap/sdk'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { ALLOWED_PRICE_IMPACT_HIGH, PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN } from '../../../config/constants'\n\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n * @param t Translation\n */\nexport default function confirmPriceImpactWithoutFee(priceImpactWithoutFee: Percent, t: ContextApi['t']): boolean {\n  if (!priceImpactWithoutFee.lessThan(PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\n    const confirmWord = 'confirm'\n    return (\n      // eslint-disable-next-line no-alert\n      window.prompt(\n        t(\n          'This swap has a price impact of at least %amount%%. Please type the word \"%word%\" to continue with this swap.',\n          {\n            amount: PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(0),\n            word: confirmWord,\n          },\n        ),\n      ) === confirmWord\n    )\n  }\n  if (!priceImpactWithoutFee.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\n    // eslint-disable-next-line no-alert\n    return window.confirm(\n      t(\n        'This swap has a price impact of at least %amount%%. Please confirm that you would like to continue with this swap.',\n        {\n          amount: ALLOWED_PRICE_IMPACT_HIGH.toFixed(0),\n        },\n      ),\n    )\n  }\n  return true\n}\n"],"names":["props","Svg","viewBox","path","d","DetailsFooter","styled","theme","colors","text","invertedContrast","UnsupportedModal","currencies","onDismiss","useActiveWeb3React","chainId","useTranslation","t","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","Modal","title","maxWidth","AutoColumn","gap","token","Object","keys","includes","address","AutoRow","align","CurrencyLogo","size","Text","symbol","Link","external","small","color","href","getBscScanLink","concat","UnsupportedCurrencyFooter","onPresentModal","useModal","Button","variant","onClick","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","useSingleCallResult","multicall","useMulticallContract","result","useCurrentBlockTimestamp","useMemo","add","maxAmountSpend","currencyAmount","ETHER","JSBI","raw","MIN_BNB","CurrencyAmount","bondly","safemoon","itam","ccar","bttold","swapWarningTokens","values","SwapWarningTokens","swapCurrency","some","warningToken","useState","refreshBlockNumber","useCallback","isLoading","setFetch","useSWRConfig","mutate","useEffect","setTimeout","InputPanel","backgroundAlt","ContainerRow","error","failure","background","InputContainer","Input","primary","textDisabled","AddressInputPanel","id","value","onChange","isAddress","undefined","handleInput","event","withoutSpaces","target","replace","Boolean","length","RowBetween","className","type","autoComplete","autoCorrect","autoCapitalize","spellCheck","placeholder","pattern","Wrapper","Flex","ArrowWrapper","clickable","css","ErrorText","severity","warning","success","StyledBalanceMaxMini","dropdown","TruncatedText","attrs","ellipsis","SwapCallbackErrorInner","SwapCallbackErrorInnerAlertTriangle","SwapCallbackError","ErrorIcon","width","p","SwapShowAcceptChanges","FormattedPriceImpact","priceImpact","fontSize","warningSeverity","lessThan","ONE_BIPS","toFixed","SwapModalFooterContainer","radii","default","cardBorder","SwapModalFooter","slippageAdjustedAmounts","trade","onConfirm","allowedSlippage","swapErrorMessage","disabledConfirm","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","priceImpactWithoutFee","realizedLPFee","style","justifyContent","alignItems","display","textAlign","paddingLeft","formatExecutionPrice","showInverted","setShowInverted","AutoRenewIcon","RowFixed","tradeType","TradeType","QuestionHelper","ml","Field","toSignificant","marginLeft","outputAmount","inputAmount","mb","amount","disabled","mt","SwapModalHeader","recipient","showAcceptChanges","onAcceptChanges","priceImpactSeverity","tradeInfoText","split","estimatedText","transactionRevertText","truncatedRecipient","truncateHash","recipientInfoText","recipientSentToText","postSentToText","marginRight","ArrowDownIcon","justify","mr","bold","padding","b","originalTrade","customOnDismiss","attemptingTxn","txHash","tradeB","tradeA","currencyEquals","equalTo","modalHeader","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","confirmationContent","TransactionErrorContent","message","ConfirmationModalContent","topContent","bottomContent","TransactionConfirmationModal","hash","content","currencyToAdd","isDefined","x","filterFn","setLast","prev","last","useLast","memo","flexWrap","route","i","isLastItem","unwrappedToken","Fragment","ChevronRightIcon","TradeSummary","isExactIn","placement","AdvancedSwapDetails","useUserSlippageTolerance","showRoute","span","SwapRoute","AdvancedDetailsFooter","show","AdvancedSwapDetailsDropdown","rest","lastTrade","useLastTruthy","TradePrice","price","formattedPrice","invert","baseCurrency","quoteCurrency","label","onCancel","ImportToken","handleCurrencySelect","Grouping","Circle","confirmed","backgroundDisabled","CircleRow","Connector","prevConfirmed","ProgressCircles","steps","step","activeIndex","ButtonMenu","scale","ButtonMenuItem","as","rel","RoundBox","isDark","isMobile","Intro","textSubtle","TxMining","borderRadius","br","IconButton","height","isZero","hexNumberString","test","useSwapCallArguments","INITIAL_ALLOWED_SLIPPAGE","recipientAddress","account","library","deadline","contract","getRouterContract","swapMethods","push","Router","feeOnTransfer","Percent","BIPS_BASE","toNumber","parameters","swapErrorToUserReadableMessage","reason","data","originalError","indexOf","substring","console","SwapCallbackState","INVALID","LOADING","VALID","WrapType","NOT_APPLICABLE","WRAP","UNWRAP","wrapType","handleContinueClick","Checkbox","name","checked","isConfirmed","setIsConfirmed","userSelect","LinkExternal","StyledModalContainer","ModalContainer","MessageContainer","Message","useTheme","preventClickHandler","e","stopPropagation","preventDefault","document","querySelectorAll","forEach","el","addEventListener","removeEventListener","SWAP_WARNING","SwapWarningTokensConfig","component","SafemoonWarning","BondlyWarning","ItamWarning","CcarWarning","BTTWarning","minWidth","ModalHeader","gradients","cardHeader","Heading","ModalBody","Box","Acknowledgement","StyledSwapContainer","mediaQueries","lg","xxl","$isChartExpanded","StyledInputCurrencyWrapper","CurrencyInputContainer","subtitle","expertMode","hasAmount","onRefreshPrice","useExpertModeManager","onPresentTransactionsModal","TransactionsModal","flexDirection","NotificationDot","GlobalSettings","HistoryIcon","placeSelf","Label","secondary","SwitchIconButton","BackgroundWrapper","Page","Swap","parsedAmounts","router","useRouter","loadedUrlParams","useDefaultsFromURLSearch","useMatchBreakpoints","useExchangeChartManager","userChartPreference","setUserChartPreference","useRefreshBlockNumberID","isChartDisplayed","useCurrency","inputCurrencyId","outputCurrencyId","loadedInputCurrency","loadedOutputCurrency","urlLoadedTokens","filter","c","Token","defaultTokens","useAllTokens","importTokensNotInDefault","isExpertMode","useSwapState","independentField","typedValue","currencyId","inputCurrency","outputCurrency","useDerivedSwapInfo","v2Trade","currencyBalances","parsedAmount","inputError","useWrapCallback","useCallWithGasPrice","callWithGasPrice","wbnbContract","useWBNBContract","balance","useCurrencyBalance","tryParseAmount","addTransaction","useTransactionAdder","sufficientBalance","WETH","execute","txReceipt","toString","summary","showWrap","useSingleTokenSwapInfo","useSwapActionHandlers","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","swapInputError","dependentField","handleTypeInput","handleTypeOutput","tradeToConfirm","formattedAmounts","toExact","userHasSpecifiedInputOutput","greaterThan","noRoute","useApproveCallbackFromTrade","approval","approveCallback","ApprovalState","setApprovalSubmitted","approvalSubmitted","maxAmountInput","atMaxAmountInput","useSwapCallback","gasPrice","useGasPrice","swapCalls","callback","onSwap","estimatedCalls","successfulEstimation","errorCalls","methodName","args","gasEstimate","Promise","all","call","options","estimateGas","then","catch","gasError","callStatic","callError","find","ix","list","Error","gasLimit","calculateGasMargin","from","response","inputSymbol","outputSymbol","base","withRecipient","code","singleHopOnly","useUserSingleHopOnly","handleSwap","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","confirmWord","window","prompt","word","ALLOWED_PRICE_IMPACT_HIGH","confirm","confirmPriceImpactWithoutFee","swapCallback","setSwapState","showApproveFlow","handleConfirmDismiss","handleAcceptChanges","onPresentSwapWarningModal","SwapWarningModal","swapWarningCurrency","handleInputSelect","currencyInput","showSwapWarning","shouldShowSwapWarning","setSwapWarningCurrency","handleMaxInput","handleOutputSelect","currencyOutput","swapIsUnsupported","useIsTransactionUnsupported","INPUT","OUTPUT","onPresentImportTokenWarningModal","ImportTokenWarningModal","onPresentConfirmModal","ConfirmSwapModal","removePadding","isChartExpanded","hideFooterOnDesktop","CardNav","position","AppBody","CurrencyInputHeader","setIsChartDisplayed","minHeight","CurrencyInputPanel","showMaxButton","onMax","onCurrencySelect","otherCurrency","ArrowUpDownIcon","Skeleton","executionPrice","wrapInputError","onWrap","GreyCard","CircleLoader","stroke","asset","swapCallbackError","ConnectWalletButton","Column","marginTop","ProgressSteps"],"sourceRoot":""}