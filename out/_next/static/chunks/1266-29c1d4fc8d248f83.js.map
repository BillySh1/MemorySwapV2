{"version":3,"file":"static/chunks/1266-29c1d4fc8d248f83.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/AutoRenew.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ChevronRight.tsx","webpack://_N_E/./src/views/Voting/config.ts","webpack://_N_E/./src/views/Voting/getScores.ts","webpack://_N_E/./src/views/Voting/strategies.ts","webpack://_N_E/./src/views/Voting/helpers.ts"],"sourcesContent":["import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M12 6V7.79C12 8.24 12.54 8.46 12.85 8.14L15.64 5.35C15.84 5.15 15.84 4.84 15.64 4.64L12.85 1.85C12.54 1.54 12 1.76 12 2.21V4C7.58 4 4 7.58 4 12C4 13.04 4.2 14.04 4.57 14.95C4.84 15.62 5.7 15.8 6.21 15.29C6.48 15.02 6.59 14.61 6.44 14.25C6.15 13.56 6 12.79 6 12C6 8.69 8.69 6 12 6ZM17.79 8.71C17.52 8.98 17.41 9.4 17.56 9.75C17.84 10.45 18 11.21 18 12C18 15.31 15.31 18 12 18V16.21C12 15.76 11.46 15.54 11.15 15.86L8.36 18.65C8.16 18.85 8.16 19.16 8.36 19.36L11.15 22.15C11.46 22.46 12 22.24 12 21.8V20C16.42 20 20 16.42 20 12C20 10.96 19.8 9.96 19.43 9.05C19.16 8.38 18.3 8.2 17.79 8.71Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M9.29006 15.88L13.1701 12L9.29006 8.12001C8.90006 7.73001 8.90006 7.10001 9.29006 6.71001C9.68006 6.32001 10.3101 6.32001 10.7001 6.71001L15.2901 11.3C15.6801 11.69 15.6801 12.32 15.2901 12.71L10.7001 17.3C10.3101 17.69 9.68006 17.69 9.29006 17.3C8.91006 16.91 8.90006 16.27 9.29006 15.88Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMINS = [\n  '0x842B508681eE336E74600974B4623B709477d29D', // TARO\n  '0x977e0c1005dff8749f8cac22f4df0bd5f013d1a7', // CHUNGUS\n  '0x6eaf1b33b8672c5dc40ab8f4ba3a0111723126c7', // HOPS\n].map((address) => address.toLowerCase())\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cake.eth'\nexport const VOTE_THRESHOLD = 10\n","export async function getScores(\n  space: string,\n  strategies: any[],\n  network: string,\n  addresses: string[],\n  snapshot: number | string = 'latest',\n  scoreApiUrl = 'https://score.snapshot.org/api/scores',\n) {\n  try {\n    const params = {\n      space,\n      network,\n      snapshot,\n      strategies,\n      addresses,\n    }\n    const res = await fetch(scoreApiUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ params }),\n    })\n    const obj = await res.json()\n    return obj.result.scores\n  } catch (e) {\n    return Promise.reject(e)\n  }\n}\n","const votePowerAddress = {\n  v0: '0xc0FeBE244cE1ea66d27D23012B3D616432433F42',\n  v1: '0x67Dfbb197602FDB9A9D305cC7A43b95fB63a0A56',\n}\n\nexport const cakeBalanceStrategy = (version: 'v0' | 'v1') => ({\n  name: 'contract-call',\n  params: {\n    address: votePowerAddress[version],\n    decimals: 18,\n    methodABI: {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getCakeBalance',\n      outputs: [\n        {\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  },\n})\n\nexport const cakeVaultBalanceStrategy = {\n  name: 'contract-call',\n  params: {\n    address: votePowerAddress.v0,\n    decimals: 18,\n    methodABI: {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getCakeVaultBalance',\n      outputs: [\n        {\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  },\n}\n\nexport const ifoPoolBalanceStrategy = {\n  name: 'contract-call',\n  params: {\n    address: votePowerAddress.v0,\n    decimals: 18,\n    methodABI: {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getIFOPoolBalancee',\n      outputs: [\n        {\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  },\n}\n\nexport const cakePoolBalanceStrategy = (version: 'v0' | 'v1') => ({\n  name: 'contract-call',\n  params: {\n    address: votePowerAddress[version],\n    decimals: 18,\n    methodABI: {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getCakePoolBalance',\n      outputs: [\n        {\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  },\n})\n\nexport const cakeBnbLpBalanceStrategy = (version: 'v0' | 'v1') => ({\n  name: 'contract-call',\n  params: {\n    address: votePowerAddress[version],\n    decimals: 18,\n    methodABI: {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getCakeBnbLpBalance',\n      outputs: [\n        {\n          internalType: 'uint256',\n          name: '',\n          type: 'uint256',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  },\n})\n\nexport function creatPoolsBalanceStrategy(poolAddress, version: 'v0' | 'v1') {\n  return {\n    name: 'contract-call',\n    params: {\n      address: votePowerAddress[version],\n      decimals: 18,\n      args: ['%{address}', poolAddress],\n      methodABI: {\n        inputs: [\n          {\n            internalType: 'address',\n            name: '_user',\n            type: 'address',\n          },\n          {\n            internalType: 'address[]',\n            name: '_pools',\n            type: 'address[]',\n          },\n        ],\n        name: 'getPoolsBalance',\n        outputs: [\n          {\n            internalType: 'uint256',\n            name: '',\n            type: 'uint256',\n          },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    },\n  }\n}\n\nexport function createTotalStrategy(poolAddress, version: 'v0' | 'v1') {\n  return {\n    name: 'contract-call',\n    params: {\n      address: votePowerAddress[version],\n      decimals: 18,\n      args: ['%{address}', poolAddress],\n      methodABI: {\n        inputs: [\n          {\n            internalType: 'address',\n            name: '_user',\n            type: 'address',\n          },\n          {\n            internalType: 'address[]',\n            name: '_pools',\n            type: 'address[]',\n          },\n        ],\n        name: 'getVotingPower',\n        outputs: [\n          {\n            internalType: 'uint256',\n            name: '',\n            type: 'uint256',\n          },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    },\n  }\n}\n","import { SNAPSHOT_HUB_API } from 'config/constants/endpoints'\nimport tokens from 'config/constants/tokens'\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\nimport _chunk from 'lodash/chunk'\nimport { ADMINS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\nimport { getScores } from './getScores'\nimport * as strategies from './strategies'\n\nexport const isCoreProposal = (proposal: Proposal) => {\n  return ADMINS.includes(proposal.author.toLowerCase())\n}\n\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\n  if (proposals) {\n    switch (proposalType) {\n      case ProposalType.COMMUNITY:\n        return proposals.filter((proposal) => !isCoreProposal(proposal))\n      case ProposalType.CORE:\n        return proposals.filter((proposal) => isCoreProposal(proposal))\n      case ProposalType.ALL:\n      default:\n        return proposals\n    }\n  } else {\n    return []\n  }\n}\n\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\n  return proposals.filter((proposal) => proposal.state === state)\n}\n\nexport interface Message {\n  address: string\n  msg: string\n  sig: string\n}\n\nconst STRATEGIES = [{ name: 'cake', params: { symbol: 'CAKE', address: tokens.cake.address, decimals: 18, max: 300 } }]\nconst NETWORK = '56'\n\n/**\n * Generates metadata required by snapshot to validate payload\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: STRATEGIES,\n  }\n}\n\n/**\n * Returns data that is required on all snapshot payloads\n */\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE,\n  }\n}\n\n/**\n * General function to send commands to the snapshot api\n */\nexport const sendSnapshotData = async (message: Message) => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error?.error_description)\n  }\n\n  const data = await response.json()\n  return data\n}\n\nexport const VOTING_POWER_BLOCK = {\n  v0: 16300686,\n  v1: 17137653,\n}\n\n/**\n *  Get voting power by single user for each category\n */\nexport const getVotingPower = async (account: string, poolAddresses: string[], blockNumber?: number) => {\n  if (blockNumber && blockNumber >= VOTING_POWER_BLOCK.v1) {\n    const [cakeBalance, cakeBnbLpBalance, cakePoolBalance, poolsBalance, total] = await getScores(\n      PANCAKE_SPACE,\n      [\n        strategies.cakeBalanceStrategy('v1'),\n        strategies.cakeBnbLpBalanceStrategy('v1'),\n        strategies.cakePoolBalanceStrategy('v1'),\n        strategies.creatPoolsBalanceStrategy(poolAddresses, 'v1'),\n        strategies.createTotalStrategy(poolAddresses, 'v1'),\n      ],\n      NETWORK,\n      [account],\n      blockNumber,\n    )\n\n    return {\n      poolsBalance: poolsBalance[account] ? poolsBalance[account] : 0,\n      total: total[account] ? total[account] : 0,\n      cakeBalance: cakeBalance[account] ? cakeBalance[account] : 0,\n      cakePoolBalance: cakePoolBalance[account] ? cakePoolBalance[account] : 0,\n      cakeBnbLpBalance: cakeBnbLpBalance[account] ? cakeBnbLpBalance[account] : 0,\n      voter: account,\n    }\n  }\n\n  if (blockNumber && blockNumber >= VOTING_POWER_BLOCK.v0) {\n    const [cakeBalance, cakeBnbLpBalance, cakePoolBalance, cakeVaultBalance, ifoPoolBalance, poolsBalance, total] =\n      await getScores(\n        PANCAKE_SPACE,\n        [\n          strategies.cakeBalanceStrategy('v0'),\n          strategies.cakeBnbLpBalanceStrategy('v0'),\n          strategies.cakePoolBalanceStrategy('v0'),\n          strategies.cakeVaultBalanceStrategy,\n          strategies.ifoPoolBalanceStrategy,\n          strategies.creatPoolsBalanceStrategy(poolAddresses, 'v0'),\n          strategies.createTotalStrategy(poolAddresses, 'v0'),\n        ],\n        NETWORK,\n        [account],\n        blockNumber,\n      )\n\n    return {\n      poolsBalance: poolsBalance[account] ? poolsBalance[account] : 0,\n      total: total[account] ? total[account] : 0,\n      cakeBalance: cakeBalance[account] ? cakeBalance[account] : 0,\n      cakeVaultBalance: cakeVaultBalance[account] ? cakeVaultBalance[account] : 0,\n      ifoPoolBalance: ifoPoolBalance[account] ? ifoPoolBalance[account] : 0,\n      cakePoolBalance: cakePoolBalance[account] ? cakePoolBalance[account] : 0,\n      cakeBnbLpBalance: cakeBnbLpBalance[account] ? cakeBnbLpBalance[account] : 0,\n      voter: account,\n    }\n  }\n\n  const [total] = await getScores(PANCAKE_SPACE, STRATEGIES, NETWORK, [account], blockNumber)\n\n  return {\n    total: total[account] ? total[account] : 0,\n    voter: account,\n  }\n}\n\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\n  if (votes) {\n    return votes.reduce((accum, vote) => {\n      const choiceText = vote.proposal.choices[vote.choice - 1]\n\n      return {\n        ...accum,\n        [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\n      }\n    }, {})\n  }\n  return {}\n}\n\nexport const getTotalFromVotes = (votes: Vote[]) => {\n  if (votes) {\n    return votes.reduce((accum, vote) => {\n      let power = parseFloat(vote.metadata?.votingPower)\n\n      if (!power) {\n        power = 0\n      }\n\n      return accum + power\n    }, 0)\n  }\n  return 0\n}\n\n/**\n * Get voting power by a list of voters, only total\n */\nexport async function getVotingPowerByCakeStrategy(voters: string[], blockNumber: number) {\n  const strategyResponse = await getScores(PANCAKE_SPACE, STRATEGIES, NETWORK, voters, blockNumber)\n\n  const result = voters.reduce<Record<string, string>>((accum, voter) => {\n    const defaultTotal = strategyResponse.reduce(\n      (total, scoreList) => total + (scoreList[voter] ? scoreList[voter] : 0),\n      0,\n    )\n\n    return {\n      ...accum,\n      [voter]: defaultTotal,\n    }\n  }, {})\n\n  return result\n}\n"],"names":["props","Svg","viewBox","path","d","PROPOSALS_TO_SHOW","ADMINS","map","address","toLowerCase","IPFS_GATEWAY","SNAPSHOT_VERSION","PANCAKE_SPACE","VOTE_THRESHOLD","getScores","space","strategies","network","addresses","snapshot","scoreApiUrl","params","res","obj","fetch","method","headers","body","JSON","stringify","json","result","scores","Promise","reject","votePowerAddress","v0","v1","cakeBalanceStrategy","version","name","decimals","methodABI","inputs","internalType","type","outputs","stateMutability","cakeVaultBalanceStrategy","ifoPoolBalanceStrategy","cakePoolBalanceStrategy","cakeBnbLpBalanceStrategy","creatPoolsBalanceStrategy","poolAddress","args","createTotalStrategy","isCoreProposal","proposal","author","filterProposalsByType","proposals","proposalType","ProposalType","filter","filterProposalsByState","state","STRATEGIES","symbol","tokens","max","NETWORK","generateMetaData","plugins","generatePayloadData","timestamp","Date","now","toFixed","sendSnapshotData","message","response","error","data","SNAPSHOT_HUB_API","Accept","ok","Error","error_description","VOTING_POWER_BLOCK","getVotingPower","account","poolAddresses","blockNumber","cakeBalance","cakeBnbLpBalance","cakePoolBalance","poolsBalance","total","cakeVaultBalance","ifoPoolBalance","voter","calculateVoteResults","votes","reduce","accum","vote","choiceText","choices","choice","getTotalFromVotes","power","parseFloat","metadata","votingPower","getVotingPowerByCakeStrategy","voters","strategyResponse","defaultTotal","scoreList"],"sourceRoot":""}