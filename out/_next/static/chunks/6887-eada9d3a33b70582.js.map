{"version":3,"file":"static/chunks/6887-eada9d3a33b70582.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowUp.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/types.ts","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/styles.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/SellModal/index.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","webpack://_N_E/./src/views/Nft/market/components/BuySellModals/shared/styles.tsx","webpack://_N_E/./src/views/Nft/market/components/ProfileNftModal.tsx"],"sourcesContent":["import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M13 19V7.83001L17.88 12.71C18.27 13.1 18.91 13.1 19.3 12.71C19.69 12.32 19.69 11.69 19.3 11.3L12.71 4.71001C12.32 4.32001 11.69 4.32001 11.3 4.71001L4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7C5.08997 13.09 5.71997 13.09 6.10997 12.7L11 7.83001V19C11 19.55 11.45 20 12 20C12.55 20 13 19.55 13 19Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport { useProfile } from 'state/profile/hooks'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface SellStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToNextStage: () => void\n  continueToTransferStage: () => void\n  onSuccessEditProfile?: () => void\n}\n\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\nconst SellStage: React.FC<SellStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToNextStage,\n  continueToTransferStage,\n  onSuccessEditProfile,\n}) => {\n  const { t } = useTranslation()\n  const { hasProfile } = useProfile()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  const [onEditProfileModal] = useModal(<EditProfileModal onSuccess={onSuccessEditProfile} />, false)\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell?.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>\n                  {lowestPrice.toLocaleString(undefined, {\n                    minimumFractionDigits: 3,\n                    maximumFractionDigits: 3,\n                  })}\n                </Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Sell')}\n        </Button>\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\n          {t('Transfer')}\n        </Button>\n        {hasProfile && (\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\n            {t('Set as Profile Pic')}\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default SellStage\n","export enum SellingStage {\n  // Sell flow\n  SELL,\n  SET_PRICE,\n  APPROVE_AND_CONFIRM_SELL,\n  // Adjust price flow\n  EDIT,\n  ADJUST_PRICE,\n  CONFIRM_ADJUST_PRICE,\n  // Remove from market flow\n  REMOVE_FROM_MARKET,\n  CONFIRM_REMOVE_FROM_MARKET,\n  // Transfer flow\n  TRANSFER,\n  CONFIRM_TRANSFER,\n  // Common\n  TX_CONFIRMED,\n}\n","import styled from 'styled-components'\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { SellingStage } from './types'\n\nexport const stagesWithBackButton = [\n  SellingStage.SET_PRICE,\n  SellingStage.ADJUST_PRICE,\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\n  SellingStage.CONFIRM_ADJUST_PRICE,\n  SellingStage.REMOVE_FROM_MARKET,\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\n  SellingStage.TRANSFER,\n  SellingStage.CONFIRM_TRANSFER,\n]\n\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\n  width: 360px;\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\n  }\n`\n\nexport const GreyedOutContainer = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  padding: 16px;\n`\n\nexport const RightAlignedInput = styled(Input)`\n  text-align: right;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n\ninterface FeeAmountCellProps {\n  bnbAmount: number\n  creatorFee: number\n  tradingFee: number\n}\n\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n\n  const totalFee = creatorFee + tradingFee\n  const totalFeeAsDecimal = totalFee / 100\n  const feeAmount = bnbAmount * totalFeeAsDecimal\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 6,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        ({totalFee}%)\n      </Text>\n    </Flex>\n  )\n}\n","import { useEffect, useRef } from 'react'\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { Divider } from '../shared/styles'\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\n\ninterface SetPriceStageProps {\n  nftToSell: NftToken\n  variant: 'set' | 'adjust'\n  currentPrice?: string\n  lowestPrice?: number\n  price: string\n  setPrice: React.Dispatch<React.SetStateAction<string>>\n  continueToNextStage: () => void\n}\n\nconst MIN_PRICE = 0.005\nconst MAX_PRICE = 10000\n\n// Stage where user puts price for NFT they're about to put on sale\n// Also shown when user wants to adjust the price of already listed NFT\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\n  nftToSell,\n  variant,\n  lowestPrice,\n  currentPrice,\n  price,\n  setPrice,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const inputRef = useRef<HTMLInputElement>()\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\n\n  const { creatorFee = '', tradingFee = '' } = useGetCollection(nftToSell.collectionAddress) || {}\n  const creatorFeeAsNumber = parseFloat(creatorFee)\n  const tradingFeeAsNumber = parseFloat(tradingFee)\n  const bnbPrice = useBNBBusdPrice()\n  const priceAsFloat = parseFloat(price)\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\n\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\n\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\n        )}\n      </Text>\n      {creatorFeeAsNumber > 0 && (\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\n      )}\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\n    </>,\n    { placement: 'auto' },\n  )\n\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [inputRef])\n\n  const getButtonText = () => {\n    if (variant === 'adjust') {\n      if (adjustedPriceIsTheSame || priceIsValid) {\n        return t('Input New Sale Price')\n      }\n      return t('Confirm')\n    }\n    return t('Enable Listing')\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold p=\"16px\">\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\n      </Text>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Set Price')}\n        </Text>\n        <Flex>\n          <Flex flex=\"1\" alignItems=\"center\">\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\n            <Text bold>WBNB</Text>\n          </Flex>\n          <Flex flex=\"2\">\n            <RightAlignedInput\n              scale=\"sm\"\n              type=\"number\"\n              inputMode=\"decimal\"\n              value={price}\n              ref={inputRef}\n              isWarning={priceIsOutOfRange}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n          </Flex>\n        </Flex>\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\n          {!Number.isNaN(priceInUsd) && (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n            </Text>\n          )}\n        </Flex>\n        {priceIsOutOfRange && (\n          <Text fontSize=\"12px\" color=\"failure\">\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\n              minPrice: MIN_PRICE,\n              maxPrice: MAX_PRICE,\n            })}\n          </Text>\n        )}\n        <Flex mt=\"8px\">\n          {Number.isFinite(creatorFeeAsNumber) && Number.isFinite(tradingFeeAsNumber) ? (\n            <>\n              <Text small color=\"textSubtle\" mr=\"8px\">\n                {t('Seller pays %percentage%% platform fee on sale', {\n                  percentage: creatorFeeAsNumber + tradingFeeAsNumber,\n                })}\n              </Text>\n              <span ref={targetRef}>\n                <ErrorIcon />\n              </span>\n              {tooltipVisible && tooltip}\n            </>\n          ) : (\n            <Skeleton width=\"70%\" />\n          )}\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n          <Text small color=\"textSubtle\">\n            {t('Platform fee if sold')}\n          </Text>\n          {Number.isFinite(creatorFeeAsNumber) && Number.isFinite(tradingFeeAsNumber) ? (\n            <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\n          ) : (\n            <Skeleton width={40} />\n          )}\n        </Flex>\n        {lowestPrice && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n            <Text small color=\"textSubtle\">\n              {t('Lowest price on market')}\n            </Text>\n            <BnbAmountCell bnbAmount={lowestPrice} />\n          </Flex>\n        )}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Box>\n          <Text small color=\"textSubtle\">\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\n          </Text>\n        </Box>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\n        >\n          {getButtonText()}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default SetPriceStage\n","import { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface EditStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToAdjustPriceStage: () => void\n  continueToRemoveFromMarketStage: () => void\n}\n\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\nconst EditStage: React.FC<EditStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToAdjustPriceStage,\n  continueToRemoveFromMarketStage,\n}) => {\n  const { t } = useTranslation()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell?.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n          <Text small color=\"textSubtle\">\n            {t('Your price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{nftToSell?.marketData?.currentAskPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\n          {t('Adjust Sale Price')}\n        </Button>\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\n          {t('Remove from Market')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default EditStage\n","import { Flex, Box, Text, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Divider } from '../shared/styles'\n\ninterface RemoveStageProps {\n  continueToNextStage: () => void\n}\n\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Box p=\"16px\" maxWidth=\"360px\">\n        <Text fontSize=\"24px\" bold>\n          {t('Remove from Market')}\n        </Text>\n        <Text mt=\"24px\" color=\"textSubtle\">\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\n        </Text>\n        <Text mt=\"16px\" color=\"textSubtle\">\n          {t('Continue?')}\n        </Text>\n      </Box>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default RemoveStage\n","import { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a BNB Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell?.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n","import { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from '@ethersproject/units'\nimport useTheme from 'hooks/useTheme'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { isAddress } from 'utils'\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\nimport SellStage from './SellStage'\nimport SetPriceStage from './SetPriceStage'\nimport EditStage from './EditStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\nimport { StyledModal, stagesWithBackButton } from './styles'\nimport { SellingStage } from './types'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport RemoveStage from './RemoveStage'\nimport TransferStage from './TransferStage'\n\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details')\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back')\n    // Adjust price flow\n    case SellingStage.EDIT:\n      return t('Details')\n    case SellingStage.ADJUST_PRICE:\n      return t('Back')\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction')\n    // Remove from market flow\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back')\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction')\n    // Transfer flow\n    case SellingStage.TRANSFER:\n      return t('Back')\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction')\n    // Common\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed')\n    default:\n      return ''\n  }\n}\n\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet')\n  }\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet')\n  }\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!')\n  }\n  return t('Your NFT listing has been changed.')\n}\n\ninterface SellModalProps extends InjectedModalProps {\n  variant: 'sell' | 'edit'\n  nftToSell: NftToken\n  onSuccessSale: () => void\n  onSuccessEditProfile?: () => void\n}\n\nconst SellModal: React.FC<SellModalProps> = ({\n  variant,\n  nftToSell,\n  onDismiss,\n  onSuccessSale,\n  onSuccessEditProfile,\n}) => {\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell?.marketData?.currentAskPrice)\n  const [transferAddress, setTransferAddress] = useState('')\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const { reader: collectionContractReader, signer: collectionContractSigner } = useErc721CollectionContract(\n    nftToSell.collectionAddress,\n  )\n  const nftMarketContract = useNftMarketContract()\n\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\n\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell?.marketData?.currentAskPrice)\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\n        break\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET)\n  }\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER)\n  }\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await collectionContractReader.isApprovedForAll(account, nftMarketContract.address)\n        return !approvedForContract\n      } catch (error) {\n        return true\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(collectionContractSigner, 'setApprovalForAll', [nftMarketContract.address, true])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now put your NFT for sale!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\n      }\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(collectionContractSigner, 'safeTransferFrom(address,address,uint256)', [\n          account,\n          transferAddress,\n          nftToSell.tokenId,\n        ])\n      }\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\n      const askPrice = parseUnits(price)\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\n    },\n    onSuccess: async ({ receipt }) => {\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      onSuccessSale()\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(SellingStage.TX_CONFIRMED)\n    },\n  })\n\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\n\n  return (\n    <StyledModal\n      title={modalTitles(stage, t)}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === SellingStage.SELL && (\n        <SellStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          continueToTransferStage={continueToTransferStage}\n          onSuccessEditProfile={onSuccessEditProfile}\n        />\n      )}\n      {stage === SellingStage.SET_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"set\"\n          continueToNextStage={continueToNextStage}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\n        <ApproveAndConfirmStage\n          variant=\"sell\"\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleApprove={handleApprove}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n      {stage === SellingStage.EDIT && (\n        <EditStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToAdjustPriceStage={continueToNextStage}\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\n        />\n      )}\n      {stage === SellingStage.ADJUST_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"adjust\"\n          continueToNextStage={continueToNextStage}\n          currentPrice={nftToSell?.marketData?.currentAskPrice}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.TRANSFER && (\n        <TransferStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          transferAddress={transferAddress}\n          setTransferAddress={setTransferAddress}\n          isInvalidTransferAddress={isInvalidTransferAddress}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_TRANSFER && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n    </StyledModal>\n  )\n}\n\nexport default SellModal\n","import { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { StepIndicator } from './styles'\n\ninterface ApproveAndConfirmStageProps {\n  variant: 'buy' | 'sell'\n  isApproved: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  handleApprove: () => void\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown if user wants to pay with WBNB and contract isn't approved yet\n// Sell Flow:\n// Shown the first time user puts NFT for sale\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\n  variant,\n  isApproved,\n  isApproving,\n  isConfirming,\n  handleApprove,\n  handleConfirm,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex mb=\"8px\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <StepIndicator success={isApproved}>\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n                1\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\n              {isApproved ? t('Enabled') : t('Enable')}\n            </Text>\n          </Flex>\n          {!isApproved && (\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\n              {variant === 'buy'\n                ? t('Please enable WBNB spending in your wallet')\n                : t('Please enable your NFT to be sent to the market')}\n            </Text>\n          )}\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isApproving && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      {!isApproved && (\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\n        </Button>\n      )}\n      <Flex alignItems=\"center\" mt=\"8px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mt=\"16px\">\n            <StepIndicator success={!!0} disabled={!isApproved}>\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\n                2\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? t('Confirming') : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveAndConfirmStage\n","import { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ConfirmStageProps {\n  isConfirming: boolean\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown in case user wants to pay with BNB\n// or if user wants to pay with WBNB and it is already approved\n// Sell Flow:\n// Shown if user adjusts the price or removes NFT from the market\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\n  const { t } = useTranslation()\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <Text fontSize=\"20px\" bold color=\"secondary\">\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color=\"textSubtle\">\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ConfirmStage\n","import { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Divider } from './styles'\n\ninterface TransactionConfirmedProps {\n  txHash: string\n  onDismiss: () => void\n}\n\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\n        <Text bold>{t('Transaction Confirmed')}</Text>\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\n      </Flex>\n      <Divider />\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\n          {t('Close')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransactionConfirmed\n","import styled from 'styled-components'\nimport { Flex, Image } from '@pancakeswap/uikit'\n\nexport const RoundedImage = styled(Image)`\n  border-radius: ${({ theme }) => theme.radii.small};\n  overflow: hidden;\n`\n\nexport const Divider = styled.div`\n  margin: 16px 0;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const HorizontalDivider = styled.div`\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\n  border-radius: 50%;\n  background-color: ${({ theme, success, disabled }) => {\n    if (disabled) {\n      return 'none'\n    }\n    return success ? theme.colors.success : theme.colors.secondary\n  }};\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n`\n","import { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLinkForNft } from 'utils'\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\nimport EditProfileModal from '../Profile/components/EditProfileModal'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\n\nexport const StyledModal = styled(Modal)`\n  & > div:last-child {\n    padding: 0;\n  }\n`\n\nconst TextWrapper = styled(Flex)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n\ninterface ProfileNftModalProps extends InjectedModalProps {\n  nft: NftToken\n  onSuccess?: () => void\n}\n\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss, onSuccess }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal onSuccess={onSuccess} />, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\n\n  return (\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex p=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n            <Text bold>{nft.name}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft?.collectionName}\n            </Text>\n            {/* TODO: Add lowestPrice when available */}\n          </Grid>\n        </Flex>\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\n          <Flex flex=\"2\">\n            <Text small color=\"textSubtle\">\n              {t('Token ID: %id%', { id: nft.tokenId })}\n            </Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" flex=\"3\">\n            <Button\n              as={Link}\n              p=\"0px\"\n              height=\"16px\"\n              external\n              variant=\"text\"\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\n            >\n              {t('View Item')}\n            </Button>\n            <HorizontalDivider />\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\n              BscScan\n            </LinkExternal>\n          </Flex>\n        </Flex>\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\n            {t(\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\n            )}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Go to your profile page to continue.')}\n          </Text>\n        </TextWrapper>\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\n            {t('Remove Profile Pic')}\n          </Button>\n        </Flex>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default ProfileNftModal\n"],"names":["props","Svg","viewBox","path","d","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","onSuccessEditProfile","useTranslation","t","useProfile","hasProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","value","tokenId","onEditProfileModal","useModal","EditProfileModal","onSuccess","Flex","p","RoundedImage","src","image","thumbnail","height","width","mr","Grid","flex","gridTemplateColumns","alignItems","Text","bold","name","fontSize","color","textAlign","collectionName","small","justifyContent","BinanceIcon","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","px","mt","id","Button","as","Link","external","variant","href","nftsBaseUrl","HorizontalDivider","LinkExternal","getBscScanLinkForNft","Divider","flexDirection","pb","mb","onClick","SellingStage","SELL","SET_PRICE","APPROVE_AND_CONFIRM_SELL","EDIT","ADJUST_PRICE","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","TX_CONFIRMED","stagesWithBackButton","StyledModal","styled","Modal","stage","theme","includes","colors","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","currentPrice","price","setPrice","inputRef","useRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","useEffect","current","focus","textTransform","scale","type","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","isFinite","span","ErrorIcon","Skeleton","maxWidth","alignSelf","disabled","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","transferAddress","setTransferAddress","isInvalidTransferAddress","useWeb3React","account","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","getToastText","onDismiss","onSuccessSale","useState","useTheme","useCallWithGasPrice","callWithGasPrice","useToast","toastSuccess","useErc721CollectionContract","reader","signer","nftMarketContract","useNftMarketContract","isAddress","useGetLowestPriceFromNft","setStage","useApproveConfirmTransaction","onRequiresApproval","approvedForContract","collectionContractReader","isApprovedForAll","address","onApprove","collectionContractSigner","onApproveSuccess","receipt","ToastDescriptionWithTx","txHash","transactionHash","onConfirm","methodName","askPrice","parseUnits","setConfirmedTxHash","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","SellStage","SetPriceStage","ApproveAndConfirmStage","TransactionConfirmed","confirmedTxHash","EditStage","ConfirmStage","RemoveStage","TransferStage","StepIndicator","success","Spinner","size","useActiveWeb3React","chainId","ArrowUpIcon","getBscScanLink","Image","radii","cardBorder","secondary","textDisabled","TextWrapper","nft","py"],"sourceRoot":""}