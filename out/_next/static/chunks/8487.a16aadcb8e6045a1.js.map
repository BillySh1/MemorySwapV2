{"version":3,"file":"static/chunks/8487.a16aadcb8e6045a1.js","mappings":"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","sources":["webpack://_N_E/./src/views/Info/components/InfoCharts/CandleChart/index.tsx"],"sourcesContent":["import { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const time = `${now.toLocaleString(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            timeZone: 'UTC',\n          })} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n"],"names":["data","setValue","setLabel","rest","useTheme","theme","currentLanguage","useTranslation","locale","chartRef","useRef","useState","handleResize","useCallback","chartCreated","current","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","useEffect","window","addEventListener","removeEventListener","chart","createChart","height","width","layout","backgroundColor","textColor","colors","textSubtle","fontFamily","fontSize","rightPriceScale","scaleMargins","top","bottom","borderVisible","secondsVisible","tickMarkFormatter","unixTime","format","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","style","color","labelBackgroundColor","primary","setChart","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","undefined","time","point","x","y","timestamp","now","Date","toLocaleString","year","month","day","hour","minute","timeZone","parsed","seriesPrices","get","open","CandleChartLoader","div","ref","id"],"sourceRoot":""}