{"version":3,"file":"static/chunks/pages/prediction/leaderboard-7b7b4b7c02df752b.js","mappings":"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","sources":["webpack://_N_E/?61c4","webpack://_N_E/./packages/uikit/src/components/BaseMenu/BaseMenu.tsx","webpack://_N_E/./packages/uikit/src/components/BaseMenu/SubMenu.tsx","webpack://_N_E/./packages/uikit/src/components/BaseMenu/styles.tsx","webpack://_N_E/./packages/uikit/src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://_N_E/./packages/uikit/src/components/Card/CardRibbon.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowDown.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowUp.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/AutoRenew.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ChevronRight.tsx","webpack://_N_E/./packages/uikit/src/components/Table/Cell.tsx","webpack://_N_E/./packages/uikit/src/components/Table/Table.tsx","webpack://_N_E/./src/components/Select/Select.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Crumbs.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Hero.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/styles.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/PositionLabel.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/PreviousBetsTable.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/MobileBetsTable.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/DesktopBetsTable.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/WalletStatsModal.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/ResultAvatar.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/DesktopRow.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/DesktopResults.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/MobileRow.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/MobileResults.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/RankingCard.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/index.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Results/ConnectedWalletResult.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/AddressSearch.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/components/Filters/index.tsx","webpack://_N_E/./src/pages/prediction/leaderboard.tsx","webpack://_N_E/./src/views/Predictions/Leaderboard/index.tsx","webpack://_N_E/./src/state/predictions/selectors.ts","webpack://_N_E/./src/state/predictions/hooks.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/prediction/leaderboard\",\n      function () {\n        return require(\"private-next-pages/prediction/leaderboard.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/prediction/leaderboard\"])\n      });\n    }\n  ","import React, { useState, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { usePopper } from \"react-popper\";\nimport { ClickableElementContainer } from \"./styles\";\nimport { BaseMenuProps } from \"./types\";\nimport getPortalRoot from \"../../util/getPortalRoot\";\n\nconst BaseMenu: React.FC<BaseMenuProps> = ({ component, options, children, isOpen = false }) => {\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\n  const [menuElement, setMenuElement] = useState<HTMLElement | null>(null);\n  const placement = options?.placement ?? \"bottom\";\n  const offset = options?.offset ?? [0, 10];\n  const padding = options?.padding ?? { left: 16, right: 16 };\n\n  const [isMenuOpen, setIsMenuOpen] = useState(isOpen);\n\n  const toggle = () => {\n    setIsMenuOpen((prev) => !prev);\n  };\n\n  const open = () => {\n    setIsMenuOpen(true);\n  };\n\n  const close = () => {\n    setIsMenuOpen(false);\n  };\n\n  // Allow for component to be controlled\n  useEffect(() => {\n    setIsMenuOpen(isOpen);\n  }, [isOpen, setIsMenuOpen]);\n\n  useEffect(() => {\n    const handleClickOutside = ({ target }: Event) => {\n      if (target instanceof Node) {\n        if (\n          menuElement !== null &&\n          targetElement !== null &&\n          !menuElement.contains(target) &&\n          !targetElement.contains(target)\n        ) {\n          setIsMenuOpen(false);\n        }\n      }\n    };\n    if (menuElement !== null) {\n      document.addEventListener(\"click\", handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside);\n    };\n  }, [menuElement, targetElement]);\n\n  const { styles, attributes } = usePopper(targetElement, menuElement, {\n    placement,\n    modifiers: [\n      { name: \"offset\", options: { offset } },\n      { name: \"preventOverflow\", options: { padding } },\n    ],\n  });\n\n  const menu = (\n    <div ref={setMenuElement} style={styles.popper} {...attributes.popper}>\n      {typeof children === \"function\" ? children({ toggle, open, close }) : children}\n    </div>\n  );\n\n  const portal = getPortalRoot();\n  const renderMenu = portal ? createPortal(menu, portal) : menu;\n\n  return (\n    <>\n      <ClickableElementContainer ref={setTargetElement} onClick={toggle}>\n        {component}\n      </ClickableElementContainer>\n      {isMenuOpen && renderMenu}\n    </>\n  );\n};\n\nexport default BaseMenu;\n","import React from \"react\";\nimport { FlexProps } from \"../Box\";\nimport BaseMenu from \"./BaseMenu\";\nimport { SubMenuContainer } from \"./styles\";\nimport { BaseMenuProps } from \"./types\";\n\nconst SubMenu: React.FC<BaseMenuProps & FlexProps> = ({ children, component, options, isOpen = false, ...props }) => {\n  return (\n    <BaseMenu component={component} options={options} isOpen={isOpen}>\n      <SubMenuContainer {...props}>{children}</SubMenuContainer>\n    </BaseMenu>\n  );\n};\n\nexport default SubMenu;\n","import styled from \"styled-components\";\nimport { Box, Flex } from \"../Box\";\n\nexport const InlineMenuContainer = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  border-radius: ${({ theme }) => theme.radii.card};\n  box-shadow: ${({ theme }) => theme.shadows.tooltip};\n`;\n\nexport const SubMenuContainer = styled(Flex)`\n  flex-direction: column;\n  overflow: hidden;\n  min-width: 136px;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: ${({ theme }) => theme.radii.default};\n  border: ${({ theme }) => `1px solid ${theme.colors.inputSecondary}`};\n`;\n\nexport const ClickableElementContainer = styled.div`\n  cursor: pointer;\n  display: inline-flex;\n`;\n\nexport const SubMenuItem = styled.button`\n  border: 0;\n  outline: 0;\n  cursor: pointer;\n  background: transparent;\n  padding: 8px 16px;\n  color: ${({ theme }) => theme.colors.text};\n  width: 100%;\n  font-size: 16px;\n  text-align: left;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.inputSecondary};\n    text-decoration: none;\n  }\n`;\n","/* eslint-disable react/no-array-index-key */\nimport React, { Children, isValidElement, ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport ChevronRightIcon from \"../Svg/Icons/ChevronRight\";\nimport { BreadcrumbsProps } from \"./types\";\n\nconst Separator = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.textDisabled};\n  display: flex;\n  justify-content: center;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 8px;\n    padding-right: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n`;\n\nconst StyledBreadcrumbs = styled.ul`\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n\n  a {\n    color: ${({ theme }) => theme.colors.primary};\n\n    &:hover {\n      color: ${({ theme }) => theme.colors.primaryBright};\n    }\n  }\n\n  ${space}\n`;\n\nconst insertSeparators = (items: ReactNode[], separator: BreadcrumbsProps[\"separator\"]) =>\n  items.reduce((accum: ReactNode[], item, index) => {\n    if (index === 0) {\n      return [...accum, item];\n    }\n\n    return [\n      ...accum,\n      <Separator aria-hidden key={`seperator-${index}`}>\n        {separator}\n      </Separator>,\n      item,\n    ];\n  }, []);\n\nconst DefaultSeparator = <ChevronRightIcon color=\"currentColor\" width=\"24px\" />;\n\nconst Breadcrumbs: React.FC<BreadcrumbsProps> = ({ separator = DefaultSeparator, children }) => {\n  const validItems = Children.toArray(children).filter((child) => isValidElement(child));\n  const items = insertSeparators(validItems, separator);\n\n  return (\n    <StyledBreadcrumbs>\n      {items.map((item, index) => (\n        <li key={`child-${index}`}>{item}</li>\n      ))}\n    </StyledBreadcrumbs>\n  );\n};\n\nexport default Breadcrumbs;\n","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components\";\nimport { CardRibbonProps } from \"./types\";\n\ninterface StyledCardRibbonProps extends CardRibbonProps {\n  theme: DefaultTheme;\n}\n\nconst StyledCardRibbon = styled.div<Partial<StyledCardRibbonProps>>`\n  z-index: ${({ theme }) => theme.zIndices.ribbon};\n  background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n  color: white;\n  margin: 0;\n  padding: 0;\n  padding: 8px 0;\n  position: absolute;\n  right: ${({ ribbonPosition }) => (ribbonPosition === \"right\" ? 0 : \"auto\")};\n  top: 0;\n  text-align: center;\n  transform: translateX(30%) translateY(0%) rotate(45deg);\n  transform: ${({ ribbonPosition }) =>\n    ribbonPosition === \"right\"\n      ? \"translateX(30%) translateY(0%) rotate(45deg)\"\n      : \"translateX(0%) translateY(200%) rotate(-45deg)\"};\n  transform-origin: top left;\n  width: 96px;\n\n  &:before,\n  &:after {\n    background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n    content: \"\";\n    height: 100%;\n    margin: 0 -1px; /* Removes tiny gap */\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n\n  &:before {\n    right: 100%;\n  }\n\n  &:after {\n    left: 100%;\n  }\n\n  & > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 96px;\n  }\n`;\n\nconst CardRibbon: React.FC<CardRibbonProps> = ({ variantColor, text, ribbonPosition, ...props }) => {\n  return (\n    <StyledCardRibbon variantColor={variantColor} ribbonPosition={ribbonPosition} {...props}>\n      <div title={text}>{text}</div>\n    </StyledCardRibbon>\n  );\n};\n\nCardRibbon.defaultProps = {\n  // eslint-disable-next-line react/default-props-match-prop-types\n  ribbonPosition: \"right\",\n};\n\nexport default CardRibbon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M11 5V16.17L6.11997 11.29C5.72997 10.9 5.08997 10.9 4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7L11.29 19.29C11.68 19.68 12.31 19.68 12.7 19.29L19.29 12.7C19.68 12.31 19.68 11.68 19.29 11.29C18.9 10.9 18.27 10.9 17.88 11.29L13 16.17V5C13 4.45 12.55 4 12 4C11.45 4 11 4.45 11 5Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M13 19V7.83001L17.88 12.71C18.27 13.1 18.91 13.1 19.3 12.71C19.69 12.32 19.69 11.69 19.3 11.3L12.71 4.71001C12.32 4.32001 11.69 4.32001 11.3 4.71001L4.69997 11.29C4.30997 11.68 4.30997 12.31 4.69997 12.7C5.08997 13.09 5.71997 13.09 6.10997 12.7L11 7.83001V19C11 19.55 11.45 20 12 20C12.55 20 13 19.55 13 19Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M12 6V7.79C12 8.24 12.54 8.46 12.85 8.14L15.64 5.35C15.84 5.15 15.84 4.84 15.64 4.64L12.85 1.85C12.54 1.54 12 1.76 12 2.21V4C7.58 4 4 7.58 4 12C4 13.04 4.2 14.04 4.57 14.95C4.84 15.62 5.7 15.8 6.21 15.29C6.48 15.02 6.59 14.61 6.44 14.25C6.15 13.56 6 12.79 6 12C6 8.69 8.69 6 12 6ZM17.79 8.71C17.52 8.98 17.41 9.4 17.56 9.75C17.84 10.45 18 11.21 18 12C18 15.31 15.31 18 12 18V16.21C12 15.76 11.46 15.54 11.15 15.86L8.36 18.65C8.16 18.85 8.16 19.16 8.36 19.36L11.15 22.15C11.46 22.46 12 22.24 12 21.8V20C16.42 20 20 16.42 20 12C20 10.96 19.8 9.96 19.43 9.05C19.16 8.38 18.3 8.2 17.79 8.71Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M9.29006 15.88L13.1701 12L9.29006 8.12001C8.90006 7.73001 8.90006 7.10001 9.29006 6.71001C9.68006 6.32001 10.3101 6.32001 10.7001 6.71001L15.2901 11.3C15.6801 11.69 15.6801 12.32 15.2901 12.71L10.7001 17.3C10.3101 17.69 9.68006 17.69 9.29006 17.3C8.91006 16.91 8.90006 16.27 9.29006 15.88Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport { typography, TypographyProps } from \"styled-system\";\n\nexport const Td = styled.td<TypographyProps>`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 16px;\n  vertical-align: middle;\n\n  ${typography}\n`;\n\nexport const Th = styled(Td).attrs({ as: \"th\" })`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 12px;\n  text-transform: uppercase;\n`;\n","import styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { Td } from \"./Cell\";\n\nconst Table = styled.table`\n  max-width: 100%;\n  width: 100%;\n\n  tbody tr:last-child {\n    ${Td} {\n      border-bottom: 0;\n    }\n  }\n\n  ${space}\n`;\n\nexport default Table;\n","import { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps extends BoxProps {\n  options: OptionProps[]\n  onOptionChange?: (option: OptionProps) => void\n  placeHolderText?: string\n  defaultOptionIndex?: number\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({\n  options,\n  onOptionChange,\n  defaultOptionIndex = 0,\n  placeHolderText,\n  ...props\n}) => {\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [optionSelected, setOptionSelected] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\n\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\n    setIsOpen(!isOpen)\n    event.stopPropagation()\n  }\n\n  const onOptionClicked = (selectedIndex: number) => () => {\n    setSelectedOptionIndex(selectedIndex)\n    setIsOpen(false)\n    setOptionSelected(true)\n\n    if (onOptionChange) {\n      onOptionChange(options[selectedIndex])\n    }\n  }\n\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setIsOpen(false)\n    }\n\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} {...props}>\n      <DropDownHeader onClick={toggling}>\n        <Text color={!optionSelected && placeHolderText ? 'text' : undefined}>\n          {!optionSelected && placeHolderText ? placeHolderText : options[selectedOptionIndex].label}\n        </Text>\n      </DropDownHeader>\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option, index) =>\n            placeHolderText || index !== selectedOptionIndex ? (\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport NextLink from 'next/link'\nimport { Box, Breadcrumbs, Text, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Crumbs = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"24px\">\n      <Breadcrumbs>\n        <NextLink href=\"/\" passHref>\n          <Link>{t('Home')}</Link>\n        </NextLink>\n        <NextLink href=\"/prediction\" passHref>\n          <Link>{t('Prediction')}</Link>\n        </NextLink>\n        <Text>{t('Leaderboard')}</Text>\n      </Breadcrumbs>\n    </Box>\n  )\n}\n\nexport default Crumbs\n","import { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PageHeader from 'components/PageHeader'\nimport Crumbs from './Crumbs'\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <PageHeader>\n      <Crumbs />\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n        {t('Leaderboard')}\n      </Heading>\n    </PageHeader>\n  )\n}\n\nexport default Hero\n","import { Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nexport const Row: React.FC<FlexProps> = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\ninterface NetWinningsProps extends FlexProps {\n  amount: number\n  textPrefix?: string\n  textColor?: string\n}\n\nexport const NetWinnings: React.FC<NetWinningsProps> = ({ amount, textPrefix = '', textColor = 'text', ...props }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  const value = multiplyPriceByAmount(bnbBusdPrice, Math.abs(amount))\n\n  if (!amount) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\" {...props}>\n      <Text fontWeight=\"bold\" color={textColor}>\n        {`${textPrefix}${amount.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 6 })}`}\n      </Text>\n      <Text fontSize=\"12px\" color=\"textSubtle\" lineHeight={1}>\n        {`~$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n      </Text>\n    </Flex>\n  )\n}\n\nexport const NetWinningsRow: React.FC<{ amount: number }> = ({ amount }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row mb=\"4px\">\n      <Text fontSize=\"12px\" color=\"textSubtle\">\n        {t('Net Winnings (BNB)')}\n      </Text>\n      <NetWinnings amount={amount} textPrefix={amount > 0 ? '+' : ''} textColor={amount > 0 ? 'success' : 'failure'} />\n    </Row>\n  )\n}\n","import styled from 'styled-components'\nimport { ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PositionLabelProps {\n  position: BetPosition\n}\n\nconst StyledPositionLabel = styled.div<{ bgColor: string }>`\n  align-items: center;\n  background-color: ${({ theme, bgColor }) => theme.colors[bgColor]};\n  border-radius: 4px;\n  display: inline-flex;\n  justify-content: center;\n  height: 32px;\n  min-width: 16px;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst Label = styled.div`\n  color: #fff;\n  display: none;\n  text-transform: uppercase;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    margin-left: 4px;\n  }\n`\n\nconst PositionLabel: React.FC<PositionLabelProps> = ({ position }) => {\n  const { t } = useTranslation()\n  const isBull = position === BetPosition.BULL\n  const bgColor = isBull ? 'success' : 'failure'\n  const icon = isBull ? <ArrowUpIcon width=\"24px\" color=\"white\" /> : <ArrowDownIcon width=\"24px\" color=\"white\" />\n\n  return (\n    <StyledPositionLabel bgColor={bgColor}>\n      {icon}\n      <Label>{isBull ? t('Up') : t('Down')}</Label>\n    </StyledPositionLabel>\n  )\n}\n\nexport default PositionLabel\n","import { useEffect, useState } from 'react'\nimport times from 'lodash/times'\nimport orderBy from 'lodash/orderBy'\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\nimport { Bet } from 'state/types'\nimport PositionLabel from './PositionLabel'\nimport { NetWinnings } from './Results/styles'\n\ninterface PreviousBetsTableProps {\n  numberOfBets?: number\n  account: string\n}\n\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [bets, setBets] = useState<Bet[]>([])\n  const { t } = useTranslation()\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\n\n  useEffect(() => {\n    const fetchBetHistory = async () => {\n      setIsFetching(true)\n      try {\n        const response = await getBetHistory(\n          {\n            user: account.toLowerCase(),\n          },\n          numberOfBets,\n        )\n\n        setBets(response.map(transformBetResponse))\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    fetchBetHistory()\n  }, [account, numberOfBets, setIsFetching, setBets])\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>{t('Round')}</Th>\n          <Th>{t('Direction')}</Th>\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {isFetching\n          ? times(numberOfBets).map((num) => (\n              <tr key={num}>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"60px\" height=\"32px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n              </tr>\n            ))\n          : orderedBets.map((bet) => {\n              const isCancelled = bet.round.failed\n              const isWinner = bet.position === bet.round.position\n\n              return (\n                <tr key={bet.id}>\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\n                    {bet.round.epoch.toLocaleString()}\n                  </Td>\n                  <Td textAlign=\"center\">\n                    <PositionLabel position={bet.position} />\n                  </Td>\n                  <Td textAlign=\"right\">\n                    <NetWinnings\n                      amount={!isCancelled && isWinner ? bet.claimedNetBNB : bet.amount}\n                      textPrefix={isCancelled ? '' : isWinner ? '+' : '-'}\n                      textColor={isCancelled ? 'textSubtle' : isWinner ? 'success' : 'failure'}\n                    />\n                  </Td>\n                </tr>\n              )\n            })}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default PreviousBetsTable\n","import { useState } from 'react'\nimport { Flex, Text, ChevronUpIcon, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from './PreviousBetsTable'\n\ninterface MobileBetsTableProps {\n  account: string\n}\n\nconst MobileBetsTable: React.FC<MobileBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleToggle = () => setIsOpen(!isOpen)\n\n  return (\n    <>\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        px=\"24px\"\n        py=\"32px\"\n        borderBottom=\"1px solid\"\n        borderColor=\"cardBorder\"\n        style={{ cursor: 'pointer' }}\n        onClick={handleToggle}\n      >\n        <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\">\n          {t('Last %num% Bets', { num: 5 })}\n        </Text>\n        {isOpen ? <ChevronDownIcon /> : <ChevronUpIcon />}\n      </Flex>\n      {isOpen && <PreviousBetsTable account={account} />}\n    </>\n  )\n}\n\nexport default MobileBetsTable\n","import { Box, Card, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from '../PreviousBetsTable'\n\ninterface DesktopBetsTableProps {\n  account: string\n}\n\nconst DesktopBetsTable: React.FC<DesktopBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Box p=\"24px\">\n      <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\" mb=\"16px\">\n        {t('Last %num% Bets', { num: 5 })}\n      </Text>\n      <Card>\n        <PreviousBetsTable account={account} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default DesktopBetsTable\n","import {\n  Box,\n  CloseIcon,\n  Flex,\n  Grid,\n  Text,\n  IconButton,\n  InjectedModalProps,\n  LinkExternal,\n  ModalContainer,\n  ModalHeader,\n  ProfileAvatar,\n  useMatchBreakpoints,\n  Skeleton,\n  Heading,\n} from '@pancakeswap/uikit'\nimport { useProfileForAddress } from 'state/profile/hooks'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport {\n  useGetOrFetchLeaderboardAddressResult,\n  useGetLeaderboardLoadingState,\n  useGetSelectedAddress,\n} from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { FetchStatus } from 'config/constants/types'\nimport { NetWinnings } from './Results/styles'\nimport MobileBetsTable from './MobileBetsTable'\nimport DesktopBetsTable from './Results/DesktopBetsTable'\n\ninterface WalletStatsModalProps extends InjectedModalProps {\n  account?: string\n  onBeforeDismiss?: () => void\n}\n\nconst ExternalLink = styled(LinkExternal)`\n  color: ${({ theme }) => theme.colors.text};\n\n  svg {\n    fill: ${({ theme }) => theme.colors.text};\n  }\n`\n\nconst WalletStatsModal: React.FC<WalletStatsModalProps> = ({ account, onDismiss, onBeforeDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const selectedAddress = useGetSelectedAddress()\n  const address = account || selectedAddress\n  const result = useGetOrFetchLeaderboardAddressResult(address)\n  const { profile } = useProfileForAddress(address)\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === FetchStatus.Fetching\n  const { isDesktop } = useMatchBreakpoints()\n\n  const handleDismiss = () => {\n    if (onBeforeDismiss) {\n      onBeforeDismiss()\n    }\n\n    onDismiss?.()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalHeader background={theme.colors.gradients.bubblegum}>\n        <Flex alignItems=\"center\" style={{ flex: 1 }}>\n          <Box width={['64px', null, null, null, null, null, '96px']} mr=\"16px\">\n            <ProfileAvatar src={profile?.nft?.image?.thumbnail} height={96} width={96} />\n          </Box>\n          <Box>\n            {profile?.username && (\n              <Heading scale=\"lg\" mb=\"8px\">\n                {profile?.username}\n              </Heading>\n            )}\n            <ExternalLink href={getBscScanLink(address, 'address')}>{truncateHash(address)}</ExternalLink>\n          </Box>\n        </Flex>\n        <IconButton variant=\"text\" onClick={handleDismiss} aria-label=\"Close the dialog\">\n          <CloseIcon color=\"text\" width=\"24px\" />\n        </IconButton>\n      </ModalHeader>\n      {result === null ? (\n        <Text p=\"32px\" textAlign=\"center\" fontWeight=\"bold\">\n          {t('No results found.')}\n        </Text>\n      ) : (\n        <Box maxHeight={['500px', null, null, null, null, null, 'none']} overflowY=\"auto\">\n          <Grid\n            gridTemplateColumns={['1fr', null, null, null, null, null, 'repeat(4, 1fr)']}\n            gridGap=\"16px\"\n            p=\"24px\"\n            borderBottom=\"1px solid\"\n            borderColor=\"cardBorder\"\n          >\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Net Winnings')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <NetWinnings\n                  amount={result?.netBNB}\n                  textPrefix={result?.netBNB > 0 ? '+' : ''}\n                  textColor={result?.netBNB > 0 ? 'success' : 'failure'}\n                  alignItems=\"flex-end\"\n                />\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Win Rate')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <Text fontWeight=\"bold\">{`${result?.winRate?.toLocaleString(undefined, {\n                  minimumFractionDigits: 0,\n                  maximumFractionDigits: 2,\n                })}%`}</Text>\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Won')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBetsClaimed?.toLocaleString()}</Text>}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Played')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBets?.toLocaleString()}</Text>}\n            </Box>\n          </Grid>\n          {isDesktop ? <DesktopBetsTable account={address} /> : <MobileBetsTable account={address} />}\n        </Box>\n      )}\n    </ModalContainer>\n  )\n}\n\nexport default WalletStatsModal\n","import { Box, Flex, FlexProps, Link, ProfileAvatar, SubMenu, SubMenuItem, useModal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport { PredictionUser } from 'state/types'\nimport { useProfileForAddress } from 'state/profile/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\n\ninterface ResultAvatarProps extends FlexProps {\n  user: PredictionUser\n}\n\nconst AvatarWrapper = styled(Box)`\n  order: 2;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    margin-left: 0;\n    margin-right: 8px;\n  }\n`\n\nconst UsernameWrapper = styled(Box)`\n  order: 1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n  }\n`\n\nconst ResultAvatar: React.FC<ResultAvatarProps> = ({ user, ...props }) => {\n  const { t } = useTranslation()\n  const { profile } = useProfileForAddress(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <SubMenu\n      component={\n        <Flex alignItems=\"center\" {...props}>\n          <UsernameWrapper>\n            <Text color=\"primary\" fontWeight=\"bold\">\n              {profile?.username || truncateHash(user.id)}\n            </Text>{' '}\n          </UsernameWrapper>\n          <AvatarWrapper\n            width={['32px', null, null, null, null, '40px']}\n            height={['32px', null, null, null, null, '40px']}\n          >\n            <ProfileAvatar src={profile?.nft?.image?.thumbnail} height={40} width={40} />\n          </AvatarWrapper>\n        </Flex>\n      }\n      options={{ placement: 'bottom-start' }}\n    >\n      <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n      <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n        {t('View on BscScan')}\n      </SubMenuItem>\n    </SubMenu>\n  )\n}\n\nexport default ResultAvatar\n","import { Td, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport ResultAvatar from './ResultAvatar'\nimport { NetWinnings } from './styles'\n\ninterface DesktopRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst DesktopRow: React.FC<DesktopRowProps> = ({ rank, user, ...props }) => (\n  <tr {...props}>\n    {rank ? (\n      <Td>\n        <Text textAlign=\"center\" fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text>\n      </Td>\n    ) : (\n      <Td />\n    )}\n    <Td>\n      <ResultAvatar user={user} />\n    </Td>\n    <Td>\n      <NetWinnings\n        amount={user.netBNB}\n        textPrefix={user.netBNB > 0 ? '+' : ''}\n        textColor={user.netBNB > 0 ? 'success' : 'failure'}\n      />\n    </Td>\n    <Td textAlign=\"center\">\n      {`${user.winRate.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 2,\n      })}%`}\n    </Td>\n    <Td textAlign=\"center\">\n      <strong>{user.totalBetsClaimed.toLocaleString()}</strong>\n    </Td>\n    <Td textAlign=\"center\">{user.totalBets.toLocaleString()}</Td>\n  </tr>\n)\n\nexport default DesktopRow\n","import { Card, Table, Th } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\nimport DesktopRow from './DesktopRow'\n\ninterface DesktopResultsProps {\n  results: PredictionUser[]\n}\n\nconst DesktopResults: React.FC<DesktopResultsProps> = ({ results }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container mb=\"24px\">\n      <Card>\n        <Table>\n          <thead>\n            <tr>\n              <Th width=\"60px\">&nbsp;</Th>\n              <Th textAlign=\"left\">{t('User')}</Th>\n              <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n              <Th>{t('Win Rate')}</Th>\n              <Th>{t('Rounds Won')}</Th>\n              <Th>{t('Rounds Played')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map((result, index) => (\n              <DesktopRow key={result.id} rank={index + 4} user={result} />\n            ))}\n          </tbody>\n        </Table>\n      </Card>\n    </Container>\n  )\n}\n\nexport default DesktopResults\n","import { Box, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { NetWinningsRow, Row } from './styles'\nimport ResultAvatar from './ResultAvatar'\n\ninterface MobileRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst StyledMobileRow = styled(Box)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n\n  &:first-child {\n    border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  }\n`\n\nconst MobileRow: React.FC<MobileRowProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledMobileRow p=\"16px\">\n      <Row mb=\"16px\">\n        {rank ? <Text fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text> : <div />}\n        <ResultAvatar user={user} />\n      </Row>\n      <Row mb=\"4px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Win Rate')}\n        </Text>\n        <Text fontWeight=\"bold\">\n          {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n        </Text>\n      </Row>\n      <NetWinningsRow amount={user.netBNB} />\n      <Row>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Rounds Won')}\n        </Text>\n        <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n      </Row>\n    </StyledMobileRow>\n  )\n}\n\nexport default MobileRow\n","import { Box } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport MobileRow from './MobileRow'\n\ninterface MobileResultsProps {\n  results: PredictionUser[]\n}\n\nconst MobileResults: React.FC<MobileResultsProps> = ({ results }) => {\n  return (\n    <Box mb=\"24px\">\n      {results.map((result, index) => (\n        <MobileRow key={result.id} rank={index + 4} user={result} />\n      ))}\n    </Box>\n  )\n}\n\nexport default MobileResults\n","import {\n  Box,\n  Card,\n  CardBody,\n  CardRibbon,\n  Flex,\n  ProfileAvatar,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  Link,\n  Text,\n  SubMenu,\n  SubMenuItem,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport { useProfileForAddress } from 'state/profile/hooks'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\nimport { NetWinningsRow, Row } from './styles'\n\ninterface RankingCardProps {\n  rank: 1 | 2 | 3\n  user: PredictionUser\n}\n\nconst RotatedLaurelLeftIcon = styled(LaurelLeftIcon)`\n  transform: rotate(30deg);\n`\n\nconst RotatedLaurelRightIcon = styled(LaurelRightIcon)`\n  transform: rotate(-30deg);\n`\n\nconst getRankingColor = (rank: number) => {\n  if (rank === 3) {\n    return 'bronze'\n  }\n\n  if (rank === 2) {\n    return 'silver'\n  }\n\n  return 'gold'\n}\n\nconst RankingCard: React.FC<RankingCardProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n  const rankColor = getRankingColor(rank)\n  const { profile } = useProfileForAddress(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <Card ribbon={<CardRibbon variantColor={rankColor} text={`#${rank}`} ribbonPosition=\"left\" />}>\n      <CardBody p=\"24px\">\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" mb=\"24px\">\n          <SubMenu\n            component={\n              <>\n                <Flex mb=\"4px\">\n                  <RotatedLaurelLeftIcon color={rankColor} width=\"32px\" />\n                  <Box width={['40px', null, null, '64px']} height={['40px', null, null, '64px']}>\n                    <ProfileAvatar src={profile?.nft?.image?.thumbnail} height={64} width={64} />\n                  </Box>\n                  <RotatedLaurelRightIcon color={rankColor} width=\"32px\" />\n                </Flex>\n                <Text color=\"primary\" fontWeight=\"bold\" textAlign=\"center\">\n                  {profile?.username || truncateHash(user.id)}\n                </Text>\n              </>\n            }\n            options={{ placement: 'bottom' }}\n          >\n            <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n            <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n              {t('View on BscScan')}\n            </SubMenuItem>\n          </SubMenu>\n        </Flex>\n        <Row mb=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Win Rate')}\n          </Text>\n          <Text fontWeight=\"bold\">\n            {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n          </Text>\n        </Row>\n        <NetWinningsRow amount={user.netBNB} />\n        <Row>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Rounds Won')}\n          </Text>\n          <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default RankingCard\n","import { Box, Button, Grid, Flex, useMatchBreakpoints, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetLeaderboardHasMoreResults,\n  useGetLeaderboardLoadingState,\n  useGetLeaderboardResults,\n  useGetLeaderboardSkip,\n} from 'state/predictions/hooks'\nimport { filterNextPageLeaderboard } from 'state/predictions'\nimport { LEADERBOARD_RESULTS_PER_PAGE } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport { FetchStatus } from 'config/constants/types'\nimport DesktopResults from './DesktopResults'\nimport MobileResults from './MobileResults'\nimport RankingCard from './RankingCard'\n\nconst Results = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [first, second, third, ...rest] = useGetLeaderboardResults()\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === FetchStatus.Fetching\n  const currentSkip = useGetLeaderboardSkip()\n  const hasMoreResults = useGetLeaderboardHasMoreResults()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    dispatch(filterNextPageLeaderboard(currentSkip + LEADERBOARD_RESULTS_PER_PAGE))\n  }\n\n  return (\n    <Box>\n      <Container mb=\"16px\">\n        <Grid\n          gridGap={['16px', null, null, null, null, '24px']}\n          gridTemplateColumns={['1fr', null, null, null, null, 'repeat(3, 1fr)']}\n        >\n          <RankingCard rank={1} user={first} />\n          <RankingCard rank={2} user={second} />\n          <RankingCard rank={3} user={third} />\n        </Grid>\n      </Container>\n      {isDesktop ? <DesktopResults results={rest} /> : <MobileResults results={rest} />}\n      <Flex mb=\"40px\" justifyContent=\"center\">\n        {hasMoreResults && (\n          <Button\n            variant=\"secondary\"\n            isLoading={isLoading}\n            endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            onClick={handleClick}\n          >\n            {isLoading ? t('Loading...') : t('View More')}\n          </Button>\n        )}\n      </Flex>\n    </Box>\n  )\n}\n\nexport default Results\n","import { useEffect } from 'react'\nimport { Card, Heading, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { fetchAddressResult } from 'state/predictions'\nimport { useGetOrFetchLeaderboardAddressResult } from 'state/predictions/hooks'\nimport DesktopRow from './DesktopRow'\nimport MobileRow from './MobileRow'\n\nconst ConnectedWalletResult = () => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const accountResult = useGetOrFetchLeaderboardAddressResult(account)\n  const { isDesktop } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [account, dispatch])\n\n  if (!account || !accountResult) {\n    return null\n  }\n\n  return (\n    <Container mb=\"48px\">\n      <Heading as=\"h2\" scale=\"md\" color=\"secondary\" mb=\"16px\">\n        {t('My Rankings')}\n      </Heading>\n      {isDesktop ? (\n        <Card isActive>\n          <Table>\n            <thead>\n              <tr>\n                <Th width=\"60px\">&nbsp;</Th>\n                <Th textAlign=\"left\">&nbsp;</Th>\n                <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n                <Th textAlign=\"center\">{t('Win Rate')}</Th>\n                <Th>{t('Rounds Won')}</Th>\n                <Th>{t('Rounds Played')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              <DesktopRow user={accountResult} />\n            </tbody>\n          </Table>\n        </Card>\n      ) : (\n        <Card isActive>\n          <MobileRow user={accountResult} />\n        </Card>\n      )}\n    </Container>\n  )\n}\n\nexport default ConnectedWalletResult\n","import { useCallback } from 'react'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchAddressResult, setSelectedAddress } from 'state/predictions'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport WalletStatsModal from './WalletStatsModal'\n\nconst AddressSearch = () => {\n  const dispatch = useAppDispatch()\n\n  const handleBeforeDismiss = () => {\n    dispatch(setSelectedAddress(null))\n  }\n\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal onBeforeDismiss={handleBeforeDismiss} />)\n  const handleValidAddress = useCallback(\n    async (value: string) => {\n      const response: any = await dispatch(fetchAddressResult(value))\n      return response.payload?.data !== undefined\n    },\n    [dispatch],\n  )\n\n  const handleAddressClick = async (value: string) => {\n    await dispatch(setSelectedAddress(value))\n    onPresentWalletStatsModal()\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} onValidAddress={handleValidAddress} />\n}\n\nexport default AddressSearch\n","import styled from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setLeaderboardFilter } from 'state/predictions'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Container from 'components/Layout/Container'\nimport AddressSearch from '../AddressSearch'\n\nconst SearchWrapper = styled(Box)`\n  margin-bottom: 8px;\n  order: 1;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 0;\n    order: 2;\n    width: 320px;\n  }\n`\nconst FilterWrapper = styled(Box)`\n  order: 2;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    width: auto;\n  }\n`\n\nconst Filters = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const orderByOptions = [\n    { label: t('Net Winnings'), value: 'netBNB' },\n    { label: t('Total BNB'), value: 'totalBNB' },\n    { label: t('Rounds Played'), value: 'totalBets' },\n    { label: t('Win Rate'), value: 'winRate' },\n  ]\n\n  const handleOrderBy = (option: OptionProps) => {\n    dispatch(setLeaderboardFilter({ orderBy: option.value }))\n  }\n\n  return (\n    <Container py=\"32px\">\n      <Text textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"4px\">\n        {t('Rank By')}\n      </Text>\n      <Flex\n        flexDirection={['column', null, null, null, null, 'row']}\n        alignItems={['start', null, null, null, null, 'center']}\n        justifyContent={['start', null, null, null, null, 'space-between']}\n      >\n        <FilterWrapper>\n          <Select options={orderByOptions} onOptionChange={handleOrderBy} />\n        </FilterWrapper>\n        <SearchWrapper>\n          <AddressSearch />\n        </SearchWrapper>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Filters\n","import PredictionsLeaderboard from '../../views/Predictions/Leaderboard'\n\nexport default PredictionsLeaderboard\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetLeaderboardFilters, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\nimport { filterLeaderboard } from 'state/predictions'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { PageMeta } from 'components/Layout/Page'\nimport { FetchStatus } from 'config/constants/types'\nimport Hero from './components/Hero'\nimport Results from './components/Results'\nimport ConnectedWalletResult from './components/Results/ConnectedWalletResult'\nimport Filters from './components/Filters'\n\nconst Leaderboard = () => {\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const filters = useGetLeaderboardFilters()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(filterLeaderboard({ filters }))\n  }, [account, filters, dispatch])\n\n  if (leaderboardLoadingState === FetchStatus.Idle) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <PageMeta />\n      <Hero />\n      <Filters />\n      <ConnectedWalletResult />\n      <Results />\n    </>\n  )\n}\n\nexport default Leaderboard\n","import { BigNumber } from '@ethersproject/bignumber'\nimport orderBy from 'lodash/orderBy'\nimport { createSelector } from '@reduxjs/toolkit'\nimport { State, ReduxNodeRound, NodeRound, ReduxNodeLedger, NodeLedger } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nconst selectCurrentEpoch = (state: State) => state.predictions.currentEpoch\nconst selectRounds = (state: State) => state.predictions.rounds\nconst selectLedgers = (state: State) => state.predictions.ledgers\nconst selectClaimableStatuses = (state: State) => state.predictions.claimableStatuses\nconst selectMinBetAmount = (state: State) => state.predictions.minBetAmount\nconst selectIntervalSeconds = (state: State) => state.predictions.intervalSeconds\n\nexport const makeGetBetByEpochSelector = (account: string, epoch: number) =>\n  createSelector([selectLedgers], (bets) => {\n    if (!bets[account]) {\n      return null\n    }\n\n    if (!bets[account][epoch]) {\n      return null\n    }\n\n    return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n  })\n\nexport const makeGetIsClaimableSelector = (epoch: number) =>\n  createSelector([selectClaimableStatuses], (claimableStatuses) => {\n    return claimableStatuses[epoch] || false\n  })\n\nexport const getRoundsByCloseOracleIdSelector = createSelector([selectRounds], (rounds) => {\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    const parsed = parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch])\n    return {\n      ...accum,\n      [parsed.closeOracleId]: parsed,\n    }\n  }, {}) as { [key: string]: NodeRound }\n})\n\nexport const getBigNumberRounds = createSelector([selectRounds], (rounds) => {\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n})\n\nexport const getSortedRoundsSelector = createSelector([getBigNumberRounds], (rounds) => {\n  return orderBy(Object.values(rounds), ['epoch'], ['asc'])\n})\n\nexport const getSortedRoundsCurrentEpochSelector = createSelector(\n  [selectCurrentEpoch, getSortedRoundsSelector],\n  (currentEpoch, sortedRounds) => {\n    return {\n      currentEpoch,\n      rounds: sortedRounds,\n    }\n  },\n)\n\nexport const getMinBetAmountSelector = createSelector([selectMinBetAmount], BigNumber.from)\n\nexport const getCurrentRoundCloseTimestampSelector = createSelector(\n  [selectCurrentEpoch, getBigNumberRounds, selectIntervalSeconds],\n  (currentEpoch, rounds, intervalSeconds) => {\n    if (!currentEpoch) {\n      return undefined\n    }\n\n    const currentRound = rounds[currentEpoch - 1]\n\n    if (!currentRound) {\n      return undefined\n    }\n\n    if (!currentRound.closeTimestamp) {\n      return currentRound.lockTimestamp + intervalSeconds\n    }\n    return currentRound.closeTimestamp\n  },\n)\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { State } from '../types'\nimport { fetchAddressResult } from '.'\nimport {\n  getRoundsByCloseOracleIdSelector,\n  getSortedRoundsSelector,\n  makeGetBetByEpochSelector,\n  makeGetIsClaimableSelector,\n  getMinBetAmountSelector,\n  getSortedRoundsCurrentEpochSelector,\n  getCurrentRoundCloseTimestampSelector,\n} from './selectors'\n\nexport const useGetRoundsByCloseOracleId = () => {\n  return useSelector(getRoundsByCloseOracleIdSelector)\n}\n\nexport const useGetSortedRounds = () => {\n  return useSelector(getSortedRoundsSelector)\n}\n\nexport const useGetSortedRoundsCurrentEpoch = () => {\n  return useSelector(getSortedRoundsCurrentEpochSelector)\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const getBetByEpochSelector = useMemo(() => makeGetBetByEpochSelector(account, epoch), [account, epoch])\n  return useSelector(getBetByEpochSelector)\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const getIsClaimableSelector = useMemo(() => makeGetIsClaimableSelector(epoch), [epoch])\n  return useSelector(getIsClaimableSelector)\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useChartView = () => {\n  return useSelector((state: State) => state.predictions.chartView)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  return useSelector(getMinBetAmountSelector)\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundCloseTimestamp = () => {\n  return useSelector(getCurrentRoundCloseTimestampSelector)\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\n}\n"],"names":["window","__NEXT_P","push","options","component","children","isOpen","useState","placement","offset","padding","left","right","toggle","setIsMenuOpen","prev","useEffect","handleClickOutside","target","Node","menuElement","targetElement","contains","document","addEventListener","removeEventListener","usePopper","modifiers","name","styles","attributes","menu","div","ref","setMenuElement","style","popper","open","close","portal","getPortalRoot","renderMenu","createPortal","ClickableElementContainer","setTargetElement","onClick","isMenuOpen","props","BaseMenu","SubMenuContainer","InlineMenuContainer","styled","Box","theme","colors","backgroundAlt","radii","card","shadows","tooltip","Flex","input","default","inputSecondary","SubMenuItem","text","Separator","textDisabled","mediaQueries","sm","md","StyledBreadcrumbs","primary","primaryBright","space","DefaultSeparator","ChevronRightIcon","color","width","separator","items","reduce","accum","item","index","aria-hidden","insertSeparators","Children","filter","child","isValidElement","map","li","StyledCardRibbon","zIndices","ribbon","variantColor","ribbonPosition","CardRibbon","title","defaultProps","Svg","viewBox","path","d","Td","cardBorder","typography","Th","attrs","as","secondary","Table","DropDownHeader","inset","DropDownListContainer","dropdown","DropDownContainer","css","boxShadow","DropDownList","ListItem","onOptionChange","defaultOptionIndex","placeHolderText","dropdownRef","useRef","toggling","event","setIsOpen","stopPropagation","Text","optionSelected","undefined","selectedOptionIndex","label","ArrowDropDownIcon","option","selectedIndex","setSelectedOptionIndex","setOptionSelected","useTranslation","t","mb","Breadcrumbs","NextLink","href","passHref","Link","PageHeader","Crumbs","Heading","scale","Row","alignItems","justifyContent","NetWinnings","amount","textPrefix","textColor","bnbBusdPrice","useBNBBusdPrice","value","multiplyPriceByAmount","Math","abs","flexDirection","fontWeight","toLocaleString","minimumFractionDigits","maximumFractionDigits","fontSize","lineHeight","NetWinningsRow","StyledPositionLabel","bgColor","Label","lg","position","isBull","BetPosition","icon","ArrowUpIcon","ArrowDownIcon","numberOfBets","account","orderedBets","orderBy","bets","fetchBetHistory","response","setIsFetching","getBetHistory","user","toLowerCase","setBets","transformBetResponse","thead","tr","textAlign","tbody","isFetching","times","num","Skeleton","height","bet","isCancelled","round","failed","isWinner","epoch","PositionLabel","claimedNetBNB","id","px","py","borderBottom","borderColor","cursor","textTransform","ChevronDownIcon","ChevronUpIcon","PreviousBetsTable","p","Card","ExternalLink","LinkExternal","profile","result","onDismiss","onBeforeDismiss","useTheme","selectedAddress","useGetSelectedAddress","address","useGetOrFetchLeaderboardAddressResult","useProfileForAddress","isLoading","useGetLeaderboardLoadingState","FetchStatus","useMatchBreakpoints","isDesktop","ModalContainer","minWidth","ModalHeader","background","gradients","bubblegum","flex","mr","ProfileAvatar","src","nft","image","thumbnail","username","getBscScanLink","truncateHash","IconButton","variant","aria-label","CloseIcon","maxHeight","overflowY","Grid","gridTemplateColumns","gridGap","netBNB","winRate","totalBetsClaimed","totalBets","DesktopBetsTable","MobileBetsTable","AvatarWrapper","UsernameWrapper","onPresentWalletStatsModal","useModal","WalletStatsModal","SubMenu","bold","external","rank","ResultAvatar","strong","results","Container","DesktopRow","StyledMobileRow","MobileRow","RotatedLaurelLeftIcon","LaurelLeftIcon","RotatedLaurelRightIcon","LaurelRightIcon","rankColor","getRankingColor","CardBody","useGetLeaderboardResults","first","second","third","currentSkip","useGetLeaderboardSkip","hasMoreResults","useGetLeaderboardHasMoreResults","dispatch","useAppDispatch","RankingCard","DesktopResults","rest","MobileResults","Button","endIcon","AutoRenewIcon","spin","filterNextPageLeaderboard","LEADERBOARD_RESULTS_PER_PAGE","useWeb3React","accountResult","fetchAddressResult","isActive","setSelectedAddress","handleValidAddress","useCallback","payload","data","handleAddressClick","AddressInputSelect","onAddressClick","onValidAddress","SearchWrapper","FilterWrapper","orderByOptions","Select","setLeaderboardFilter","AddressSearch","leaderboardLoadingState","filters","useGetLeaderboardFilters","filterLeaderboard","PageLoader","PageMeta","Hero","Filters","ConnectedWalletResult","Results","selectCurrentEpoch","state","predictions","currentEpoch","selectRounds","rounds","selectLedgers","ledgers","selectClaimableStatuses","claimableStatuses","getRoundsByCloseOracleIdSelector","createSelector","Object","keys","parsed","parseBigNumberObj","closeOracleId","getBigNumberRounds","getSortedRoundsSelector","values","getSortedRoundsCurrentEpochSelector","sortedRounds","getMinBetAmountSelector","minBetAmount","BigNumber","getCurrentRoundCloseTimestampSelector","intervalSeconds","currentRound","closeTimestamp","lockTimestamp","useGetRoundsByCloseOracleId","useSelector","useGetSortedRounds","useGetSortedRoundsCurrentEpoch","useGetBetByEpoch","getBetByEpochSelector","useMemo","makeGetBetByEpochSelector","useGetIsClaimable","getIsClaimableSelector","makeGetIsClaimableSelector","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useChartView","chartView","useGetCurrentEpoch","useGetIntervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetMinBetAmount","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetCurrentRoundCloseTimestamp","leaderboard","loadingState","skip","addressResult","addressResults","useGetAddressResult","isAddress"],"sourceRoot":""}