{"version":3,"file":"static/chunks/pages/lottery-07fda379ca4fa447.js","mappings":"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","sources":["webpack://_N_E/?2818","webpack://_N_E/./packages/uikit/src/components/Card/CardRibbon.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/Prize.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/Wait.tsx","webpack://_N_E/./packages/uikit/src/components/Text/TooltipText.tsx","webpack://_N_E/./src/hooks/usePreviousValue.ts","webpack://_N_E/./src/state/lottery/selectors.ts","webpack://_N_E/./src/state/lottery/hooks.ts","webpack://_N_E/./src/views/Lottery/hooks/useGetNextLotteryEvent.ts","webpack://_N_E/./src/views/Lottery/hooks/useStatusTransitions.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/Ticket.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/PresentWon.tsx","webpack://_N_E/./src/state/lottery/fetchUnclaimedUserRewards.ts","webpack://_N_E/./src/views/Lottery/helpers.tsx","webpack://_N_E/./src/views/Lottery/svgs/WhiteBunny.tsx","webpack://_N_E/./src/views/Lottery/svgs/Balls.tsx","webpack://_N_E/./src/views/Lottery/components/WinningNumbers.tsx","webpack://_N_E/./src/views/Lottery/components/TicketNumber.tsx","webpack://_N_E/./src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx","webpack://_N_E/./src/views/Lottery/components/ClaimPrizesModal/index.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/PreviousRoundTicketsInner.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/NumTicketsToBuyButton.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/TicketInput.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/EditNumbersModal.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/generateTicketNumbers.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsButton.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/CurrentRoundTicketsInner.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/index.tsx","webpack://_N_E/./src/views/Lottery/components/RewardBracketDetail.tsx","webpack://_N_E/./src/views/Lottery/components/RewardBrackets.tsx","webpack://_N_E/./src/views/Lottery/components/NextDrawCard.tsx","webpack://_N_E/./src/views/Lottery/components/Countdown/Timer.tsx","webpack://_N_E/./src/views/Lottery/hooks/useNextEventCountdown.ts","webpack://_N_E/./src/views/Lottery/components/Countdown/index.tsx","webpack://_N_E/./src/views/Lottery/components/HistoryTabMenu.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/SmallDot.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/FinishedRoundRow.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/FinishedRoundTable.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/Body.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/Footer.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/index.tsx","webpack://_N_E/./src/views/Lottery/components/AllHistoryCard/RoundSwitcher.tsx","webpack://_N_E/./src/views/Lottery/components/AllHistoryCard/index.tsx","webpack://_N_E/./src/views/Lottery/hooks/useGetUnclaimedRewards.ts","webpack://_N_E/./src/views/Lottery/components/CheckPrizesSection.tsx","webpack://_N_E/./src/views/Lottery/hooks/useShowMoreUserRounds.ts","webpack://_N_E/./src/views/Lottery/index.tsx","webpack://_N_E/./src/views/Lottery/pageSectionStyles.tsx","webpack://_N_E/./src/pages/lottery.tsx","webpack://_N_E/./src/utils/calls/estimateGas.ts","webpack://_N_E/./src/utils/calls/farms.ts","webpack://_N_E/./src/utils/calls/pools.ts","webpack://_N_E/./src/utils/getGasPrice.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/lottery\",\n      function () {\n        return require(\"private-next-pages/lottery.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/lottery\"])\n      });\n    }\n  ","import React from \"react\";\nimport styled, { DefaultTheme } from \"styled-components\";\nimport { CardRibbonProps } from \"./types\";\n\ninterface StyledCardRibbonProps extends CardRibbonProps {\n  theme: DefaultTheme;\n}\n\nconst StyledCardRibbon = styled.div<Partial<StyledCardRibbonProps>>`\n  z-index: ${({ theme }) => theme.zIndices.ribbon};\n  background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n  color: white;\n  margin: 0;\n  padding: 0;\n  padding: 8px 0;\n  position: absolute;\n  right: ${({ ribbonPosition }) => (ribbonPosition === \"right\" ? 0 : \"auto\")};\n  top: 0;\n  text-align: center;\n  transform: translateX(30%) translateY(0%) rotate(45deg);\n  transform: ${({ ribbonPosition }) =>\n    ribbonPosition === \"right\"\n      ? \"translateX(30%) translateY(0%) rotate(45deg)\"\n      : \"translateX(0%) translateY(200%) rotate(-45deg)\"};\n  transform-origin: top left;\n  width: 96px;\n\n  &:before,\n  &:after {\n    background-color: ${({ variantColor = \"secondary\", theme }) => theme.colors[variantColor]};\n    content: \"\";\n    height: 100%;\n    margin: 0 -1px; /* Removes tiny gap */\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n\n  &:before {\n    right: 100%;\n  }\n\n  &:after {\n    left: 100%;\n  }\n\n  & > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 96px;\n  }\n`;\n\nconst CardRibbon: React.FC<CardRibbonProps> = ({ variantColor, text, ribbonPosition, ...props }) => {\n  return (\n    <StyledCardRibbon variantColor={variantColor} ribbonPosition={ribbonPosition} {...props}>\n      <div title={text}>{text}</div>\n    </StyledCardRibbon>\n  );\n};\n\nCardRibbon.defaultProps = {\n  // eslint-disable-next-line react/default-props-match-prop-types\n  ribbonPosition: \"right\",\n};\n\nexport default CardRibbon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 48 48\" {...props}>\n      <path d=\"M38 10H34C34 7.79086 32.2091 6 30 6H18C15.7909 6 14 7.79086 14 10H10C7.8 10 6 11.8 6 14V16C6 21.1 9.84 25.26 14.78 25.88C16.04 28.88 18.74 31.14 22 31.8V38H16C14.8954 38 14 38.8954 14 40C14 41.1046 14.8954 42 16 42H32C33.1046 42 34 41.1046 34 40C34 38.8954 33.1046 38 32 38H26V31.8C29.26 31.14 31.96 28.88 33.22 25.88C38.16 25.26 42 21.1 42 16V14C42 11.8 40.2 10 38 10ZM10 16V14H14V21.64C11.68 20.8 10 18.6 10 16ZM24 28C20.7 28 18 25.3 18 22V10H30V22C30 25.3 27.3 28 24 28ZM38 16C38 18.6 36.32 20.8 34 21.64V14H38V16Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path d=\"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM12.5 7.75C12.5 7.33579 12.1642 7 11.75 7C11.3358 7 11 7.33579 11 7.75V13L15.5537 15.8022C15.9106 16.0219 16.3781 15.9106 16.5978 15.5537C16.8192 15.1938 16.7041 14.7225 16.3419 14.5051L12.5 12.2V7.75Z\" />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from \"styled-components\";\nimport Text from \"./Text\";\n\nconst TooltipText = styled(Text)`\n  text-decoration: ${({ theme }) => `underline dotted ${theme.colors.textSubtle}`};\n  text-underline-offset: 0.1em;\n`;\n\nexport default TooltipText;\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import BigNumber from 'bignumber.js'\nimport { createSelector } from '@reduxjs/toolkit'\nimport { State } from '../types'\n\nconst selectCurrentLotteryId = (state: State) => state.lottery.currentLotteryId\nconst selectIsTransitioning = (state: State) => state.lottery.isTransitioning\nconst selectCurrentRound = (state: State) => state.lottery.currentRound\nconst selectUserLotteryData = (state: State) => state.lottery.userLotteryData\nconst selectLotteriesData = (state: State) => state.lottery.lotteriesData\nconst selectMaxNumberTicketsPerBuyOrClaim = (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim\n\nexport const makeLotteryGraphDataByIdSelector = (lotteryId: string) =>\n  createSelector([selectLotteriesData], (lotteriesData) => lotteriesData?.find((lottery) => lottery.id === lotteryId))\n\nexport const maxNumberTicketsPerBuyOrClaimSelector = createSelector(\n  [selectMaxNumberTicketsPerBuyOrClaim],\n  (maxNumberTicketsPerBuyOrClaimAsString) => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\n  },\n)\n\nexport const currentRoundSelector = createSelector([selectCurrentRound], (currentRound) => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = currentRound\n\n  return {\n    ...currentRound,\n    priceTicketInCake: new BigNumber(priceTicketInCakeAsString),\n    discountDivisor: new BigNumber(discountDivisorAsString),\n    amountCollectedInCake: new BigNumber(amountCollectedInCakeAsString),\n  }\n})\n\nexport const lotterySelector = createSelector(\n  [\n    currentRoundSelector,\n    selectIsTransitioning,\n    selectCurrentLotteryId,\n    selectUserLotteryData,\n    selectLotteriesData,\n    maxNumberTicketsPerBuyOrClaimSelector,\n  ],\n  (\n    processedCurrentRound,\n    isTransitioning,\n    currentLotteryId,\n    userLotteryData,\n    lotteriesData,\n    maxNumberTicketsPerBuyOrClaim,\n  ) => {\n    return {\n      currentLotteryId,\n      maxNumberTicketsPerBuyOrClaim,\n      isTransitioning,\n      userLotteryData,\n      lotteriesData,\n      currentRound: processedCurrentRound,\n    }\n  },\n)\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector, batch } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { State } from '../types'\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\nimport { makeLotteryGraphDataByIdSelector, lotterySelector } from './selectors'\n\n// Lottery\nexport const useGetCurrentLotteryId = () => {\n  return useSelector((state: State) => state.lottery.currentLotteryId)\n}\n\nexport const useGetUserLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.userLotteryData)\n}\n\nexport const useGetLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.lotteriesData)\n}\n\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\n  const lotteryGraphDataByIdSelector = useMemo(() => makeLotteryGraphDataByIdSelector(lotteryId), [lotteryId])\n  return useSelector(lotteryGraphDataByIdSelector)\n}\n\nexport const useFetchLottery = (fetchPublicDataOnly = false) => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const currentLotteryId = useGetCurrentLotteryId()\n\n  useEffect(() => {\n    // get current lottery ID & max ticket buy\n    dispatch(fetchCurrentLotteryId())\n  }, [dispatch])\n\n  useFastRefreshEffect(() => {\n    if (currentLotteryId) {\n      batch(() => {\n        // Get historical lottery data from nodes +  last 100 subgraph entries\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        // get public data for current lottery\n        dispatch(fetchCurrentLottery({ currentLotteryId }))\n      })\n    }\n  }, [dispatch, currentLotteryId])\n\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId && !fetchPublicDataOnly) {\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, account, fetchPublicDataOnly])\n}\n\nexport const useLottery = () => {\n  return useSelector(lotterySelector)\n}\n","import { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useMemo } from 'react'\n\ninterface LotteryEvent {\n  nextEventTime: number\n  postCountdownText?: string\n  preCountdownText?: string\n}\n\nconst vrfRequestTime = 180 // 3 mins\nconst secondsBetweenRounds = 300 // 5 mins\nconst transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\n\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\n  const { t } = useTranslation()\n  return useMemo(() => {\n    // Current lottery is active\n    if (status === LotteryStatus.OPEN) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer,\n        preCountdownText: null,\n        postCountdownText: t('until the draw'),\n      }\n    }\n    // Current lottery has finished but not yet claimable\n    if (status === LotteryStatus.CLOSE) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\n        preCountdownText: t('Winners announced in'),\n        postCountdownText: null,\n      }\n    }\n    // Current lottery claimable. Next lottery has not yet started\n    if (status === LotteryStatus.CLAIMABLE) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\n        preCountdownText: t('Tickets on sale in'),\n        postCountdownText: null,\n      }\n    }\n    return { nextEventTime: null, preCountdownText: null, postCountdownText: null }\n  }, [endTime, status, t])\n}\n\nexport default useGetNextLotteryEvent\n","import { useWeb3React } from '@web3-react/core'\nimport { LotteryStatus } from 'config/constants/types'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\n\nconst useStatusTransitions = () => {\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const previousStatus = usePreviousValue(status)\n\n  useEffect(() => {\n    // Only run if there is a status state change\n    if (previousStatus !== status && currentLotteryId) {\n      // Current lottery transitions from CLOSE > CLAIMABLE\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n    }\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\n\n  useEffect(() => {\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\n      dispatch(fetchCurrentLotteryId())\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\n      const interval = setInterval(async () => {\n        dispatch(fetchCurrentLotteryId())\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n      }, 10000)\n      return () => clearInterval(interval)\n    }\n    return () => null\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\n}\n\nexport default useStatusTransitions\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 80 80\" {...props}>\n      <path\n        d=\"M76.2856 28.6526C77.0883 29.4553 77.1989 30.7184 76.548 31.6485C64.6385 48.6643 49.9116 63.5221 33.0019 75.5817L31.6665 76.5341C30.6872 77.2325 29.3467 77.121 28.4962 76.2705L22.4847 70.259C26.0334 66.5844 25.9945 60.7286 22.3678 57.1019C18.7411 53.4752 12.8853 53.4362 9.21067 56.985L3.68116 51.4555C2.62962 50.4039 2.77462 48.6597 3.98536 47.7962L5.32156 46.8433C21.8225 35.0751 36.1934 20.5765 47.815 3.97204C48.6291 2.80897 50.296 2.66297 51.2998 3.66682L56.9276 9.29459C53.3922 12.97 53.4356 18.8158 57.0578 22.438C60.6799 26.0601 66.5257 26.1035 70.2011 22.5681L76.2856 28.6526Z\"\n        fill=\"#DBCDF9\"\n      />\n      <path\n        d=\"M78.9507 30.3151L57.459 57.5291L29.6615 78.5708L24.3156 73.1863L22.3868 70.8482L24.3156 68.0575L24.9915 65.2668L24.6194 62.29L23.5031 59.4993L21.6426 57.2668L19.4101 55.7784L16.9915 55.0342H14.0147L10.8519 56.1505L8.99148 57.8249L4.52637 52.4296L11.7898 51.3463C34.3187 47.9863 55.6053 38.8899 73.6048 24.9307L78.9507 30.3151Z\"\n        fill=\"#A28BD4\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M19.7724 70.5193C19.7732 69.7287 20.0885 68.971 20.6487 68.4131L20.6586 68.4032C23.1622 65.8996 23.1622 61.8405 20.6586 59.3369C18.155 56.8333 14.0958 56.8333 11.5922 59.3369L11.5823 59.3468C11.0245 59.907 10.2667 60.2223 9.47617 60.2231C8.68561 60.2239 7.92718 59.9103 7.36817 59.3512L1.57656 53.5596C-0.776282 51.2068 -0.451848 47.304 2.25722 45.372L3.59342 44.419L5.32184 46.8426L3.98564 47.7955C2.7749 48.659 2.6299 50.4032 3.68144 51.4548L9.47304 57.2464L9.48735 57.232C9.49192 57.2275 9.49649 57.2229 9.50106 57.2183C13.1682 53.5659 19.1019 53.5705 22.7635 57.232C26.4247 60.8933 26.4295 66.8263 22.778 70.4936C22.7731 70.4984 22.7683 70.5033 22.7635 70.5081L22.7491 70.5224L28.4965 76.2698C29.347 77.1203 30.6875 77.2318 31.6668 76.5334L33.0022 75.581C49.9119 63.5214 64.6388 48.6636 76.5483 31.6478C77.1992 30.7178 77.0886 29.4546 76.2859 28.6519L70.2487 22.6148C70.2268 22.6371 70.2047 22.6594 70.1825 22.6816C70.1603 22.7038 70.138 22.7259 70.1156 22.7479C66.4445 26.3475 60.5503 26.3254 56.9064 22.6816C53.2625 19.0376 53.2405 13.1434 56.8404 9.47221C56.8623 9.44989 56.8843 9.42764 56.9064 9.40548C56.9286 9.38329 56.9509 9.36124 56.9733 9.33932L51.3001 3.66613C50.2962 2.66229 48.6293 2.80829 47.8153 3.97136C36.1937 20.5758 21.8228 35.0744 5.32184 46.8426L3.59342 44.419C19.8185 32.8476 33.9492 18.5913 45.3766 2.26445C47.252 -0.415092 51.0922 -0.751452 53.4049 1.56125L59.0781 7.23444C59.64 7.79626 59.9539 8.55937 59.95 9.35389C59.9461 10.1484 59.6247 10.9084 59.0574 11.4647C59.042 11.4798 59.0267 11.495 59.0113 11.5104C56.5077 14.014 56.5077 18.0731 59.0113 20.5767C61.5149 23.0803 65.5741 23.0803 68.0777 20.5767C68.0929 20.5615 68.1081 20.5461 68.1233 20.5306C68.6796 19.9633 69.4396 19.6419 70.2341 19.6381C71.0287 19.6342 71.7918 19.9481 72.3536 20.5099L78.3907 26.547C80.2148 28.3711 80.4662 31.2413 78.987 33.3547C66.8832 50.648 51.9161 65.7482 34.7306 78.0046L33.3952 78.9569C31.2319 80.4997 28.2705 80.2536 26.3916 78.3747L20.6442 72.6273C20.0852 72.0683 19.7715 71.3099 19.7724 70.5193Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M39.9888 14.0672L41.3044 15.3827C41.8856 15.964 41.8856 16.9064 41.3044 17.4876C40.7231 18.0688 39.7808 18.0688 39.1995 17.4876L37.884 16.1721C37.3027 15.5908 37.3027 14.6484 37.884 14.0672C38.4652 13.4859 39.4076 13.4859 39.9888 14.0672Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M45.5142 19.5926L46.8298 20.9081C47.411 21.4894 47.411 22.4317 46.8298 23.013C46.2485 23.5942 45.3062 23.5942 44.7249 23.013L43.4094 21.6974C42.8281 21.1162 42.8281 20.1738 43.4094 19.5926C43.9906 19.0113 44.933 19.0113 45.5142 19.5926Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M52.3542 28.5384C51.773 29.1196 50.8306 29.1196 50.2493 28.5384L48.6707 26.9597C48.0894 26.3785 48.0894 25.4361 48.6707 24.8549C49.2519 24.2736 50.1943 24.2736 50.7755 24.8549L52.3542 26.4335C52.9354 27.0148 52.9354 27.9571 52.3542 28.5384Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M57.8796 34.0638C57.2983 34.645 56.356 34.645 55.7747 34.0638L54.1961 32.4851C53.6148 31.9039 53.6148 30.9615 54.1961 30.3802C54.7773 29.799 55.7197 29.799 56.3009 30.3802L57.8796 31.9589C58.4608 32.5401 58.4608 33.4825 57.8796 34.0638Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M61.8267 35.9051L63.1423 37.2206C63.7235 37.8019 63.7235 38.7442 63.1423 39.3255C62.561 39.9067 61.6187 39.9067 61.0374 39.3255L59.7219 38.0099C59.1406 37.4287 59.1406 36.4863 59.7219 35.9051C60.3031 35.3238 61.2455 35.3238 61.8267 35.9051Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M67.3521 41.4305L68.6677 42.746C69.2489 43.3273 69.2489 44.2696 68.6677 44.8509C68.0864 45.4321 67.144 45.4321 66.5628 44.8509L65.2472 43.5353C64.666 42.9541 64.666 42.0117 65.2472 41.4305C65.8285 40.8492 66.7709 40.8492 67.3521 41.4305Z\"\n        fill=\"#633001\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M32.2915 37.1288C30.6927 35.53 30.6927 32.9378 32.2915 31.3389C34.1033 29.5272 37.1152 29.806 38.5636 31.9196L42.2107 37.2416C45.3939 36.2204 48.7719 36.3559 51.0104 38.5945C53.0227 40.6067 53.3281 43.5721 52.6459 46.3981C51.9561 49.256 50.2117 52.2664 47.6467 54.8314C45.0817 57.3964 42.0713 59.1408 39.2134 59.8306C36.3874 60.5128 33.422 60.2073 31.4098 58.1951C29.1842 55.9696 29.0377 52.6168 30.0388 49.4519L24.694 45.7892C22.5804 44.3408 22.3016 41.3289 24.1134 39.5171C25.7122 37.9183 28.3044 37.9183 29.9032 39.5171L33.6067 43.2206C33.9734 42.7908 34.3625 42.3691 34.7735 41.9582C35.1704 41.5613 35.5772 41.1847 35.9918 40.8291L32.2915 37.1288Z\"\n        fill=\"#633001\"\n      />\n      <ellipse\n        cx=\"36.9019\"\n        cy=\"50.5685\"\n        rx=\"1.79015\"\n        ry=\"2.60385\"\n        transform=\"rotate(-45 36.9019 50.5685)\"\n        fill=\"#DBCDF9\"\n      />\n      <ellipse\n        rx=\"1.79015\"\n        ry=\"2.60385\"\n        transform=\"matrix(0.707107 -0.707106 0.707107 0.707106 43.5768 43.8947)\"\n        fill=\"#DBCDF9\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  const id = uniqueId(\"svg\");\n\n  return (\n    <Svg viewBox=\"0 0 64 64\" {...props}>\n      <g clipPath={`url(#${id})`}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M43.1934 10.6907C44.0412 9.92381 45.4 10.3246 45.6959 11.4288C45.9144 12.2444 45.4304 13.0827 44.6148 13.3012L38.4955 14.9409L43.1934 10.6907ZM49.112 10.5134C48.1317 6.85481 43.6295 5.52698 40.8207 8.06806L31.0187 16.9358C29.5584 18.2569 30.8604 20.6481 32.7625 20.1385L45.5302 16.7174C48.2324 15.9933 49.8361 13.2157 49.112 10.5134Z\"\n          fill=\"#7645D9\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M30.1886 8.0841C29.8078 6.90274 28.3125 6.54189 27.4349 7.41956C26.7866 8.06782 26.7866 9.11885 27.4349 9.7671L32.2987 14.6309L30.1886 8.0841ZM24.7196 4.70427C27.6276 1.79628 32.5818 2.99187 33.8434 6.90609L38.2461 20.5658C38.902 22.6007 36.3796 24.1424 34.8677 22.6306L24.7196 12.4824C22.5717 10.3345 22.5717 6.85214 24.7196 4.70427Z\"\n          fill=\"#7645D9\"\n        />\n        <path\n          opacity=\"0.6\"\n          d=\"M7.27624 34.0431C7.01094 35.0539 5.57594 35.054 5.31064 34.0431L4.51492 31.0112C4.42182 30.6565 4.14478 30.3794 3.79005 30.2863L0.758148 29.4906C-0.252715 29.2253 -0.252717 27.7903 0.758146 27.525L3.79005 26.7293C4.14478 26.6362 4.42182 26.3591 4.51492 26.0044L5.31064 22.9725C5.57594 21.9616 7.01094 21.9616 7.27624 22.9725L8.07196 26.0044C8.16506 26.3591 8.44209 26.6362 8.79682 26.7293L11.8287 27.525C12.8396 27.7903 12.8396 29.2253 11.8287 29.4906L8.79683 30.2863C8.44209 30.3794 8.16506 30.6565 8.07196 31.0112L7.27624 34.0431Z\"\n          fill=\"#53DEE9\"\n        />\n        <path\n          d=\"M9.62029 11.6637C9.62344 12.2763 8.81089 12.494 8.5073 11.9619L7.59673 10.3659C7.4902 10.1791 7.2913 10.0643 7.07631 10.0654L5.23882 10.0748C4.62619 10.078 4.40847 9.26545 4.9406 8.96185L6.53663 8.05128C6.72337 7.94475 6.8382 7.74585 6.8371 7.53087L6.82766 5.69337C6.82451 5.08074 7.63705 4.86302 7.94064 5.39515L8.85121 6.99119C8.95775 7.17792 9.15664 7.29275 9.37163 7.29165L11.2091 7.28221C11.8218 7.27906 12.0395 8.0916 11.5073 8.39519L9.91131 9.30576C9.72458 9.4123 9.60974 9.6112 9.61085 9.82618L9.62029 11.6637Z\"\n          fill=\"#53DEE9\"\n        />\n        <path\n          opacity=\"0.8\"\n          d=\"M53.8712 15.7857C53.2964 15.6348 53.2964 14.8189 53.8712 14.6681L56.9643 13.8563C57.166 13.8033 57.3235 13.6458 57.3764 13.4441L58.1882 10.351C58.3391 9.77623 59.155 9.77623 59.3058 10.351L60.1176 13.4441C60.1706 13.6458 60.3281 13.8033 60.5298 13.8563L63.6229 14.6681C64.1977 14.8189 64.1977 15.6348 63.6229 15.7857L60.5298 16.5975C60.3281 16.6504 60.1706 16.8079 60.1176 17.0096L59.3058 20.1027C59.155 20.6775 58.3391 20.6775 58.1882 20.1027L57.3764 17.0096C57.3235 16.8079 57.166 16.6504 56.9643 16.5975L53.8712 15.7857Z\"\n          fill=\"#53DEE9\"\n        />\n        <path\n          d=\"M51.0823 29.9055C50.3505 27.1742 47.543 25.5533 44.8116 26.2851L17.6112 33.5735C14.8798 34.3053 13.2589 37.1128 13.9908 39.8441L18.546 56.8444C19.2778 59.5758 22.0853 61.1967 24.8167 60.4648L52.0171 53.1765C54.7485 52.4446 56.3694 49.6371 55.6375 46.9058L51.0823 29.9055Z\"\n          fill=\"url(#paint0_linear_won)\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M18.2737 36.0462L45.4742 28.7579C46.8399 28.392 48.2436 29.2024 48.6095 30.5681L53.1648 47.5684C53.5307 48.934 52.7202 50.3378 51.3546 50.7037L24.1541 57.9921C22.7884 58.358 21.3847 57.5475 21.0187 56.1819L16.4635 39.1816C16.0976 37.8159 16.9081 36.4122 18.2737 36.0462ZM44.8116 26.2851C47.543 25.5533 50.3505 27.1742 51.0823 29.9055L55.6375 46.9058C56.3694 49.6371 54.7485 52.4446 52.0171 53.1765L24.8167 60.4648C22.0853 61.1967 19.2778 59.5758 18.546 56.8444L13.9908 39.8441C13.2589 37.1128 14.8798 34.3053 17.6112 33.5735L44.8116 26.2851Z\"\n          fill=\"#7645D9\"\n        />\n        <path d=\"M35.2297 28.8525L27.1932 31.0059L34.3987 57.8973L42.4352 55.7439L35.2297 28.8525Z\" fill=\"#7645D9\" />\n        <path d=\"M54.5173 42.4023L52.3639 34.3658L15.1113 44.3476L17.2647 52.3841L54.5173 42.4023Z\" fill=\"#7645D9\" />\n        <g style={{ mixBlendMode: \"multiply\" }}>\n          <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M39.9264 46.3239L31.8613 48.485L32.1926 49.7213L40.2577 47.5603L39.9264 46.3239ZM29.7019 40.4262L37.767 38.2651L37.4358 37.0287L29.3707 39.1898L29.7019 40.4262Z\"\n            fill=\"#7645D9\"\n          />\n        </g>\n        <path\n          d=\"M54.8306 24.9448C55.3795 22.8962 54.1638 20.7906 52.1153 20.2417L17.4965 10.9657C15.448 10.4168 13.3424 11.6324 12.7935 13.681L11.8824 17.081C11.3335 19.1295 12.5492 21.2351 14.5977 21.784L49.2165 31.0601C51.265 31.609 53.3706 30.3933 53.9195 28.3448L54.8306 24.9448Z\"\n          fill=\"url(#paint1_linear_won)\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M16.8339 13.4384L51.4527 22.7145C52.1355 22.8975 52.5408 23.5993 52.3578 24.2822L51.4468 27.6822C51.2638 28.3651 50.5619 28.7703 49.8791 28.5873L15.2603 19.3113C14.5775 19.1283 14.1722 18.4264 14.3552 17.7436L15.2662 14.3435C15.4492 13.6607 16.1511 13.2555 16.8339 13.4384ZM52.1153 20.2417C54.1638 20.7906 55.3795 22.8962 54.8306 24.9448L53.9195 28.3448C53.3706 30.3933 51.265 31.609 49.2165 31.0601L14.5977 21.784C12.5492 21.2351 11.3335 19.1295 11.8824 17.081L12.7935 13.681C13.3424 11.6324 15.448 10.4168 17.4965 10.9657L52.1153 20.2417Z\"\n          fill=\"#7645D9\"\n        />\n        <path d=\"M38.8242 16.6804L30.7877 14.527L27.8889 25.3454L35.9254 27.4988L38.8242 16.6804Z\" fill=\"#7645D9\" />\n        <g style={{ mixBlendMode: \"multiply\" }}>\n          <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M38.4257 18.0799L30.4256 15.8399L30.7455 14.3999L38.8813 16.6573L38.4257 18.0799Z\"\n            fill=\"#7645D9\"\n          />\n        </g>\n      </g>\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_won\"\n          x1=\"31.2114\"\n          y1=\"29.9293\"\n          x2=\"38.4169\"\n          y2=\"56.8207\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#53DEE9\" />\n          <stop offset=\"1\" stopColor=\"#1FC7D4\" />\n        </linearGradient>\n        <linearGradient\n          id=\"paint1_linear_won\"\n          x1=\"34.8059\"\n          y1=\"15.6037\"\n          x2=\"31.9071\"\n          y2=\"26.4221\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#53DEE9\" />\n          <stop offset=\"1\" stopColor=\"#1FC7D4\" />\n        </linearGradient>\n        <clipPath id={id}>\n          <rect width=\"64\" height=\"64\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import BigNumber from 'bignumber.js'\nimport { BigNumber as EthersBigNumber } from '@ethersproject/bignumber'\nimport { LotteryStatus, LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { LotteryUserGraphEntity, LotteryRoundGraphEntity } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { NUM_ROUNDS_TO_CHECK_FOR_REWARDS } from 'config/constants/lottery'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\nimport { MAX_LOTTERIES_REQUEST_SIZE } from './getLotteriesData'\n\ninterface RoundDataAndUserTickets {\n  roundId: string\n  userTickets: LotteryTicket[]\n  finalNumber: string\n}\n\nconst lotteryAddress = getLotteryV2Address()\n\nconst fetchCakeRewardsForTickets = async (\n  winningTickets: LotteryTicket[],\n): Promise<{ ticketsWithUnclaimedRewards: LotteryTicket[]; cakeTotal: BigNumber }> => {\n  const calls = winningTickets.map((winningTicket) => {\n    const { roundId, id, rewardBracket } = winningTicket\n    return {\n      name: 'viewRewardsForTicketId',\n      address: lotteryAddress,\n      params: [roundId, id, rewardBracket],\n    }\n  })\n\n  try {\n    const cakeRewards = await multicallv2<any>(lotteryV2Abi, calls)\n\n    const cakeTotal = cakeRewards.reduce((accum: BigNumber, cakeReward: EthersBigNumber[]) => {\n      return accum.plus(new BigNumber(cakeReward[0].toString()))\n    }, BIG_ZERO)\n\n    const ticketsWithUnclaimedRewards = winningTickets.map((winningTicket, index) => {\n      return { ...winningTicket, cakeReward: cakeRewards[index] }\n    })\n    return { ticketsWithUnclaimedRewards, cakeTotal }\n  } catch (error) {\n    console.error(error)\n    return { ticketsWithUnclaimedRewards: null, cakeTotal: null }\n  }\n}\n\nconst getRewardBracketByNumber = (ticketNumber: string, finalNumber: string): number => {\n  // Winning numbers are evaluated right-to-left in the smart contract, so we reverse their order for validation here:\n  // i.e. '1123456' should be evaluated as '6543211'\n  const ticketNumAsArray = ticketNumber.split('').reverse()\n  const winningNumsAsArray = finalNumber.split('').reverse()\n  const matchingNumbers = []\n\n  // The number at index 6 in all tickets is 1 and will always match, so finish at index 5\n  for (let index = 0; index < winningNumsAsArray.length - 1; index++) {\n    if (ticketNumAsArray[index] !== winningNumsAsArray[index]) {\n      break\n    }\n    matchingNumbers.push(ticketNumAsArray[index])\n  }\n\n  // Reward brackets refer to indexes, 0 = 1 match, 5 = 6 matches. Deduct 1 from matchingNumbers' length to get the reward bracket\n  const rewardBracket = matchingNumbers.length - 1\n  return rewardBracket\n}\n\nexport const getWinningTickets = async (\n  roundDataAndUserTickets: RoundDataAndUserTickets,\n): Promise<LotteryTicketClaimData> => {\n  const { roundId, userTickets, finalNumber } = roundDataAndUserTickets\n\n  const ticketsWithRewardBrackets = userTickets.map((ticket) => {\n    return {\n      roundId,\n      id: ticket.id,\n      number: ticket.number,\n      status: ticket.status,\n      rewardBracket: getRewardBracketByNumber(ticket.number, finalNumber),\n    }\n  })\n\n  // A rewardBracket of -1 means no matches. 0 and above means there has been a match\n  const allWinningTickets = ticketsWithRewardBrackets.filter((ticket) => {\n    return ticket.rewardBracket >= 0\n  })\n\n  // If ticket.status is true, the ticket has already been claimed\n  const unclaimedWinningTickets = allWinningTickets.filter((ticket) => {\n    return !ticket.status\n  })\n\n  if (unclaimedWinningTickets.length > 0) {\n    const { ticketsWithUnclaimedRewards, cakeTotal } = await fetchCakeRewardsForTickets(unclaimedWinningTickets)\n    return { ticketsWithUnclaimedRewards, allWinningTickets, cakeTotal, roundId }\n  }\n\n  if (allWinningTickets.length > 0) {\n    return { ticketsWithUnclaimedRewards: null, allWinningTickets, cakeTotal: null, roundId }\n  }\n\n  return null\n}\n\nconst getWinningNumbersForRound = (targetRoundId: string, lotteriesData: LotteryRoundGraphEntity[]) => {\n  const targetRound = lotteriesData.find((pastLottery) => pastLottery.id === targetRoundId)\n  return targetRound?.finalNumber\n}\n\nconst fetchUnclaimedUserRewards = async (\n  account: string,\n  userLotteryData: LotteryUserGraphEntity,\n  lotteriesData: LotteryRoundGraphEntity[],\n  currentLotteryId: string,\n): Promise<LotteryTicketClaimData[]> => {\n  const { rounds } = userLotteryData\n\n  // If there is no user round history - return an empty array\n  if (rounds.length === 0) {\n    return []\n  }\n\n  // If the web3 provider account doesn't equal the userLotteryData account, return an empty array - this is effectively a loading state as the user switches accounts\n  if (userLotteryData.account.toLowerCase() !== account.toLowerCase()) {\n    return []\n  }\n\n  // Filter out rounds without subgraph data (i.e. >100 rounds ago)\n  const roundsInRange = rounds.filter((round) => {\n    const lastCheckableRoundId = parseInt(currentLotteryId, 10) - MAX_LOTTERIES_REQUEST_SIZE\n    const roundId = parseInt(round.lotteryId, 10)\n    return roundId >= lastCheckableRoundId\n  })\n\n  // Filter out non-claimable rounds\n  const claimableRounds = roundsInRange.filter((round) => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n  })\n\n  // Rounds with no tickets claimed OR rounds where a user has over 100 tickets, could have prizes\n  const roundsWithPossibleWinnings = claimableRounds.filter((round) => {\n    return !round.claimed || parseInt(round.totalTickets, 10) > 100\n  })\n\n  // Check the X  most recent rounds, where X is NUM_ROUNDS_TO_CHECK_FOR_REWARDS\n  const roundsToCheck = roundsWithPossibleWinnings.slice(0, NUM_ROUNDS_TO_CHECK_FOR_REWARDS)\n\n  if (roundsToCheck.length > 0) {\n    const idsToCheck = roundsToCheck.map((round) => round.lotteryId)\n    const userTicketData = await fetchUserTicketsForMultipleRounds(idsToCheck, account)\n    const roundsWithTickets = userTicketData.filter((roundData) => roundData?.userTickets?.length > 0)\n\n    const roundDataAndWinningTickets = roundsWithTickets.map((roundData) => {\n      return { ...roundData, finalNumber: getWinningNumbersForRound(roundData.roundId, lotteriesData) }\n    })\n\n    const winningTicketsForPastRounds = await Promise.all(\n      roundDataAndWinningTickets.map((roundData) => getWinningTickets(roundData)),\n    )\n\n    // Filter out null values (returned when no winning tickets found for past round)\n    const roundsWithWinningTickets = winningTicketsForPastRounds.filter(\n      (winningTicketData) => winningTicketData !== null,\n    )\n\n    // Filter to only rounds with unclaimed tickets\n    const roundsWithUnclaimedWinningTickets = roundsWithWinningTickets.filter(\n      (winningTicketData) => winningTicketData.ticketsWithUnclaimedRewards,\n    )\n\n    return roundsWithUnclaimedWinningTickets\n  }\n  // All rounds claimed, return empty array\n  return []\n}\n\nexport default fetchUnclaimedUserRewards\n","import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retrieved from the smart contract\n */\nexport const parseRetrievedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\nexport const getDrawnDate = (locale: string, endTime: string) => {\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n  return endTimeAsDate.toLocaleDateString(locale, dateTimeOptions)\n}\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n}\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n}\n\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\n  ...dateOptions,\n  ...timeOptions,\n}\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n","import { Svg, SvgProps } from '@pancakeswap/uikit'\n\nconst WhiteBunny: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 27 26\" {...props}>\n      <mask\n        id=\"white-bunny-path-1-outside-1\"\n        maskUnits=\"userSpaceOnUse\"\n        x=\"0.5\"\n        y=\"-0.0263672\"\n        width=\"26\"\n        height=\"26\"\n        fill=\"black\"\n      >\n        <rect fill=\"white\" x=\"0.5\" y=\"-0.0263672\" width=\"26\" height=\"26\" />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257L25.5 15.8267V17.6934C25.5 21.7435 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7435 1.5 17.6934V15.8267V15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\n        />\n      </mask>\n      <path\n        d=\"M10.4692 1.08677L10.7142 0.247673V0.247673L10.4692 1.08677ZM6.909 3.56941L7.78108 3.6295V3.62949L6.909 3.56941ZM12.3624 4.54184L13.2015 4.78689V4.78689L12.3624 4.54184ZM11.1683 8.63073L10.3292 8.38568L9.95792 9.65684L11.2727 9.49862L11.1683 8.63073ZM16.7708 8.76808L16.622 9.62947L17.3572 9.75647L17.5981 9.05032L16.7708 8.76808ZM18.74 2.99564L19.5673 3.27788V3.27788L18.74 2.99564ZM22.2761 1.25849L22.5583 0.431153V0.431153L22.2761 1.25849ZM23.7601 5.3372L23.0122 4.88469V4.88469L23.7601 5.3372ZM20.9057 10.0551L20.1578 9.60256L19.6593 10.4265L20.5275 10.8432L20.9057 10.0551ZM25.5 15.8257H24.6258L24.6259 15.8274L25.5 15.8257ZM25.5 15.8267H26.3742L26.3742 15.8251L25.5 15.8267ZM6.47417 9.88004L6.82762 10.6796L7.31 10.4663L7.34626 9.94013L6.47417 9.88004ZM10.7142 0.247673C8.47144 -0.407305 6.19752 1.17838 6.03691 3.50932L7.78108 3.62949C7.86497 2.412 9.05268 1.58377 10.2241 1.92587L10.7142 0.247673ZM13.2015 4.78689C13.7681 2.84659 12.6545 0.814314 10.7142 0.247673L10.2241 1.92587C11.2376 2.22184 11.8192 3.28334 11.5233 4.2968L13.2015 4.78689ZM12.0074 8.87578L13.2015 4.78689L11.5233 4.2968L10.3292 8.38568L12.0074 8.87578ZM13.5 7.61822C12.6675 7.61822 11.853 7.66787 11.0638 7.76284L11.2727 9.49862C11.9921 9.41204 12.7369 9.36652 13.5 9.36652V7.61822ZM16.9195 7.90668C15.8299 7.71847 14.683 7.61822 13.5 7.61822V9.36652C14.5847 9.36652 15.632 9.45848 16.622 9.62947L16.9195 7.90668ZM17.5981 9.05032L19.5673 3.27788L17.9127 2.7134L15.9434 8.48584L17.5981 9.05032ZM19.5673 3.27788C19.9082 2.27864 20.9946 1.74493 21.9938 2.08582L22.5583 0.431153C20.6452 -0.221485 18.5653 0.800311 17.9127 2.7134L19.5673 3.27788ZM21.9938 2.08582C23.1489 2.47985 23.644 3.84054 23.0122 4.88469L24.5081 5.7897C25.7175 3.79064 24.7697 1.18554 22.5583 0.431153L21.9938 2.08582ZM23.0122 4.88469L20.1578 9.60256L21.6536 10.5076L24.5081 5.7897L23.0122 4.88469ZM26.3741 15.8257C26.3741 12.9967 24.2198 10.676 21.284 9.26698L20.5275 10.8432C23.1864 12.1193 24.6259 13.9701 24.6259 15.8257H26.3741ZM26.3742 15.8251L26.3741 15.8241L24.6259 15.8274L24.6259 15.8284L26.3742 15.8251ZM26.3742 17.6934V15.8267H24.6259V17.6934H26.3742ZM13.5 25.9009C16.9478 25.9009 20.1111 25.0486 22.4411 23.6247C24.7561 22.21 26.3742 20.1382 26.3742 17.6934H24.6259C24.6259 19.2987 23.5576 20.8935 21.5295 22.1329C19.5163 23.3632 16.6797 24.1526 13.5 24.1526V25.9009ZM0.62585 17.6934C0.62585 20.1382 2.24387 22.21 4.55889 23.6247C6.88892 25.0486 10.0523 25.9009 13.5 25.9009V24.1526C10.3203 24.1526 7.48367 23.3632 5.47054 22.1329C3.44242 20.8935 2.37415 19.2987 2.37415 17.6934H0.62585ZM0.62585 15.8267V17.6934H2.37415V15.8267H0.62585ZM0.62585 15.8257V15.8267H2.37415V15.8257H0.62585ZM6.12073 9.08053C2.97211 10.4725 0.62585 12.8707 0.62585 15.8257H2.37415C2.37415 13.8874 3.94921 11.952 6.82762 10.6796L6.12073 9.08053ZM6.03691 3.50932L5.60209 9.81995L7.34626 9.94013L7.78108 3.6295L6.03691 3.50932Z\"\n        fill=\"#08060B\"\n        mask=\"url(#path-1-outside-1)\"\n      />\n      <path\n        d=\"M25.5 17.6933C25.5 21.7434 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7434 1.5 17.6933V15.8267H25.5V17.6933Z\"\n        fill=\"#F4EEFF\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257C25.5 19.8758 20.1274 23.159 13.5 23.159C6.87258 23.159 1.5 19.8758 1.5 15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\n        fill=\"white\"\n      />\n      <ellipse cx=\"10.4334\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\n      <ellipse cx=\"19.6331\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\n    </Svg>\n  )\n}\n\nexport default WhiteBunny\n","import styled from 'styled-components'\nimport { Svg, SvgProps, Text, Flex } from '@pancakeswap/uikit'\n\nexport const PinkBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#D750B2\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const LilacBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#A881FC\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const TealBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#1FC7D4\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const AquaBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#31D0AA\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const GreenBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#93D45A\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13232C28.9191 8.87177 28.5505 17.2573 23.2373 22.5706C17.528 28.2799 8.27148 28.2799 2.56223 22.5706C2.2825 22.2909 2.01648 22.0026 1.76416 21.7067C4.02814 27.3486 9.54881 31.3326 16 31.3326C24.4683 31.3326 31.3332 24.4677 31.3332 15.9994C31.3332 10.6078 28.5504 5.8661 24.3428 3.13232Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7713 4.18262C30.6308 10.2119 30.2607 19.061 24.6609 24.6608C19.0615 30.2602 10.2132 30.6307 4.18396 25.7722C6.99643 29.1689 11.2455 31.3329 16 31.3329C24.4683 31.3329 31.3332 24.468 31.3332 15.9997C31.3332 11.2446 29.1687 6.99508 25.7713 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10075 9.5143C3.77271 5.93677 6.78528 3.11129 10.4921 1.68422C10.546 1.73235 10.5987 1.78219 10.6502 1.83374C12.4838 3.66728 10.9119 5.7442 8.66145 7.99465C6.411 10.2451 4.33417 11.8169 2.50064 9.98335C2.35338 9.83609 2.22013 9.6793 2.10075 9.5143Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const YellowBall: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 32 32\" {...props}>\n      <circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#FFC43C\" />\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M24.3428 3.13245C28.9191 8.87189 28.5505 17.2575 23.2373 22.5707C17.528 28.28 8.27148 28.28 2.56223 22.5707C2.2825 22.291 2.01648 22.0028 1.76416 21.7068C4.02814 27.3487 9.54881 31.3327 16 31.3327C24.4683 31.3327 31.3332 24.4678 31.3332 15.9995C31.3332 10.6079 28.5504 5.86622 24.3428 3.13245Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'multiply' }} opacity=\"0.1\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M25.7714 4.18262C30.6309 10.2119 30.2608 19.061 24.661 24.6608C19.0616 30.2602 10.2134 30.6307 4.18408 25.7722C6.99655 29.1689 11.2456 31.3329 16.0001 31.3329C24.4685 31.3329 31.3334 24.468 31.3334 15.9997C31.3334 11.2446 29.1689 6.99508 25.7714 4.18262Z\"\n          fill=\"black\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M3.48969 24.8677C0.151051 18.7651 0.974979 11.0636 6.01931 6.01927C11.0639 0.974682 18.7659 0.15093 24.8687 3.49016C22.365 1.71201 19.3046 0.666603 16 0.666603C7.53165 0.666603 0.666733 7.53152 0.666733 15.9998C0.666733 19.3041 1.7119 22.3642 3.48969 24.8677Z\"\n          fill=\"white\"\n        />\n      </g>\n      <g style={{ mixBlendMode: 'soft-light' }}>\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M2.10087 9.51443C3.77283 5.93689 6.78541 3.11142 10.4922 1.68435C10.5461 1.73247 10.5988 1.78231 10.6504 1.83387C12.4839 3.6674 10.912 5.74432 8.66157 7.99477C6.41112 10.2452 4.33429 11.817 2.50076 9.98347C2.3535 9.83621 2.22025 9.67943 2.10087 9.51443Z\"\n          fill=\"white\"\n        />\n      </g>\n    </Svg>\n  )\n}\n\nexport const BallTextWrapper = styled.div`\n  top: 45%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  position: absolute;\n`\n\nexport const BallText = styled(Text)<{ rotationTransform?: number }>`\n  color: #000000;\n  text-shadow: -0.75px -0.75px 0 white, 0.75px -0.75px 0 white, -0.75px 0.75px 0 white, 0.75px 0.75px 0 white;\n  transform: rotate(${({ rotationTransform }) => rotationTransform || 0}deg);\n`\n\nexport type BallColor = 'pink' | 'lilac' | 'teal' | 'aqua' | 'green' | 'yellow'\n\ninterface BallWithNumberProps {\n  color: BallColor\n  number: string\n  size?: string\n  fontSize?: string\n  rotationTransform?: number\n}\n\nconst ballsMap = {\n  pink: PinkBall,\n  lilac: LilacBall,\n  teal: TealBall,\n  aqua: AquaBall,\n  green: GreenBall,\n  yellow: YellowBall,\n}\n\nexport const BallWithNumber: React.FC<BallWithNumberProps> = ({ color, number, size, fontSize, rotationTransform }) => {\n  const BallComponent = ballsMap[color]\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" position=\"relative\" mx=\"2px\">\n      <BallComponent width={size ?? '32px'} height={size ?? '32px'} />\n      <BallTextWrapper>\n        <BallText rotationTransform={rotationTransform} bold fontSize={fontSize ?? '16px'}>\n          {number}\n        </BallText>\n      </BallTextWrapper>\n    </Flex>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { Flex, FlexProps } from '@pancakeswap/uikit'\nimport random from 'lodash/random'\nimport uniqueId from 'lodash/uniqueId'\nimport { parseRetrievedNumber } from '../helpers'\nimport { BallWithNumber } from '../svgs'\nimport { BallColor } from '../svgs/Balls'\n\ninterface WinningNumbersProps extends FlexProps {\n  number: string\n  size?: string\n  fontSize?: string\n  rotateText?: boolean\n}\n\nconst WinningNumbers: React.FC<WinningNumbersProps> = ({\n  number,\n  size = '32px',\n  fontSize = '16px',\n  rotateText,\n  ...containerProps\n}) => {\n  const [rotationValues, setRotationValues] = useState([])\n  const reversedNumber = parseRetrievedNumber(number)\n  const numAsArray = reversedNumber.split('')\n  const colors: BallColor[] = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow']\n\n  useEffect(() => {\n    if (rotateText && numAsArray && rotationValues.length === 0) {\n      setRotationValues(numAsArray.map(() => random(-30, 30)))\n    }\n  }, [rotateText, numAsArray, rotationValues])\n\n  return (\n    <Flex justifyContent=\"space-between\" {...containerProps}>\n      {numAsArray.map((num, index) => {\n        return (\n          <BallWithNumber\n            key={uniqueId()}\n            rotationTransform={rotateText && rotationValues[index]}\n            size={size}\n            fontSize={fontSize}\n            color={colors[index]}\n            number={num}\n          />\n        )\n      })}\n    </Flex>\n  )\n}\n\nexport default WinningNumbers\n","import { LotteryTicket } from 'config/constants/types'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport _uniqueId from 'lodash/uniqueId'\nimport { parseRetrievedNumber } from '../helpers'\n\nconst StyledNumberWrapper = styled(Flex)`\n  position: relative;\n  padding: 4px 16px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: ${({ theme }) => theme.colors.background};\n  justify-content: space-between;\n`\n\nconst RewardHighlighter = styled.div<{ numberMatches: number }>`\n  z-index: 1;\n  width: ${({ numberMatches }) => `${numberMatches < 6 ? numberMatches * 17.66 : 100}%`};\n  height: 34px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  top: 0;\n  left: 0;\n  position: absolute;\n  border: 2px ${({ theme }) => theme.colors.primary} solid;\n`\n\ninterface TicketNumberProps extends LotteryTicket {\n  localId?: number\n  rewardBracket?: number\n}\n\nconst TicketNumber: React.FC<TicketNumberProps> = ({ localId, id, number, rewardBracket }) => {\n  const { t } = useTranslation()\n  const reversedNumber = parseRetrievedNumber(number)\n  const numberAsArray = reversedNumber.split('')\n  const numberMatches = rewardBracket + 1\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"12px\">\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          #{localId || id}\n        </Text>\n        {rewardBracket >= 0 && (\n          <Text fontSize=\"12px\">\n            {t('Matched first')} {numberMatches}\n          </Text>\n        )}\n      </Flex>\n      <StyledNumberWrapper>\n        {rewardBracket >= 0 && <RewardHighlighter numberMatches={numberMatches} />}\n        {numberAsArray.map((digit) => (\n          <Text key={`${localId || id}-${digit}-${_uniqueId()}`} fontSize=\"16px\">\n            {digit}\n          </Text>\n        ))}\n      </StyledNumberWrapper>\n    </Flex>\n  )\n}\n\nexport default TicketNumber\n","import { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport { useGasPrice } from 'state/user/hooks'\nimport { useAppDispatch } from 'state'\nimport Balance from 'components/Balance'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useLotteryV2Contract } from 'hooks/useContract'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\n  const gasPrice = useGasPrice()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    ),\n  )\n  const lotteryContract = useLotteryV2Contract()\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\n        gasPrice,\n      })\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        t('Prizes Collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId })}\n        </ToastDescriptionWithTx>,\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      /* eslint-disable no-await-in-loop */\n      const receipt = await fetchWithCatchTxError(() => {\n        return callWithEstimateGas(\n          lotteryContract,\n          'claimTickets',\n          [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets],\n          { gasPrice },\n        )\n      })\n      if (receipt?.status) {\n        // One transaction within batch has succeeded\n        receipts.push(receipt)\n        setPendingBatchClaims(transactionsToFire - receipts.length)\n\n        // More transactions are to be done within the batch. Issue toast to give user feedback.\n        if (receipts.length !== transactionsToFire) {\n          toastSuccess(\n            t('Prizes Collected!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t(\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',\n                {\n                  claimNum: receipts.length,\n                  claimTotal: transactionsToFire,\n                  lotteryId,\n                },\n              )}\n            </ToastDescriptionWithTx>,\n          )\n        }\n      } else {\n        break\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      toastSuccess(\n        t('Prizes Collected!'),\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {t('You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance\n            textAlign={['center', null, 'left']}\n            lineHeight=\"1.1\"\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            bold\n            color=\"secondary\"\n            unit=\" CAKE!\"\n          />\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\n        </Flex>\n        <Balance\n          mt={['12px', null, '0']}\n          textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t('Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n","import { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, ModalContainer, ModalHeader, ModalTitle, ModalBody, ModalCloseButton } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport delay from 'lodash/delay'\nimport confetti from 'canvas-confetti'\nimport { LotteryTicketClaimData } from 'config/constants/types'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport ClaimPrizesInner from './ClaimPrizesInner'\n\nconst StyledModal = styled(ModalContainer)`\n  position: relative;\n  overflow: visible;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`\n\nconst StyledModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  border-top-right-radius: 32px;\n  border-top-left-radius: 32px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst showConfetti = () => {\n  confetti({\n    particleCount: 200,\n    startVelocity: 30,\n    gravity: 0.5,\n    spread: 350,\n    origin: {\n      x: 0.5,\n      y: 0.3,\n    },\n  })\n}\n\ninterface ClaimPrizesModalModalProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onDismiss?: () => void\n}\n\nconst ClaimPrizesModal: React.FC<ClaimPrizesModalModalProps> = ({ onDismiss, roundsToClaim }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { currentLotteryId } = useLottery()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    delay(showConfetti, 100)\n  }, [])\n\n  return (\n    <StyledModal minWidth=\"280px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <StyledModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </StyledModalHeader>\n      <ModalBody p=\"24px\">\n        <ClaimPrizesInner\n          onSuccess={() => {\n            dispatch(fetchUserLotteries({ account, currentLotteryId }))\n            onDismiss?.()\n          }}\n          roundsToClaim={roundsToClaim}\n        />\n      </ModalBody>\n    </StyledModal>\n  )\n}\n\nexport default ClaimPrizesModal\n","import { useEffect, useState } from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Button,\n  Skeleton,\n  Ticket,\n  PresentWonIcon,\n  TooltipText,\n  InfoIcon,\n  useTooltip,\n  useModal,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { getWinningTickets } from 'state/lottery/fetchUnclaimedUserRewards'\nimport { fetchUserTicketsForOneRound } from 'state/lottery/getUserTicketsData'\nimport { LotteryRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport orderBy from 'lodash/orderBy'\nimport WinningNumbers from '../WinningNumbers'\nimport { processLotteryResponse } from '../../helpers'\nimport TicketNumber from '../TicketNumber'\nimport ClaimPrizesModal from '../ClaimPrizesModal'\n\nconst TopBox = styled(Flex)`\n  flex-direction: column;\n  margin: -24px;\n  padding: 24px;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst ScrollBox = styled(Box)`\n  margin-right: -20px;\n  padding-right: 24px;\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-top: 24px;\n`\n\nconst TicketSkeleton = () => {\n  return (\n    <>\n      <Skeleton width=\"32px\" height=\"12px\" mt=\"2px\" mb=\"4px\" />\n      <Skeleton width=\"100%\" height=\"34px\" mb=\"12px\" />\n    </>\n  )\n}\n\nconst PreviousRoundTicketsInner: React.FC<{ roundId: string }> = ({ roundId }) => {\n  const [lotteryInfo, setLotteryInfo] = useState<LotteryRound>(null)\n  const [allUserTickets, setAllUserTickets] = useState<LotteryTicket[]>(null)\n  const [userWinningTickets, setUserWinningTickets] = useState<{\n    allWinningTickets: LotteryTicket[]\n    ticketsWithUnclaimedRewards: LotteryTicket[]\n    isFetched: boolean\n    claimData: LotteryTicketClaimData\n  }>({ allWinningTickets: null, ticketsWithUnclaimedRewards: null, isFetched: false, claimData: null })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={[userWinningTickets.claimData]} />, false)\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">\n        {t('Tickets must match the winning number in the exact same order, starting from the first digit.')}\n      </Text>\n      <Text mb=\"16px\">{t('If the winning number is “123456”:')}</Text>\n      <Text mb=\"4px\">{t('“120000” matches the first 2 digits.')}</Text>\n      <Text>\n        {t('“000006” matches the last digit, but since the first five digits are wrong, it doesn’t win any prizes.')}\n      </Text>\n    </>\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  useEffect(() => {\n    const addWinningTicketInfoToAllTickets = (\n      _allTickets: LotteryTicket[],\n      _allWinningTickets: LotteryTicket[],\n    ): LotteryTicket[] => {\n      const allTicketsWithWinningTickets = _allTickets.map((ticket) => {\n        const winningTicketEquivalent = _allWinningTickets.find((winningTicket) => winningTicket.id === ticket.id)\n        if (winningTicketEquivalent) {\n          return winningTicketEquivalent\n        }\n        return ticket\n      })\n      return allTicketsWithWinningTickets\n    }\n\n    const sortTicketsByWinningBracket = (tickets) => {\n      return orderBy(tickets, (ticket) => (ticket.rewardBracket === undefined ? 0 : ticket.rewardBracket + 1), 'desc')\n    }\n\n    const fetchData = async () => {\n      const userTickets = await fetchUserTicketsForOneRound(account, roundId)\n      const lotteryData = await fetchLottery(roundId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      const winningTickets = await getWinningTickets({\n        roundId,\n        userTickets,\n        finalNumber: processedLotteryData.finalNumber.toString(),\n      })\n\n      setUserWinningTickets({\n        isFetched: true,\n        allWinningTickets: winningTickets?.allWinningTickets,\n        ticketsWithUnclaimedRewards: winningTickets?.ticketsWithUnclaimedRewards,\n        claimData: winningTickets,\n      })\n      setLotteryInfo(processedLotteryData)\n\n      // If the user has some winning tickets - modify the userTickets response to include that data\n      if (winningTickets?.allWinningTickets) {\n        const allTicketsWithWinningTicketInfo = addWinningTicketInfoToAllTickets(\n          userTickets,\n          winningTickets.allWinningTickets,\n        )\n        const ticketsSortedByWinners = sortTicketsByWinningBracket(allTicketsWithWinningTicketInfo)\n        setAllUserTickets(ticketsSortedByWinners)\n      } else {\n        setAllUserTickets(userTickets)\n      }\n    }\n\n    fetchData()\n  }, [roundId, account])\n\n  const getFooter = () => {\n    if (userWinningTickets?.ticketsWithUnclaimedRewards?.length > 0) {\n      return (\n        <Button onClick={onPresentClaimModal} mt=\"24px\" width=\"100%\">\n          {t('Collect Prizes')}\n        </Button>\n      )\n    }\n    if (!userWinningTickets.allWinningTickets) {\n      return (\n        <div ref={targetRef}>\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n            <InfoIcon height=\"20px\" width=\"20px\" color=\"textSubtle\" mr=\"8px\" />\n            <TooltipText color=\"textSubtle\">{t(\"Why didn't I win?\")}</TooltipText>\n          </Flex>\n        </div>\n      )\n    }\n    return null\n  }\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TopBox>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"4px\">\n          {t('Winning number')}\n        </Text>\n        {lotteryInfo?.finalNumber ? (\n          <WinningNumbers number={lotteryInfo.finalNumber.toString()} />\n        ) : (\n          <Skeleton width=\"230px\" height=\"34px\" />\n        )}\n      </TopBox>\n      <ScrollBox>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" my=\"16px\">\n          {t('Your tickets')}\n        </Text>\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Flex>\n            <Ticket width=\"24px\" height=\"24px\" mr=\"8px\" />\n            <Text bold color=\"text\">\n              {t('Total tickets')}:\n            </Text>\n          </Flex>\n          <Text bold color=\"text\">\n            {allUserTickets ? allUserTickets.length : <Skeleton width=\"56px\" height=\"24px\" />}\n          </Text>\n        </Flex>\n        <Flex mb=\"24px\" justifyContent=\"space-between\">\n          <Flex>\n            <PresentWonIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n            <Text bold color=\"text\">\n              {t('Winning tickets')}:\n            </Text>\n          </Flex>\n          <Text bold color=\"text\">\n            {userWinningTickets.isFetched ? (\n              userWinningTickets?.allWinningTickets?.length || '0'\n            ) : (\n              <Skeleton width=\"40px\" height=\"24px\" />\n            )}\n          </Text>\n        </Flex>\n        {allUserTickets ? (\n          allUserTickets.map((ticket) => {\n            return (\n              <TicketNumber\n                key={ticket.id}\n                id={ticket.id}\n                number={ticket.number}\n                rewardBracket={ticket.rewardBracket}\n                status={ticket.status}\n              />\n            )\n          })\n        ) : (\n          <>\n            <TicketSkeleton />\n            <TicketSkeleton />\n            <TicketSkeleton />\n            <TicketSkeleton />\n          </>\n        )}\n      </ScrollBox>\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\n        {userWinningTickets.isFetched && getFooter()}\n      </Flex>\n    </>\n  )\n}\n\nexport default PreviousRoundTicketsInner\n","import styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface NumTicketsToBuyButtonProps {\n  onClick: () => void\n  disabled?: boolean\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst NumTicketsToBuyButton: React.FC<NumTicketsToBuyButtonProps> = ({ children, onClick, disabled = false }) => {\n  return (\n    <StyledButton disabled={disabled} scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default NumTicketsToBuyButton\n","import { useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ticket, UpdateTicketAction } from './useTicketsReducer'\n\nconst InputsContainer = styled.div<{ focused: boolean; isDuplicate: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 36px;\n  box-sizing: border-box;\n  border: 1px solid #d7caec;\n  background-color: #eeeaf4;\n  border-radius: 16px;\n  margin-bottom: 8px;\n  ${({ isDuplicate }) =>\n    isDuplicate &&\n    `\n    border: 1px solid #FFB237;\n    box-shadow: 0px 0px 0px 2px #FFB237;\n  `}\n  ${({ focused }) =>\n    focused &&\n    `\n    border: 1px solid #7645D9;\n    box-shadow: 0px 0px 0px 2px #E4DAF7;\n  `}\n`\n\nconst DigitInput = styled.input`\n  color: ${({ theme }) => theme.colors.primaryDark};\n  border: none;\n  height: 32px;\n  padding: 0 12px;\n  font-size: 16px;\n  flex: 1;\n  width: 16px;\n  text-align: center;\n  min-width: 0;\n  background-color: transparent;\n  caret-color: #7a6faa;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:placeholder-shown {\n    text-align: left;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    /* display: none; <- Crashes Chrome on hover */\n    -webkit-appearance: none;\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n  }\n\n  -moz-appearance: textfield; /* Firefox */\n`\n\nconst getIdLabel = (id: number): string => {\n  if (id < 10) return `#00${id}`\n  if (id < 100) return `#0${id}`\n  return `#${id}`\n}\n\nconst TicketContainer: React.FC<{\n  ticket: Ticket\n  duplicateWith: number[]\n  updateTicket: UpdateTicketAction\n  disabled: boolean\n}> = ({ ticket, duplicateWith, updateTicket, disabled }) => {\n  const [focused, setFocused] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const digit1 = useRef<HTMLInputElement>(null)\n  const digit2 = useRef<HTMLInputElement>(null)\n  const digit3 = useRef<HTMLInputElement>(null)\n  const digit4 = useRef<HTMLInputElement>(null)\n  const digit5 = useRef<HTMLInputElement>(null)\n  const digit6 = useRef<HTMLInputElement>(null)\n\n  const { t } = useTranslation()\n\n  const digitRefs = [digit1, digit2, digit3, digit4, digit5, digit6]\n\n  const scrollInputIntoView = () => {\n    if (containerRef.current) {\n      containerRef.current.scrollIntoView({ block: 'center', behavior: 'smooth' })\n    }\n  }\n\n  const onPasteHandler = (e: React.ClipboardEvent) => {\n    e.preventDefault()\n    const pasteContent = e.clipboardData.getData('Text')\n    if (pasteContent.length <= 6 && /^\\d+$/.test(pasteContent)) {\n      const filler = Array(6 - pasteContent.length).fill('')\n      updateTicket(ticket.id, [...pasteContent.split(''), ...filler])\n    }\n  }\n\n  const onFocusHandler = () => {\n    scrollInputIntoView()\n    setFocused(true)\n  }\n\n  const onBlurHandler = () => {\n    setFocused(false)\n  }\n\n  const onChangeHandler = (event: React.KeyboardEvent, digitId: number) => {\n    const currentKey = parseInt(event.key, 10)\n\n    if (['e', 'E', '.', ',', '-', 'Unidentified'].includes(event.key)) {\n      event.preventDefault()\n      return\n    }\n\n    // Handling numeric inputs\n    if (currentKey >= 0 && currentKey <= 9) {\n      event.preventDefault()\n      const newNumbers = [...ticket.numbers]\n      newNumbers[digitId] = `${currentKey}`\n      updateTicket(ticket.id, newNumbers)\n      const nextDigitId = digitId + 1\n      // if we're not on the last digit - auto-tab\n      const nextInput = digitRefs[nextDigitId]\n      if (nextDigitId !== 6 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n\n    if (event.key === 'Backspace') {\n      event.preventDefault()\n      // If some number is there - delete the number\n      if (ticket.numbers[digitId]) {\n        const newNumbers = [...ticket.numbers]\n        newNumbers[digitId] = ''\n        updateTicket(ticket.id, newNumbers)\n      } else {\n        // if the cell is empty and user presses backspace - remove previous\n        const prevDigitId = digitId - 1\n        const nextInput = digitRefs[prevDigitId]\n        // prevent focusing on non-existent input\n        if (prevDigitId !== -1 && nextInput.current) {\n          nextInput.current.focus()\n          const newNumbers = [...ticket.numbers]\n          newNumbers[prevDigitId] = ''\n          updateTicket(ticket.id, newNumbers)\n        }\n      }\n    }\n\n    if (event.key === 'Delete') {\n      event.preventDefault()\n      if (ticket.numbers[digitId]) {\n        const newNumbers = [...ticket.numbers]\n        newNumbers[digitId] = ''\n        updateTicket(ticket.id, newNumbers)\n      } else {\n        // if the cell is empty and user presses delete - remove next\n        const nextDigitId = digitId + 1\n        const nextInput = digitRefs[nextDigitId]\n        // prevent focusing on non-existent input\n        if (nextDigitId !== 6 && nextInput.current) {\n          nextInput.current.focus()\n          const newNumbers = [...ticket.numbers]\n          newNumbers[nextDigitId] = ''\n          updateTicket(ticket.id, newNumbers)\n        }\n      }\n    }\n\n    if (event.key === 'ArrowLeft') {\n      event.preventDefault()\n      const prevDigitId = digitId - 1\n      const nextInput = digitRefs[prevDigitId]\n      // prevent focusing on non-existent input\n      if (prevDigitId !== -1 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n\n    if (event.key === 'ArrowRight') {\n      event.preventDefault()\n      const nextDigitId = digitId + 1\n      const nextInput = digitRefs[nextDigitId]\n      // prevent focusing on non-existent input\n      if (nextDigitId !== 6 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n  }\n  return (\n    <>\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {getIdLabel(ticket.id)}\n        </Text>\n        <Text fontSize=\"12px\" color=\"warning\">\n          {duplicateWith.length !== 0 && t('Duplicate')}\n        </Text>\n      </Flex>\n      <InputsContainer\n        ref={containerRef}\n        onClick={scrollInputIntoView}\n        focused={focused}\n        isDuplicate={duplicateWith.length !== 0}\n      >\n        <DigitInput\n          ref={digit1}\n          type=\"number\"\n          value={ticket.numbers[0]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 0)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit2}\n          type=\"number\"\n          value={ticket.numbers[1]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 1)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit3}\n          type=\"number\"\n          value={ticket.numbers[2]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 2)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit4}\n          type=\"number\"\n          value={ticket.numbers[3]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 3)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit5}\n          type=\"number\"\n          value={ticket.numbers[4]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 4)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit6}\n          type=\"number\"\n          value={ticket.numbers[5]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 5)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n      </InputsContainer>\n    </>\n  )\n}\n\nexport default TicketContainer\n","import styled from 'styled-components'\nimport { Modal, Text, Flex, Button, ArrowBackIcon, AutoRenewIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport TicketInput from './TicketInput'\nimport { UpdateTicketAction, Ticket } from './useTicketsReducer'\n\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n  max-height: 552px;\n\n  & div:nth-child(2) {\n    padding: 0;\n  }\n`\n\nconst ScrollableContainer = styled.div`\n  height: 310px;\n  overflow-y: scroll;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  padding: 24px;\n`\n\nconst EditNumbersModal: React.FC<{\n  totalCost: string\n  updateTicket: UpdateTicketAction\n  randomize: () => void\n  tickets: Ticket[]\n  allComplete: boolean\n  onConfirm: () => void\n  isConfirming: boolean\n  onDismiss?: () => void\n}> = ({ totalCost, updateTicket, randomize, tickets, allComplete, onConfirm, isConfirming, onDismiss }) => {\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  return (\n    <StyledModal\n      title={t('Edit numbers')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n      onBack={onDismiss}\n    >\n      <ScrollableContainer>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Total cost')}:</Text>\n          <Text>~{totalCost} CAKE</Text>\n        </Flex>\n        <Text fontSize=\"12px\" color=\"textSubtle\" mb=\"16px\">\n          {t(\n            'Numbers are randomized, with no duplicates among your tickets. Tap a number to edit it. Available digits: 0-9',\n          )}\n        </Text>\n        <Button disabled={isConfirming} mb=\"16px\" variant=\"secondary\" width=\"100%\" height=\"32px\" onClick={randomize}>\n          {t('Randomize')}\n        </Button>\n        {tickets.map((ticket) => (\n          <TicketInput\n            key={ticket.id}\n            ticket={ticket}\n            duplicateWith={ticket.duplicateWith}\n            updateTicket={updateTicket}\n            disabled={isConfirming}\n          />\n        ))}\n      </ScrollableContainer>\n      <Flex flexDirection=\"column\" justifyContent=\"center\" m=\"24px\">\n        <Button\n          id=\"lotteryBuyEdited\"\n          disabled={!allComplete || isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          onClick={() => {\n            onConfirm()\n          }}\n        >\n          {isConfirming ? t('Confirming') : t('Confirm and buy')}\n        </Button>\n        <Button mt=\"8px\" variant={isConfirming ? 'secondary' : 'text'} disabled={isConfirming} onClick={onDismiss}>\n          <ArrowBackIcon color={isConfirming ? 'disabled' : 'primary'} height=\"24px\" width=\"24px\" /> {t('Go back')}\n        </Button>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default EditNumbersModal\n","import { LotteryTicket } from 'config/constants/types'\nimport random from 'lodash/random'\n\n/**\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\n */\nconst generateTicketNumbers = (\n  numberOfTickets: number,\n  userCurrentTickets?: LotteryTicket[],\n  minNumber = 1000000,\n  maxNumber = 1999999,\n): number[] => {\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\n  const existingTicketNumbers =\n    userCurrentTickets?.length > 0\n      ? userCurrentTickets.map((ticket) => {\n          return parseInt(ticket?.number)\n        })\n      : []\n  const generatedTicketNumbers = [...existingTicketNumbers]\n\n  for (let count = 0; count < numberOfTickets; count++) {\n    let randomNumber = random(minNumber, maxNumber)\n    while (generatedTicketNumbers.includes(randomNumber)) {\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\n      randomNumber = random(minNumber, maxNumber)\n    }\n    generatedTicketNumbers.push(randomNumber)\n  }\n\n  // Filter out the users' existing tickets\n  const ticketsToBuy =\n    userCurrentTickets?.length > 0\n      ? generatedTicketNumbers.filter((ticketNumber) => {\n          return !existingTicketNumbers.includes(ticketNumber)\n        })\n      : generatedTicketNumbers\n\n  return ticketsToBuy\n}\n\nexport default generateTicketNumbers\n","import { LotteryTicket } from 'config/constants/types'\nimport { useEffect, useReducer } from 'react'\nimport { parseRetrievedNumber } from '../../helpers'\nimport generateTicketNumbers from './generateTicketNumbers'\n\nexport interface Ticket {\n  id: number\n  numbers: string[]\n  duplicateWith: number[]\n  isComplete: boolean\n}\n\nexport interface TicketsState {\n  tickets: Ticket[]\n  allComplete: boolean\n}\n\nconst getInitialState = ({\n  amount,\n  userCurrentTickets,\n}: {\n  amount: number\n  userCurrentTickets: LotteryTicket[]\n}): TicketsState => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetrievedNumber(ticket.toString()).split(''))\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true,\n  }))\n  return {\n    tickets,\n    allComplete: true,\n  }\n}\n\nconst reducer = (state: TicketsState, action: any) => {\n  switch (action.type) {\n    case 'updateTicket': {\n      const tickets = [...state.tickets]\n      const { ticketId, newNumbers } = action.payload\n\n      const newDuplicates = state.tickets.filter(\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\n      )\n\n      // If ticket was duplicate but not duplicate anymore with this update\n      // go through previously considered duplicates and remove id of this ticket\n      // from their duplicateWith array\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\n      prevDuplicates.forEach((prevTicketId) => {\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\n          const indexToRemove = dupsToUpdate.findIndex((id) => id === ticketId)\n          dupsToUpdate.splice(indexToRemove, 1)\n          tickets[prevTicketId - 1] = {\n            ...tickets[prevTicketId - 1],\n            duplicateWith: dupsToUpdate,\n          }\n        }\n      })\n\n      // If found duplicates - update their duplicateWith array\n      if (newDuplicates.length !== 0) {\n        newDuplicates.forEach((duplicate) => {\n          tickets[duplicate.id - 1] = {\n            ...duplicate,\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\n          }\n        })\n      }\n\n      const updatedTicket = {\n        id: ticketId,\n        numbers: newNumbers,\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\n        isComplete: newNumbers.join('').length === 6,\n      }\n      tickets[ticketId - 1] = updatedTicket\n\n      // Check if all tickets are filled\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\n\n      return {\n        tickets,\n        allComplete,\n      }\n    }\n    case 'reset':\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\n    default:\n      throw new Error()\n  }\n}\n\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\n\nexport const useTicketsReducer = (\n  amount: number,\n  userCurrentTickets: LotteryTicket[],\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\n\n  useEffect(() => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }, [amount, userCurrentTickets])\n\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\n  }\n\n  const randomize = () => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }\n\n  const getTicketsForPurchase = () => {\n    return state.tickets.map((ticket) => {\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\n      reversedTicket.unshift(1)\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\n      return ticketAsNumber\n    })\n  }\n\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\n}\n","import { useEffect, useState, useMemo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { requiresApproval } from 'utils/requiresApproval'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport {\n  Modal,\n  Text,\n  Flex,\n  HelpIcon,\n  BalanceInput,\n  Ticket,\n  useTooltip,\n  Skeleton,\n  Button,\n  ArrowForwardIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport tokens from 'config/constants/tokens'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useAppDispatch } from 'state'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\nimport useTheme from 'hooks/useTheme'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { FetchStatus } from 'config/constants/types'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons, { ButtonArrangement } from 'components/ApproveConfirmButtons'\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\nimport EditNumbersModal from './EditNumbersModal'\nimport { useTicketsReducer } from './useTicketsReducer'\n\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n`\n\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\n  justify-content: space-between;\n  margin-top: 8px;\n  margin-bottom: 24px;\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\n`\n\ninterface BuyTicketsModalProps {\n  onDismiss?: () => void\n}\n\nenum BuyingStage {\n  BUY = 'Buy',\n  EDIT = 'Edit',\n}\n\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId,\n    currentRound: {\n      priceTicketInCake,\n      discountDivisor,\n      userTickets: { tickets: userCurrentTickets },\n    },\n  } = useLottery()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\n  const [discountValue, setDiscountValue] = useState('')\n  const [totalCost, setTotalCost] = useState('')\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\n  const lotteryContract = useLotteryV2Contract()\n  const { reader: cakeContractReader, signer: cakeContractApprover } = useCake()\n  const { toastSuccess } = useToast()\n  const { balance: userCake, fetchStatus } = useTokenBalance(tokens.cake.address)\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instantiated on each render, hence memoising it using the stringified value below.\n  const stringifiedUserCake = userCake.toJSON()\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const hasFetchedBalance = fetchStatus === FetchStatus.Fetched\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3)\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">\n        {t(\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\n        )}\n      </Text>\n      <Text>{t('2 tickets: 0.05%')}</Text>\n      <Text>{t('50 tickets: 2.45%')}</Text>\n      <Text>{t('100 tickets: 4.95%')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  const limitNumberByMaxTicketsPerBuy = useCallback(\n    (number: BigNumber) => {\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\n    },\n    [maxNumberTicketsPerBuyOrClaim],\n  )\n\n  const getTicketCostAfterDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const totalAfterDiscount = priceTicketInCake\n        .times(numberTickets)\n        .times(discountDivisor.plus(1).minus(numberTickets))\n        .div(discountDivisor)\n      return totalAfterDiscount\n    },\n    [discountDivisor, priceTicketInCake],\n  )\n\n  const getMaxTicketBuyWithDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\n      const costBeforeDiscount = priceTicketInCake.times(numberTickets)\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake)\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\n    },\n    [getTicketCostAfterDiscount, priceTicketInCake],\n  )\n\n  const validateInput = useCallback(\n    (inputNumber: BigNumber) => {\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\n\n      if (cakeCostAfterDiscount.gt(userCake)) {\n        setUserNotEnoughCake(true)\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\n        setMaxTicketPurchaseExceeded(true)\n      } else {\n        setUserNotEnoughCake(false)\n        setMaxTicketPurchaseExceeded(false)\n      }\n    },\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\n  )\n\n  useEffect(() => {\n    const getMaxPossiblePurchase = () => {\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake)\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\n      let maxPurchase\n\n      // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\n        // Get max tickets purchasable with the users' balance, as well as using the discount to buy tickets\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\n\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\n\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\n      } else {\n        maxPurchase = limitedMaxPurchase\n      }\n\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\n        setUserNotEnoughCake(true)\n      } else {\n        setUserNotEnoughCake(false)\n      }\n\n      setMaxPossibleTicketPurchase(maxPurchase)\n    }\n    getMaxPossiblePurchase()\n  }, [\n    maxNumberTicketsPerBuyOrClaim,\n    priceTicketInCake,\n    memoisedUserCake,\n    limitNumberByMaxTicketsPerBuy,\n    getTicketCostAfterDiscount,\n    getMaxTicketBuyWithDiscount,\n    hasFetchedBalance,\n  ])\n\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0')\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0')\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\n\n  const getNumTicketsByPercentage = (percentage: number): number => {\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\n      : BIG_ZERO\n    return Math.floor(percentageOfMaxTickets.toNumber())\n  }\n\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\n\n  const handleInputChange = (input: string) => {\n    // Force input to integer\n    const inputAsInt = parseInt(input, 10)\n    const inputAsBN = new BigNumber(inputAsInt)\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\n    validateInput(inputAsBN)\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\n  }\n\n  const handleNumberButtonClick = (number: number) => {\n    setTicketsToBuy(number.toFixed())\n    setUserNotEnoughCake(false)\n    setMaxTicketPurchaseExceeded(false)\n  }\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\n    parseInt(ticketsToBuy, 10),\n    userCurrentTickets,\n  )\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        return requiresApproval(cakeContractReader, account, lotteryContract.address)\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContractApprover, 'approve', [lotteryContract.address, MaxUint256])\n      },\n      onApproveSuccess: async ({ receipt }) => {\n        toastSuccess(\n          t('Contract enabled - you can now purchase tickets'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n        )\n      },\n      onConfirm: () => {\n        const ticketsForPurchase = getTicketsForPurchase()\n        return callWithGasPrice(lotteryContract, 'buyTickets', [currentLotteryId, ticketsForPurchase])\n      },\n      onSuccess: async ({ receipt }) => {\n        onDismiss?.()\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n        toastSuccess(t('Lottery tickets purchased!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  const getErrorMessage = () => {\n    if (userNotEnoughCake) return t('Insufficient CAKE balance')\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\n    })\n  }\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0\n    }\n    return percentageAsBn.toNumber().toFixed(2)\n  }\n\n  const disableBuying =\n    !isApproved ||\n    isConfirmed ||\n    userNotEnoughCake ||\n    !ticketsToBuy ||\n    new BigNumber(ticketsToBuy).lte(0) ||\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\n\n  if (buyingStage === BuyingStage.EDIT) {\n    return (\n      <EditNumbersModal\n        totalCost={totalCost}\n        updateTicket={updateTicket}\n        randomize={randomize}\n        tickets={tickets}\n        allComplete={allComplete}\n        onConfirm={handleConfirm}\n        isConfirming={isConfirming}\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\n      />\n    )\n  }\n\n  return (\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Text mr=\"4px\" bold>\n            {t('Tickets')}\n          </Text>\n          <Ticket />\n        </Flex>\n      </Flex>\n      <BalanceInput\n        isWarning={account && (userNotEnoughCake || maxTicketPurchaseExceeded)}\n        placeholder=\"0\"\n        value={ticketsToBuy}\n        onUserInput={handleInputChange}\n        currencyValue={\n          cakePriceBusd.gt(0) &&\n          `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\n        }\n      />\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\n          {account && (userNotEnoughCake || maxTicketPurchaseExceeded) && (\n            <Text fontSize=\"12px\" color=\"failure\">\n              {getErrorMessage()}\n            </Text>\n          )}\n          {account && (\n            <Flex justifyContent=\"flex-end\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\n                CAKE {t('Balance')}:\n              </Text>\n              {hasFetchedBalance ? (\n                <Text fontSize=\"12px\" color=\"textSubtle\">\n                  {userCakeDisplayBalance}\n                </Text>\n              ) : (\n                <Skeleton width={50} height={12} />\n              )}\n            </Flex>\n          )}\n        </Flex>\n      </Flex>\n\n      {account && !hasFetchedBalance ? (\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\n      ) : (\n        <ShortcutButtonsWrapper isVisible={account && hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\n          {tenPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {twentyFivePercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {fiftyPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {oneHundredPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\n              MAX\n            </NumTicketsToBuyButton>\n          )}\n        </ShortcutButtonsWrapper>\n      )}\n      <Flex flexDirection=\"column\">\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Cost')} (CAKE)\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0))} CAKE\n          </Text>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Flex>\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\n              {discountValue && totalCost ? percentageDiscount() : 0}%\n            </Text>\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\n              {t('Bulk discount')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\n            </Flex>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            ~{discountValue} CAKE\n          </Text>\n        </Flex>\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"16px\">\n            {t('You pay')}\n          </Text>\n          <Text fontSize=\"16px\" bold>\n            ~{totalCost} CAKE\n          </Text>\n        </Flex>\n\n        {account ? (\n          <>\n            <ApproveConfirmButtons\n              isApproveDisabled={isApproved}\n              isApproving={isApproving}\n              isConfirmDisabled={disableBuying}\n              isConfirming={isConfirming}\n              onApprove={handleApprove}\n              onConfirm={handleConfirm}\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\n              confirmLabel={t('Buy Instantly')}\n              confirmId=\"lotteryBuyInstant\"\n            />\n            {isApproved && (\n              <Button\n                variant=\"secondary\"\n                mt=\"8px\"\n                endIcon={\n                  <ArrowForwardIcon\n                    ml=\"2px\"\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\n                    height=\"24px\"\n                    width=\"24px\"\n                  />\n                }\n                disabled={disableBuying || isConfirming}\n                onClick={() => {\n                  setBuyingStage(BuyingStage.EDIT)\n                }}\n              >\n                {t('View/Edit Numbers')}\n              </Button>\n            )}\n          </>\n        ) : (\n          <ConnectWalletButton />\n        )}\n\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\n          )}\n        </Text>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default BuyTicketsModal\n","import { Button, useModal, WaitIcon, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLottery } from 'state/lottery/hooks'\nimport { LotteryStatus } from 'config/constants/types'\nimport BuyTicketsModal from './BuyTicketsModal/BuyTicketsModal'\n\ninterface BuyTicketsButtonProps extends ButtonProps {\n  disabled?: boolean\n}\n\nconst BuyTicketsButton: React.FC<BuyTicketsButtonProps> = ({ disabled, ...props }) => {\n  const { t } = useTranslation()\n  const [onPresentBuyTicketsModal] = useModal(<BuyTicketsModal />)\n  const {\n    currentRound: { status },\n  } = useLottery()\n\n  const getBuyButtonText = () => {\n    if (status === LotteryStatus.OPEN) {\n      return t('Buy Tickets')\n    }\n    return (\n      <>\n        <WaitIcon mr=\"4px\" color=\"textDisabled\" /> {t('On sale soon!')}\n      </>\n    )\n  }\n\n  return (\n    <Button {...props} disabled={disabled} onClick={onPresentBuyTicketsModal}>\n      {getBuyButtonText()}\n    </Button>\n  )\n}\n\nexport default BuyTicketsButton\n","import styled from 'styled-components'\nimport { Flex, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useLottery } from 'state/lottery/hooks'\nimport useTheme from 'hooks/useTheme'\nimport TicketNumber from '../TicketNumber'\nimport BuyTicketsButton from '../BuyTicketsButton'\n\nconst ScrollBox = styled(Box)`\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-left: -24px;\n  margin-right: -24px;\n  padding-left: 24px;\n  padding-right: 20px;\n`\n\nconst CurrentRoundTicketsInner = () => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const {\n    isTransitioning,\n    currentRound: { status, userTickets },\n  } = useLottery()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"16px\">\n          {t('Your tickets')}\n        </Text>\n        <ScrollBox>\n          {userTickets.tickets.map((ticket, index) => {\n            return (\n              <TicketNumber\n                key={ticket.id}\n                localId={index + 1}\n                id={ticket.id}\n                number={ticket.number}\n                status={ticket.status}\n              />\n            )\n          })}\n        </ScrollBox>\n      </Flex>\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\n        <BuyTicketsButton disabled={ticketBuyIsDisabled} mt=\"24px\" width=\"100%\" />\n      </Flex>\n    </>\n  )\n}\n\nexport default CurrentRoundTicketsInner\n","import styled from 'styled-components'\nimport { Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useLottery } from 'state/lottery/hooks'\nimport useTheme from 'hooks/useTheme'\nimport PreviousRoundTicketsInner from './PreviousRoundTicketsInner'\nimport CurrentRoundTicketsInner from './CurrentRoundTicketsInner'\n\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n`\n\ninterface ViewTicketsModalProps {\n  roundId: string\n  roundStatus?: LotteryStatus\n  onDismiss?: () => void\n}\n\nconst ViewTicketsModal: React.FC<ViewTicketsModalProps> = ({ onDismiss, roundId, roundStatus }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { currentLotteryId } = useLottery()\n  const isPreviousRound = roundStatus?.toLowerCase() === LotteryStatus.CLAIMABLE || roundId !== currentLotteryId\n\n  return (\n    <StyledModal\n      title={`${t('Round')} ${roundId}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isPreviousRound ? <PreviousRoundTicketsInner roundId={roundId} /> : <CurrentRoundTicketsInner />}\n    </StyledModal>\n  )\n}\n\nexport default ViewTicketsModal\n","import BigNumber from 'bignumber.js'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface RewardBracketDetailProps {\n  cakeAmount: BigNumber\n  rewardBracket?: number\n  numberWinners?: string\n  isBurn?: boolean\n  isHistoricRound?: boolean\n  isLoading?: boolean\n}\n\nconst RewardBracketDetail: React.FC<RewardBracketDetailProps> = ({\n  rewardBracket,\n  cakeAmount,\n  numberWinners,\n  isHistoricRound,\n  isBurn,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const cakePriceBusd = usePriceCakeBusd()\n\n  const getRewardText = () => {\n    const numberMatch = rewardBracket + 1\n    if (isBurn) {\n      return t('Burn')\n    }\n    if (rewardBracket === 5) {\n      return t('Match all %numberMatch%', { numberMatch })\n    }\n    return t('Match first %numberMatch%', { numberMatch })\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      {isLoading ? (\n        <Skeleton mb=\"4px\" mt=\"8px\" height={16} width={80} />\n      ) : (\n        <Text bold color={isBurn ? 'failure' : 'secondary'}>\n          {getRewardText()}\n        </Text>\n      )}\n      <>\n        {isLoading || cakeAmount.isNaN() ? (\n          <Skeleton my=\"4px\" mr=\"10px\" height={20} width={110} />\n        ) : (\n          <Balance fontSize=\"20px\" bold unit=\" CAKE\" value={getBalanceNumber(cakeAmount)} decimals={0} />\n        )}\n        {isLoading || cakeAmount.isNaN() ? (\n          <>\n            <Skeleton mt=\"4px\" mb=\"16px\" height={12} width={70} />\n          </>\n        ) : (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            prefix=\"~$\"\n            value={getBalanceNumber(cakeAmount.times(cakePriceBusd))}\n            decimals={0}\n          />\n        )}\n        {isHistoricRound && cakeAmount && (\n          <>\n            {numberWinners !== '0' && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                {getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2)} CAKE {t('each')}\n              </Text>\n            )}\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {numberWinners} {t('Winning Tickets')}\n            </Text>\n          </>\n        )}\n      </>\n    </Flex>\n  )\n}\n\nexport default RewardBracketDetail\n","import { useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport RewardBracketDetail from './RewardBracketDetail'\n\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n`\n\nconst RewardsInner = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  row-gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`\n\ninterface RewardMatchesProps {\n  lotteryNodeData: LotteryRound\n  isHistoricRound?: boolean\n}\n\ninterface RewardsState {\n  isLoading: boolean\n  cakeToBurn: BigNumber\n  rewardsLessTreasuryFee: BigNumber\n  rewardsBreakdown: string[]\n  countWinnersPerBracket: string[]\n}\n\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryNodeData, isHistoricRound }) => {\n  const { t } = useTranslation()\n  const [state, setState] = useState<RewardsState>({\n    isLoading: true,\n    cakeToBurn: BIG_ZERO,\n    rewardsLessTreasuryFee: BIG_ZERO,\n    rewardsBreakdown: null,\n    countWinnersPerBracket: null,\n  })\n\n  useEffect(() => {\n    if (lotteryNodeData) {\n      const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryNodeData\n\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100)\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\n      setState({\n        isLoading: false,\n        cakeToBurn,\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\n        rewardsBreakdown,\n        countWinnersPerBracket,\n      })\n    } else {\n      setState({\n        isLoading: true,\n        cakeToBurn: BIG_ZERO,\n        rewardsLessTreasuryFee: BIG_ZERO,\n        rewardsBreakdown: null,\n        countWinnersPerBracket: null,\n      })\n    }\n  }, [lotteryNodeData])\n\n  const getCakeRewards = (bracket: number) => {\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100)\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage)\n  }\n\n  const { isLoading, countWinnersPerBracket, cakeToBurn } = state\n\n  const rewardBrackets = [0, 1, 2, 3, 4, 5]\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\" mb=\"24px\">\n        {t('Match the winning number in the same order to share prizes.')}{' '}\n        {!isHistoricRound && t('Current prizes up for grabs:')}\n      </Text>\n      <RewardsInner>\n        {rewardBrackets.map((bracketIndex) => (\n          <RewardBracketDetail\n            key={bracketIndex}\n            rewardBracket={bracketIndex}\n            cakeAmount={!isLoading && getCakeRewards(bracketIndex)}\n            numberWinners={!isLoading && countWinnersPerBracket[bracketIndex]}\n            isHistoricRound={isHistoricRound}\n            isLoading={isLoading}\n          />\n        ))}\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn isLoading={isLoading} />\n      </RewardsInner>\n    </Wrapper>\n  )\n}\n\nexport default RewardBrackets\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Flex,\n  Heading,\n  Text,\n  Skeleton,\n  Button,\n  useModal,\n  Box,\n  CardFooter,\n  ExpandableLabel,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport ViewTicketsModal from './ViewTicketsModal'\nimport BuyTicketsButton from './BuyTicketsButton'\nimport { dateTimeOptions } from '../helpers'\nimport RewardBrackets from './RewardBrackets'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-column-gap: 32px;\n    grid-template-columns: auto 1fr;\n  }\n`\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 520px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst NextDrawWrapper = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  padding: 24px;\n`\n\nconst NextDrawCard = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { account } = useWeb3React()\n  const { currentLotteryId, isTransitioning, currentRound } = useLottery()\n  const { endTime, amountCollectedInCake, userTickets, status } = currentRound\n\n  const [onPresentViewTicketsModal] = useModal(<ViewTicketsModal roundId={currentLotteryId} roundStatus={status} />)\n  const [isExpanded, setIsExpanded] = useState(false)\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\n  const endTimeMs = parseInt(endTime, 10) * 1000\n  const endDate = new Date(endTimeMs)\n  const isLotteryOpen = status === LotteryStatus.OPEN\n  const userTicketCount = userTickets?.tickets?.length || 0\n\n  const getPrizeBalances = () => {\n    if (status === LotteryStatus.CLOSE || status === LotteryStatus.CLAIMABLE) {\n      return (\n        <Heading scale=\"xl\" color=\"secondary\" textAlign={['center', null, null, 'left']}>\n          {t('Calculating')}...\n        </Heading>\n      )\n    }\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={160} />\n        ) : (\n          <Balance\n            fontSize=\"40px\"\n            color=\"secondary\"\n            textAlign={['center', null, null, 'left']}\n            lineHeight=\"1\"\n            bold\n            prefix=\"~$\"\n            value={getBalanceNumber(prizeInBusd)}\n            decimals={0}\n          />\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            textAlign={['center', null, null, 'left']}\n            unit=\" CAKE\"\n            value={getBalanceNumber(amountCollectedInCake)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  const getNextDrawId = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${currentLotteryId} |`\n    }\n    if (status === LotteryStatus.PENDING) {\n      return ''\n    }\n    return parseInt(currentLotteryId, 10) + 1\n  }\n\n  const getNextDrawDateTime = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${t('Draw')}: ${endDate.toLocaleString(locale, dateTimeOptions)}`\n    }\n    return ''\n  }\n\n  const ticketRoundText =\n    userTicketCount > 1\n      ? t('You have %amount% tickets this round', { amount: userTicketCount })\n      : t('You have %amount% ticket this round', { amount: userTicketCount })\n  const [youHaveText, ticketsThisRoundText] = ticketRoundText.split(userTicketCount.toString())\n\n  return (\n    <StyledCard>\n      <CardHeader p=\"16px 24px\">\n        <Flex justifyContent=\"space-between\">\n          <Heading mr=\"12px\">{t('Next Draw')}</Heading>\n          <Text>\n            {currentLotteryId && `#${getNextDrawId()}`} {Boolean(endTime) && getNextDrawDateTime()}\n          </Text>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        <Grid>\n          <Flex justifyContent={['center', null, null, 'flex-start']}>\n            <Heading>{t('Prize Pot')}</Heading>\n          </Flex>\n          <Flex flexDirection=\"column\" mb=\"18px\">\n            {getPrizeBalances()}\n          </Flex>\n          <Box display={['none', null, null, 'flex']}>\n            <Heading>{t('Your tickets')}</Heading>\n          </Box>\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['center', null, null, 'flex-start']}>\n            {isLotteryOpen && (\n              <Flex\n                flexDirection=\"column\"\n                mr={[null, null, null, '24px']}\n                alignItems={['center', null, null, 'flex-start']}\n              >\n                {account && (\n                  <Flex justifyContent={['center', null, null, 'flex-start']}>\n                    <Text display=\"inline\">{youHaveText} </Text>\n                    {!userTickets.isLoading ? (\n                      <Balance value={userTicketCount} decimals={0} display=\"inline\" bold mx=\"4px\" />\n                    ) : (\n                      <Skeleton mx=\"4px\" height={20} width={40} />\n                    )}\n                    <Text display=\"inline\"> {ticketsThisRoundText}</Text>\n                  </Flex>\n                )}\n                {!userTickets.isLoading && userTicketCount > 0 && (\n                  <Button\n                    onClick={onPresentViewTicketsModal}\n                    height=\"auto\"\n                    width=\"fit-content\"\n                    p=\"0\"\n                    mb={['32px', null, null, '0']}\n                    variant=\"text\"\n                    scale=\"sm\"\n                  >\n                    {t('View your tickets')}\n                  </Button>\n                )}\n              </Flex>\n            )}\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} maxWidth=\"280px\" />\n          </Flex>\n        </Grid>\n      </CardBody>\n      <CardFooter p=\"0\">\n        {isExpanded && (\n          <NextDrawWrapper>\n            <RewardBrackets lotteryNodeData={currentRound} />\n          </NextDrawWrapper>\n        )}\n        {(status === LotteryStatus.OPEN || status === LotteryStatus.CLOSE) && (\n          <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n              {isExpanded ? t('Hide') : t('Details')}\n            </ExpandableLabel>\n          </Flex>\n        )}\n      </CardFooter>\n    </StyledCard>\n  )\n}\n\nexport default NextDrawCard\n","import styled from 'styled-components'\nimport { Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface TimerProps {\n  seconds?: number\n  minutes?: number\n  hours?: number\n  days?: number\n  wrapperClassName?: string\n}\n\nconst StyledTimerFlex = styled(Flex)<{ showTooltip?: boolean }>`\n  ${({ theme, showTooltip }) => (showTooltip ? ` border-bottom: 1px dashed ${theme.colors.textSubtle};` : ``)}\n  div:last-of-type {\n    margin-right: 0;\n  }\n`\n\nconst StyledTimerText = styled(Heading)`\n  background: ${({ theme }) => theme.colors.gradients.gold};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst Wrapper: React.FC<TimerProps> = ({ minutes, hours, days, seconds, wrapperClassName }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledTimerFlex alignItems=\"flex-end\" className={wrapperClassName}>\n      {Boolean(days) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {days}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('d')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(hours) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {hours}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('h')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(minutes) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {minutes}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('m')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(seconds) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {seconds}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('s')}</StyledTimerText>\n        </>\n      )}\n    </StyledTimerFlex>\n  )\n}\n\nexport default Wrapper\n","import { useEffect, useState, useRef } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\n\nconst useNextEventCountdown = (nextEventTime: number): number => {\n  const dispatch = useAppDispatch()\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const timer = useRef(null)\n  const { currentLotteryId } = useLottery()\n\n  useEffect(() => {\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\n    const currentSeconds = Math.floor(Date.now() / 1000)\n    const secondsRemainingCalc = nextEventTime - currentSeconds\n    setSecondsRemaining(secondsRemainingCalc)\n\n    timer.current = setInterval(() => {\n      setSecondsRemaining((prevSecondsRemaining) => {\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\n        if (prevSecondsRemaining <= 1) {\n          clearInterval(timer.current)\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\n        }\n        return prevSecondsRemaining - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\n\n  return secondsRemaining\n}\n\nexport default useNextEventCountdown\n","import { Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport Timer from './Timer'\nimport useNextEventCountdown from '../../hooks/useNextEventCountdown'\n\ninterface CountdownProps {\n  nextEventTime: number\n  preCountdownText?: string\n  postCountdownText?: string\n}\n\nconst Countdown: React.FC<CountdownProps> = ({ nextEventTime, preCountdownText, postCountdownText }) => {\n  const secondsRemaining = useNextEventCountdown(nextEventTime)\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return (\n    <>\n      {secondsRemaining ? (\n        <Flex display=\"inline-flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n          {preCountdownText && (\n            <Heading mr=\"12px\" color=\"#ffff\">\n              {preCountdownText}\n            </Heading>\n          )}\n          <Timer\n            minutes={minutes + 1} // We don't show seconds - so values from 0 - 59s should be shown as 1 min\n            hours={hours}\n            days={days}\n          />\n          {postCountdownText && <Heading color=\"#ffff\">{postCountdownText}</Heading>}\n        </Flex>\n      ) : (\n        <Skeleton height=\"41px\" width=\"250px\" />\n      )}\n    </>\n  )\n}\n\nexport default Countdown\n","import { ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\n  const { t } = useTranslation()\n\n  return (\n    <ButtonMenu activeIndex={activeIndex} onItemClick={setActiveIndex} scale=\"sm\" variant=\"subtle\">\n      <ButtonMenuItem>{t('All History')}</ButtonMenuItem>\n      <ButtonMenuItem>{t('Your History')}</ButtonMenuItem>\n    </ButtonMenu>\n  )\n}\n\nexport default HistoryTabMenu\n","import React from \"react\";\nimport Svg from \"../Svg\";\nimport { SvgProps } from \"../types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"\n        fill=\"black\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Flex, ChevronRightIcon, Box, SmallDotIcon, PrizeIcon } from '@pancakeswap/uikit'\nimport { dateOptions, timeOptions } from '../../helpers'\n\ninterface FinishedRoundRowProps {\n  roundId: string\n  numberTickets: string\n  endTime: string\n  onClick: (string) => void\n  hasWon?: boolean\n}\n\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr) auto;\n  margin-bottom: 8px;\n  cursor: pointer;\n`\n\nconst StyledSmallDotIcon = styled(SmallDotIcon)`\n  path {\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst FinishedRoundRow: React.FC<FinishedRoundRowProps> = ({\n  roundId,\n  numberTickets,\n  endTime,\n  onClick,\n  hasWon = false,\n}) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n\n  return (\n    <Grid onClick={() => onClick(roundId)}>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"16px\" color=\"textSubtle\">\n          {roundId}\n        </Text>\n      </Flex>\n      <Flex\n        mx=\"6px\"\n        alignItems={['flex-start', null, 'center']}\n        justifyContent={['center', null, 'flex-start']}\n        flexDirection={['column', null, 'row']}\n      >\n        <Text fontSize=\"12px\" mr={['0', null, '6px']}>\n          {endTimeAsDate.toLocaleDateString(locale, dateOptions)}\n        </Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {endTimeAsDate.toLocaleTimeString(undefined, timeOptions)}\n        </Text>\n      </Flex>\n      <Flex mx=\"6px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{numberTickets}</Text>\n        {hasWon ? <PrizeIcon color=\"warning\" /> : <StyledSmallDotIcon />}\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <ChevronRightIcon color=\"primary\" />\n      </Flex>\n    </Grid>\n  )\n}\n\nexport default FinishedRoundRow\n","import styled from 'styled-components'\nimport { Text, Box, Flex, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useGetUserLotteriesGraphData } from 'state/lottery/hooks'\nimport FinishedRoundRow from './FinishedRoundRow'\n\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr) auto;\n`\n\ninterface FinishedRoundTableProps {\n  handleHistoryRowClick: (string) => void\n  handleShowMoreClick: () => void\n  numUserRoundsRequested: number\n}\n\nconst FinishedRoundTable: React.FC<FinishedRoundTableProps> = ({\n  handleShowMoreClick,\n  numUserRoundsRequested,\n  handleHistoryRowClick,\n}) => {\n  const { t } = useTranslation()\n  const userLotteryData = useGetUserLotteriesGraphData()\n\n  const filteredForClaimable = userLotteryData?.rounds.filter((round) => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n  })\n\n  const sortedByRoundId = filteredForClaimable?.sort((roundA, roundB) => {\n    return parseInt(roundB.lotteryId, 10) - parseInt(roundA.lotteryId, 10)\n  })\n\n  return (\n    <>\n      <Grid px=\"24px\" pt=\"24px\" mb=\"8px\">\n        <Text bold fontSize=\"12px\" color=\"secondary\">\n          #\n        </Text>\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\n          {t('Date')}\n        </Text>\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\n          {t('Your Tickets')}\n        </Text>\n        <Box width=\"20px\" />\n      </Grid>\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\" overflowY=\"scroll\" height=\"240px\">\n        {userLotteryData &&\n          sortedByRoundId.map((finishedRound) => (\n            <FinishedRoundRow\n              key={finishedRound.lotteryId}\n              roundId={finishedRound.lotteryId}\n              hasWon={finishedRound.claimed}\n              numberTickets={finishedRound.totalTickets}\n              endTime={finishedRound.endTime}\n              onClick={handleHistoryRowClick}\n            />\n          ))}\n        {userLotteryData?.rounds?.length === numUserRoundsRequested && (\n          <Flex justifyContent=\"center\">\n            <Button mt=\"12px\" variant=\"text\" width=\"fit-content\" onClick={handleShowMoreClick}>\n              {t('Show More')}\n            </Button>\n          </Flex>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default FinishedRoundTable\n","import styled from 'styled-components'\nimport {\n  CardBody,\n  Heading,\n  Flex,\n  Skeleton,\n  Text,\n  Box,\n  Button,\n  useModal,\n  CardRibbon,\n  useMatchBreakpoints,\n  BunnyPlaceholderIcon,\n} from '@pancakeswap/uikit'\nimport { LotteryRound } from 'state/types'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport WinningNumbers from '../WinningNumbers'\nimport ViewTicketsModal from '../ViewTicketsModal'\n\nconst StyledCardBody = styled(CardBody)`\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-column-gap: 72px;\n    grid-row-gap: 36px;\n    grid-template-columns: auto 1fr;\n  }\n`\n\nconst StyledCardRibbon = styled(CardRibbon)`\n  right: -20px;\n  top: -20px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    right: -10px;\n    top: -10px;\n  }\n`\n\nconst PreviousRoundCardBody: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\n  lotteryNodeData,\n  lotteryId,\n}) => {\n  const { t } = useTranslation()\n  const {\n    currentLotteryId,\n    currentRound: { status },\n  } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const userDataForRound = userLotteryData.rounds.find((userLotteryRound) => userLotteryRound.lotteryId === lotteryId)\n  const { isLg, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n\n  const currentLotteryIdAsInt = parseInt(currentLotteryId)\n  const mostRecentFinishedRoundId =\n    status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n  const isLatestRound = mostRecentFinishedRoundId.toString() === lotteryId\n\n  const [onPresentViewTicketsModal] = useModal(\n    <ViewTicketsModal roundId={lotteryId} roundStatus={lotteryNodeData?.status} />,\n  )\n\n  const totalTicketNumber = userDataForRound ? userDataForRound.totalTickets : 0\n  const ticketRoundText =\n    totalTicketNumber > 1\n      ? t('You had %amount% tickets this round', { amount: totalTicketNumber })\n      : t('You had %amount% ticket this round', { amount: totalTicketNumber })\n  const [youHadText, ticketsThisRoundText] = ticketRoundText.split(totalTicketNumber.toString())\n\n  return (\n    <StyledCardBody>\n      {isLatestRound && <StyledCardRibbon text={t('Latest')} />}\n      <Grid>\n        <Flex justifyContent={['center', null, null, 'flex-start']}>\n          <Heading mb=\"24px\">{t('Winning Number')}</Heading>\n        </Flex>\n        <Flex maxWidth={['240px', null, null, '100%']} justifyContent={['center', null, null, 'flex-start']}>\n          {lotteryId ? (\n            lotteryNodeData?.finalNumber ? (\n              <WinningNumbers\n                rotateText={isLargerScreen || false}\n                number={lotteryNodeData?.finalNumber.toString()}\n                mr={[null, null, null, '32px']}\n                size=\"100%\"\n                fontSize={isLargerScreen ? '42px' : '16px'}\n              />\n            ) : (\n              <Skeleton\n                width={['240px', null, null, '400px']}\n                height={['34px', null, null, '71px']}\n                mr={[null, null, null, '32px']}\n              />\n            )\n          ) : (\n            <>\n              <Flex flexDirection=\"column\" alignItems=\"center\" width={['240px', null, null, '480px']}>\n                <Text mb=\"8px\">{t('Please specify Round')}</Text>\n                <BunnyPlaceholderIcon height=\"64px\" width=\"64px\" />\n              </Flex>\n            </>\n          )}\n        </Flex>\n        {userDataForRound && (\n          <>\n            <Box display={['none', null, null, 'flex']}>\n              <Heading>{t('Your tickets')}</Heading>\n            </Box>\n            <Flex\n              flexDirection=\"column\"\n              mr={[null, null, null, '24px']}\n              alignItems={['center', null, null, 'flex-start']}\n            >\n              <Box mt={['32px', null, null, 0]}>\n                <Text display=\"inline\">{youHadText} </Text>\n                <Text display=\"inline\" bold>\n                  {userDataForRound.totalTickets}\n                </Text>\n                <Text display=\"inline\">{ticketsThisRoundText}</Text>\n              </Box>\n              <Button\n                onClick={onPresentViewTicketsModal}\n                height=\"auto\"\n                width=\"fit-content\"\n                p=\"0\"\n                variant=\"text\"\n                scale=\"sm\"\n              >\n                {t('View your tickets')}\n              </Button>\n            </Flex>\n          </>\n        )}\n      </Grid>\n    </StyledCardBody>\n  )\n}\n\nexport default PreviousRoundCardBody\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound, LotteryRoundGraphEntity } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks'\nimport { getGraphLotteries } from 'state/lottery/getLotteriesData'\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport RewardBrackets from '../RewardBrackets'\n\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst PreviousRoundCardFooter: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\n  lotteryNodeData,\n  lotteryId,\n}) => {\n  const { t } = useTranslation()\n  const [fetchedLotteryGraphData, setFetchedLotteryGraphData] = useState<LotteryRoundGraphEntity>()\n  const lotteryGraphDataFromState = useGetLotteryGraphDataById(lotteryId)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  useEffect(() => {\n    const getGraphData = async () => {\n      const fetchedGraphData = await getGraphLotteries(undefined, undefined, { id_in: [lotteryId] })\n      setFetchedLotteryGraphData(fetchedGraphData[0])\n    }\n    if (!lotteryGraphDataFromState) {\n      getGraphData()\n    }\n  }, [lotteryGraphDataFromState, lotteryId])\n\n  let prizeInBusd = new BigNumber(NaN)\n  if (lotteryNodeData) {\n    const { amountCollectedInCake } = lotteryNodeData\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\n  }\n\n  const getTotalUsers = (): string => {\n    if (!lotteryGraphDataFromState && fetchedLotteryGraphData) {\n      return fetchedLotteryGraphData?.totalUsers?.toLocaleString()\n    }\n\n    if (lotteryGraphDataFromState) {\n      return lotteryGraphDataFromState?.totalUsers?.toLocaleString()\n    }\n\n    return null\n  }\n\n  const getPrizeBalances = () => {\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={200} />\n        ) : (\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\n            ~${formatNumber(getBalanceNumber(prizeInBusd), 0, 0)}\n          </Heading>\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            unit=\" CAKE\"\n            value={getBalanceNumber(lotteryNodeData?.amountCollectedInCake)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  return (\n    <NextDrawWrapper>\n      <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\n        <Box>\n          <Heading>{t('Prize pot')}</Heading>\n          {getPrizeBalances()}\n        </Box>\n        <Box mb=\"24px\">\n          <Flex>\n            <Text fontSize=\"14px\" display=\"inline\">\n              {t('Total players this round')}:{' '}\n              {lotteryNodeData && (lotteryGraphDataFromState || fetchedLotteryGraphData) ? (\n                getTotalUsers()\n              ) : (\n                <Skeleton height={14} width={31} />\n              )}\n            </Text>\n          </Flex>\n        </Box>\n      </Flex>\n      <RewardBrackets lotteryNodeData={lotteryNodeData} isHistoricRound />\n    </NextDrawWrapper>\n  )\n}\n\nexport default PreviousRoundCardFooter\n","import { useEffect, useState } from 'react'\nimport { Flex, ExpandableLabel, CardFooter } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport FooterExpanded from './FooterExpanded'\n\ninterface PreviousRoundCardFooterProps {\n  lotteryNodeData: LotteryRound\n  lotteryId: string\n}\n\nconst PreviousRoundCardFooter: React.FC<PreviousRoundCardFooterProps> = ({ lotteryNodeData, lotteryId }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  useEffect(() => {\n    if (!lotteryId) {\n      setIsExpanded(false)\n    }\n  }, [lotteryId])\n\n  return (\n    <CardFooter p=\"0\">\n      {isExpanded && <FooterExpanded lotteryNodeData={lotteryNodeData} lotteryId={lotteryId} />}\n      <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\n        <ExpandableLabel\n          expanded={isExpanded}\n          onClick={() => {\n            if (lotteryId) {\n              setIsExpanded(!isExpanded)\n            }\n          }}\n        >\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </Flex>\n    </CardFooter>\n  )\n}\n\nexport default PreviousRoundCardFooter\n","import { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport {\n  CardHeader,\n  Card,\n  CardBody,\n  Text,\n  CardFooter,\n  ArrowBackIcon,\n  Flex,\n  Heading,\n  Skeleton,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryRound } from 'state/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport FinishedRoundTable from './FinishedRoundTable'\nimport { WhiteBunny } from '../../svgs'\nimport BuyTicketsButton from '../BuyTicketsButton'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport { processLotteryResponse, getDrawnDate } from '../../helpers'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\ninterface YourHistoryCardProps {\n  handleShowMoreClick: () => void\n  numUserRoundsRequested: number\n}\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 240px;\n`\n\nconst YourHistoryCard: React.FC<YourHistoryCardProps> = ({ handleShowMoreClick, numUserRoundsRequested }) => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { account } = useWeb3React()\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false)\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState<LotteryRound>(null)\n  const [selectedLotteryId, setSelectedLotteryId] = useState<string>(null)\n\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const handleHistoryRowClick = async (lotteryId: string) => {\n    setShouldShowRoundDetail(true)\n    setSelectedLotteryId(lotteryId)\n    const lotteryData = await fetchLottery(lotteryId)\n    const processedLotteryData = processLotteryResponse(lotteryData)\n    setSelectedLotteryNodeData(processedLotteryData)\n  }\n\n  const clearState = () => {\n    setShouldShowRoundDetail(false)\n    setSelectedLotteryNodeData(null)\n    setSelectedLotteryId(null)\n  }\n\n  const getHeader = () => {\n    if (shouldShowRoundDetail) {\n      return (\n        <Flex alignItems=\"center\">\n          <ArrowBackIcon cursor=\"pointer\" onClick={() => clearState()} mr=\"20px\" />\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\" justifyContent=\"center\">\n            <Heading scale=\"md\" mb=\"4px\">\n              {t('Round')} {selectedLotteryId || ''}\n            </Heading>\n            {selectedLotteryNodeData?.endTime ? (\n              <Text fontSize=\"14px\">\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\n              </Text>\n            ) : (\n              <Skeleton width=\"185px\" height=\"21px\" />\n            )}\n          </Flex>\n        </Flex>\n      )\n    }\n\n    return <Heading scale=\"md\">{t('Rounds')}</Heading>\n  }\n\n  const getBody = () => {\n    if (shouldShowRoundDetail) {\n      return <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n\n    const claimableRounds = userLotteryData?.rounds.filter((round) => {\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n    })\n\n    if (!account) {\n      return (\n        <StyledCardBody>\n          <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n            {t('Connect your wallet to check your history')}\n          </Text>\n          <ConnectWalletButton />\n        </StyledCardBody>\n      )\n    }\n    if (claimableRounds.length === 0) {\n      return (\n        <StyledCardBody>\n          <Box maxWidth=\"280px\">\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"16px\">\n              <WhiteBunny height=\"24px\" mr=\"8px\" /> <Text textAlign=\"left\">{t('No lottery history found')}</Text>\n            </Flex>\n            <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n              {t('Buy tickets for the next round!')}\n            </Text>\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} width=\"100%\" />\n          </Box>\n        </StyledCardBody>\n      )\n    }\n    return (\n      <FinishedRoundTable\n        handleHistoryRowClick={handleHistoryRowClick}\n        handleShowMoreClick={handleShowMoreClick}\n        numUserRoundsRequested={numUserRoundsRequested}\n      />\n    )\n  }\n\n  const getFooter = () => {\n    if (selectedLotteryNodeData) {\n      return <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n    return (\n      <CardFooter>\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Only showing data for Lottery V2')}\n          </Text>\n        </Flex>\n      </CardFooter>\n    )\n  }\n\n  return (\n    <StyledCard>\n      <CardHeader>{getHeader()}</CardHeader>\n      {getBody()}\n      {getFooter()}\n    </StyledCard>\n  )\n}\n\nexport default YourHistoryCard\n","import styled from 'styled-components'\nimport { IconButton, ArrowForwardIcon, ArrowBackIcon, ArrowLastIcon, Flex, Heading, Input } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  width: 60px;\n  height: 100%;\n  padding: 4px 16px;\n`\n\nconst StyledIconButton = styled(IconButton)`\n  width: 32px;\n\n  :disabled {\n    background: none;\n\n    svg {\n      fill: ${({ theme }) => theme.colors.textDisabled};\n\n      path {\n        fill: ${({ theme }) => theme.colors.textDisabled};\n      }\n    }\n  }\n`\n\ninterface RoundSwitcherProps {\n  isLoading: boolean\n  selectedRoundId: string\n  mostRecentRound: number\n  handleInputChange: (event: any) => void\n  handleArrowButtonPress: (targetRound: number) => void\n}\n\nconst RoundSwitcher: React.FC<RoundSwitcherProps> = ({\n  isLoading,\n  selectedRoundId,\n  mostRecentRound,\n  handleInputChange,\n  handleArrowButtonPress,\n}) => {\n  const { t } = useTranslation()\n  const selectedRoundIdAsInt = parseInt(selectedRoundId, 10)\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      handleInputChange(e)\n    }\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Flex alignItems=\"center\">\n        <Heading mr=\"8px\">{t('Round')}</Heading>\n        <StyledInput\n          pattern=\"^[0-9]+$\"\n          inputMode=\"numeric\"\n          disabled={isLoading}\n          id=\"round-id\"\n          name=\"round-id\"\n          value={selectedRoundId}\n          scale=\"lg\"\n          onChange={handleOnChange}\n        />\n      </Flex>\n      <Flex alignItems=\"center\">\n        <StyledIconButton\n          disabled={!selectedRoundIdAsInt || selectedRoundIdAsInt <= 1}\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt - 1)}\n          variant=\"text\"\n          scale=\"sm\"\n          mr=\"4px\"\n        >\n          <ArrowBackIcon />\n        </StyledIconButton>\n        <StyledIconButton\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt + 1)}\n          variant=\"text\"\n          scale=\"sm\"\n          mr=\"4px\"\n        >\n          <ArrowForwardIcon />\n        </StyledIconButton>\n        <StyledIconButton\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\n          onClick={() => handleArrowButtonPress(mostRecentRound)}\n          variant=\"text\"\n          scale=\"sm\"\n        >\n          <ArrowLastIcon />\n        </StyledIconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default RoundSwitcher\n","import { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryStatus } from 'config/constants/types'\nimport RoundSwitcher from './RoundSwitcher'\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nconst AllHistoryCard = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const dispatch = useAppDispatch()\n  const {\n    currentLotteryId,\n    lotteriesData,\n    currentRound: { status, isLoading },\n  } = useLottery()\n  const [latestRoundId, setLatestRoundId] = useState(null)\n  const [selectedRoundId, setSelectedRoundId] = useState('')\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null)\n  const timer = useRef(null)\n\n  const numRoundsFetched = lotteriesData?.length\n\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\n      const mostRecentFinishedRoundId =\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n      setLatestRoundId(mostRecentFinishedRoundId)\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\n    }\n  }, [currentLotteryId, status])\n\n  useEffect(() => {\n    setSelectedLotteryNodeData(null)\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      setSelectedLotteryNodeData(processedLotteryData)\n    }\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData()\n      }\n      clearInterval(timer.current)\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch])\n\n  const handleInputChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    if (value) {\n      setSelectedRoundId(value)\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('')\n      }\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString())\n      }\n    } else {\n      setSelectedRoundId('')\n    }\n  }\n\n  const handleArrowButtonPress = (targetRound) => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString())\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1')\n    }\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardHeader>\n        <RoundSwitcher\n          isLoading={isLoading}\n          selectedRoundId={selectedRoundId}\n          mostRecentRound={latestRoundId}\n          handleInputChange={handleInputChange}\n          handleArrowButtonPress={handleArrowButtonPress}\n        />\n        <Box mt=\"8px\">\n          {selectedRoundId ? (\n            selectedLotteryNodeData?.endTime ? (\n              <Text fontSize=\"14px\">\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\n              </Text>\n            ) : (\n              <Skeleton width=\"185px\" height=\"21px\" />\n            )\n          ) : null}\n        </Box>\n      </StyledCardHeader>\n      <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n      <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n    </StyledCard>\n  )\n}\n\nexport default AllHistoryCard\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport fetchUnclaimedUserRewards from 'state/lottery/fetchUnclaimedUserRewards'\nimport { FetchStatus } from 'config/constants/types'\n\nconst useGetUnclaimedRewards = () => {\n  const { account } = useWeb3React()\n  const { isTransitioning, currentLotteryId } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const lotteriesData = useGetLotteriesGraphData()\n  const [unclaimedRewards, setUnclaimedRewards] = useState([])\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.Idle)\n\n  useEffect(() => {\n    // Reset on account change and round transition\n    setFetchStatus(FetchStatus.Idle)\n  }, [account, isTransitioning])\n\n  const fetchAllRewards = async () => {\n    setFetchStatus(FetchStatus.Fetching)\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(\n      account,\n      userLotteryData,\n      lotteriesData,\n      currentLotteryId,\n    )\n    setUnclaimedRewards(unclaimedRewardsResponse)\n    setFetchStatus(FetchStatus.Fetched)\n  }\n\n  return { fetchAllRewards, unclaimedRewards, fetchStatus }\n}\n\nexport default useGetUnclaimedRewards\n","import { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Flex, useModal, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { FetchStatus, LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ClaimPrizesModal from './ClaimPrizesModal'\nimport useGetUnclaimedRewards from '../hooks/useGetUnclaimedRewards'\n\nconst TicketImage = styled.img`\n  height: 60px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100px;\n  }\n`\n\nconst TornTicketImage = styled.img`\n  height: 54px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 84px;\n  }\n`\n\nconst CheckPrizesSection = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const { fetchAllRewards, unclaimedRewards, fetchStatus } = useGetUnclaimedRewards()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const [hasCheckedForRewards, setHasCheckedForRewards] = useState(false)\n  const [hasRewardsToClaim, setHasRewardsToClaim] = useState(false)\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={unclaimedRewards} />, false)\n  const isFetchingRewards = fetchStatus === FetchStatus.Fetching\n  const lotteryIsNotClaimable = status === LotteryStatus.CLOSE\n  const isCheckNowDisabled = !userLotteryData.account || lotteryIsNotClaimable\n\n  useEffect(() => {\n    if (fetchStatus === FetchStatus.Fetched) {\n      // Manage showing unclaimed rewards modal once per page load / once per lottery state change\n      if (unclaimedRewards.length > 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(true)\n        setHasCheckedForRewards(true)\n        onPresentClaimModal()\n      }\n\n      if (unclaimedRewards.length === 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(false)\n        setHasCheckedForRewards(true)\n      }\n    }\n  }, [unclaimedRewards, hasCheckedForRewards, fetchStatus, onPresentClaimModal])\n\n  useEffect(() => {\n    // Clear local state on account change, or when lottery isTransitioning state changes\n    setHasRewardsToClaim(false)\n    setHasCheckedForRewards(false)\n  }, [account, isTransitioning])\n\n  const getBody = () => {\n    if (!account) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\" alignItems=\"center\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Connect your wallet')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n              {t(\"to check if you've won!\")}\n            </Heading>\n            <ConnectWalletButton width=\"190px\" />\n          </Flex>\n          <TicketImage src=\"/images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && !hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TornTicketImage src=\"/images/lottery/torn-ticket-l.png\" alt=\"torn lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('No prizes to collect')}...\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Better luck next time!')}\n            </Heading>\n          </Flex>\n          <TornTicketImage src=\"/images/lottery/torn-ticket-r.png\" alt=\"torn lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Congratulations!')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Why not play again')}\n            </Heading>\n          </Flex>\n          <TicketImage src=\"/images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    const checkNowText = () => {\n      if (lotteryIsNotClaimable) {\n        return `${t('Calculating rewards')}...`\n      }\n      if (isFetchingRewards) {\n        return t('Checking')\n      }\n      return t('Check Now')\n    }\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Flex mx={['4px', null, '16px']} flexDirection=\"row\" alignItems={'center'}>\n          <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n            {t('Are you a winner?')}\n          </Heading>\n          <Button\n            disabled={isCheckNowDisabled}\n            onClick={fetchAllRewards}\n            isLoading={isFetchingRewards}\n            endIcon={isFetchingRewards ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n          >\n            {checkNowText()}\n          </Button>\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return <Flex>{getBody()}</Flex>\n}\n\nexport default CheckPrizesSection\n","import { useWeb3React } from '@web3-react/core'\nimport { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchAdditionalUserLotteries } from 'state/lottery'\nimport { MAX_USER_LOTTERIES_REQUEST_SIZE } from 'state/lottery/getUserLotteryData'\n\nconst useShowMoreUserRounds = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const [numUserRoundsRequested, setNumUserRoundsRequested] = useState(MAX_USER_LOTTERIES_REQUEST_SIZE)\n\n  const handleShowMoreUserRounds = () => {\n    dispatch(fetchAdditionalUserLotteries({ account, skip: numUserRoundsRequested }))\n    setNumUserRoundsRequested(numUserRoundsRequested + MAX_USER_LOTTERIES_REQUEST_SIZE)\n  }\n\n  return { numUserRoundsRequested, handleShowMoreUserRounds }\n}\n\nexport default useShowMoreUserRounds\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { LotteryStatus } from 'config/constants/types'\nimport PageSection from 'components/PageSection'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { useFetchLottery, useLottery } from 'state/lottery/hooks'\nimport {\n  TITLE_BG,\n  GET_TICKETS_BG,\n  FINISHED_ROUNDS_BG,\n  FINISHED_ROUNDS_BG_DARK,\n  CHECK_PRIZES_BG,\n} from './pageSectionStyles'\nimport useGetNextLotteryEvent from './hooks/useGetNextLotteryEvent'\nimport useStatusTransitions from './hooks/useStatusTransitions'\nimport Hero from './components/Hero'\nimport NextDrawCard from './components/NextDrawCard'\nimport Countdown from './components/Countdown'\nimport HistoryTabMenu from './components/HistoryTabMenu'\nimport YourHistoryCard from './components/YourHistoryCard'\nimport AllHistoryCard from './components/AllHistoryCard'\nimport CheckPrizesSection from './components/CheckPrizesSection'\nimport HowToPlay from './components/HowToPlay'\nimport useShowMoreUserHistory from './hooks/useShowMoreUserRounds'\nimport { PageMeta } from '../../components/Layout/Page'\n\nconst LotteryPage = styled.div`\n  min-height: calc(100vh - 50px);\n`\n\nconst Lottery = () => {\n  useFetchLottery()\n  useStatusTransitions()\n  const { t } = useTranslation()\n  const { isDark, theme } = useTheme()\n  const {\n    currentRound: { status, endTime },\n  } = useLottery()\n  const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\n  const endTimeAsInt = parseInt(endTime, 10)\n  const { nextEventTime, postCountdownText, preCountdownText } = useGetNextLotteryEvent(endTimeAsInt, status)\n  const { numUserRoundsRequested, handleShowMoreUserRounds } = useShowMoreUserHistory()\n\n  return (\n    <>\n      <PageMeta />\n      <LotteryPage>\n        <PageSection background={CHECK_PRIZES_BG} hasCurvedDivider={false} index={2}>\n          <CheckPrizesSection />\n        </PageSection>\n        {/* <PageSection background={TITLE_BG} index={1} hasCurvedDivider={false}>\n          <Hero />\n        </PageSection> */}\n        <PageSection\n          containerProps={{ style: { marginTop: '-30px' } }}\n          background={GET_TICKETS_BG}\n          concaveDivider\n          clipFill={{ light: '#7645D9' }}\n          dividerPosition=\"top\"\n          index={2}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" pt=\"24px\">\n            {status === LotteryStatus.OPEN && (\n              <Heading scale=\"xl\" color=\"#ffffff\" mb=\"24px\" textAlign=\"center\">\n                {t('Get your tickets now!')}\n              </Heading>\n            )}\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"48px\">\n              {nextEventTime && (postCountdownText || preCountdownText) ? (\n                <Countdown\n                  nextEventTime={nextEventTime}\n                  postCountdownText={postCountdownText}\n                  preCountdownText={preCountdownText}\n                />\n              ) : (\n                <Skeleton height=\"41px\" width=\"250px\" />\n              )}\n            </Flex>\n            <NextDrawCard />\n          </Flex>\n        </PageSection>\n\n        <PageSection\n          innerProps={{ style: { margin: '0', width: '100%' } }}\n          background={isDark ? FINISHED_ROUNDS_BG_DARK : FINISHED_ROUNDS_BG}\n          hasCurvedDivider={false}\n          index={2}\n        >\n          <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n            <Heading mb=\"24px\" scale=\"xl\">\n              {t('Finished Rounds')}\n            </Heading>\n            <Box mb=\"24px\">\n              <HistoryTabMenu\n                activeIndex={historyTabMenuIndex}\n                setActiveIndex={(index) => setHistoryTabMenuIndex(index)}\n              />\n            </Box>\n            {historyTabMenuIndex === 0 ? (\n              <AllHistoryCard />\n            ) : (\n              <YourHistoryCard\n                handleShowMoreClick={handleShowMoreUserRounds}\n                numUserRoundsRequested={numUserRoundsRequested}\n              />\n            )}\n          </Flex>\n        </PageSection>\n        {/* <PageSection\n          dividerPosition=\"top\"\n          dividerFill={{ light: theme.colors.background }}\n          clipFill={{ light: '#9A9FD0', dark: '#66578D' }}\n          index={2}\n        >\n          <HowToPlay />\n        </PageSection> */}\n      </LotteryPage>\n    </>\n  )\n}\n\nexport default Lottery\n","export const TITLE_BG = 'linear-gradient(180deg, #7645D9 0%, #452A7A 100%)'\nexport const GET_TICKETS_BG = 'linear-gradient(180deg, #7645D9 0%, #5121B1 100%)'\nexport const CHECK_PRIZES_BG = 'linear-gradient(139.73deg, #313D5C 0%, #3D2A54 100%)'\nexport const FINISHED_ROUNDS_BG = 'linear-gradient(180deg, #CBD7EF 0%, #9A9FD0 100%)'\nexport const FINISHED_ROUNDS_BG_DARK = 'linear-gradient(180deg, #434575 0%, #66578D 100%)'\n","import Lottery from '../views/Lottery'\n\nexport default Lottery\n","import { Contract, Overrides } from '@ethersproject/contracts'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[],\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\n  // By convention, BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation\n    .mul(BigNumber.from(10000).add(BigNumber.from(gasMarginPer10000)))\n    .div(BigNumber.from(10000))\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[] = [],\n  overrides: Overrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<TransactionResponse> => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.deposit(pid, value, { ...options, gasPrice })\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice()\n\n  return masterChefContract.deposit(pid, '0', { ...options, gasPrice })\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = poolsConfig\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport { CHAIN_ID } from 'config/constants/networks'\nimport store from 'state'\nimport { GAS_PRICE_GWEI } from 'state/types'\n\n/**\n * Function to return gasPrice outwith a react component\n */\nconst getGasPrice = (): string => {\n  const chainId = CHAIN_ID\n  const state = store.getState()\n  const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\n}\n\nexport default getGasPrice\n"],"names":["window","__NEXT_P","push","StyledCardRibbon","styled","theme","zIndices","ribbon","variantColor","colors","ribbonPosition","CardRibbon","text","props","div","title","defaultProps","Svg","viewBox","path","d","TooltipText","Text","textSubtle","value","ref","useRef","useEffect","current","selectLotteriesData","state","lottery","lotteriesData","maxNumberTicketsPerBuyOrClaimSelector","createSelector","maxNumberTicketsPerBuyOrClaim","maxNumberTicketsPerBuyOrClaimAsString","BigNumber","currentRoundSelector","currentRound","priceTicketInCake","discountDivisor","amountCollectedInCake","priceTicketInCakeAsString","discountDivisorAsString","amountCollectedInCakeAsString","lotterySelector","isTransitioning","currentLotteryId","userLotteryData","processedCurrentRound","useGetCurrentLotteryId","useSelector","useGetUserLotteriesGraphData","useGetLotteryGraphDataById","lotteryId","lotteryGraphDataByIdSelector","useMemo","find","id","makeLotteryGraphDataByIdSelector","useLottery","endTime","status","useTranslation","t","LotteryStatus","nextEventTime","preCountdownText","postCountdownText","useWeb3React","account","dispatch","useAppDispatch","previousStatus","usePreviousValue","fetchPublicLotteries","fetchUserLotteries","fetchCurrentLotteryId","interval","setInterval","clearInterval","fill","fillRule","clipRule","ellipse","cx","cy","rx","ry","transform","uniqueId","g","clipPath","opacity","style","mixBlendMode","defs","linearGradient","x1","y1","x2","y2","gradientUnits","stop","stopColor","offset","rect","width","height","lotteryAddress","getLotteryV2Address","fetchCakeRewardsForTickets","winningTickets","calls","cakeRewards","cakeTotal","ticketsWithUnclaimedRewards","map","winningTicket","roundId","rewardBracket","name","address","params","multicallv2","lotteryV2Abi","reduce","accum","cakeReward","plus","toString","BIG_ZERO","index","console","error","getRewardBracketByNumber","ticketNumber","finalNumber","ticketNumAsArray","split","reverse","winningNumsAsArray","matchingNumbers","length","getWinningTickets","roundDataAndUserTickets","userTickets","ticketsWithRewardBrackets","allWinningTickets","unclaimedWinningTickets","ticket","number","filter","getWinningNumbersForRound","targetRoundId","targetRound","pastLottery","fetchUnclaimedUserRewards","rounds","roundsInRange","claimableRounds","roundsWithPossibleWinnings","roundsToCheck","idsToCheck","userTicketData","roundsWithTickets","roundDataAndWinningTickets","winningTicketsForPastRounds","roundsWithWinningTickets","roundsWithUnclaimedWinningTickets","toLowerCase","round","lastCheckableRoundId","parseInt","MAX_LOTTERIES_REQUEST_SIZE","claimed","totalTickets","slice","NUM_ROUNDS_TO_CHECK_FOR_REWARDS","fetchUserTicketsForMultipleRounds","roundData","Promise","all","winningTicketData","parseRetrievedNumber","numberAsArray","splice","join","getDrawnDate","locale","endTimeInMs","Date","toLocaleDateString","dateTimeOptions","dateOptions","year","month","day","timeOptions","hour","minute","processLotteryResponse","lotteryData","isLoading","startTime","treasuryFee","firstTicketId","lastTicketId","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","mask","maskUnits","x","y","BallTextWrapper","BallText","rotationTransform","ballsMap","pink","circle","r","lilac","teal","aqua","green","yellow","BallWithNumber","color","size","fontSize","BallComponent","Flex","alignItems","justifyContent","position","mx","bold","rotateText","containerProps","useState","numAsArray","rotationValues","setRotationValues","random","num","StyledNumberWrapper","cardBorder","radii","default","background","RewardHighlighter","numberMatches","primary","localId","flexDirection","mb","digit","_uniqueId","onSuccess","roundsToClaim","gasPrice","useGasPrice","useToast","toastSuccess","useCatchTxError","fetchWithCatchTxError","loading","Math","ceil","activeClaimIndex","toNumber","lotteryContract","useLotteryV2Contract","activeClaimData","cakePriceBusd","usePriceCakeBusd","dollarReward","times","rewardAsBalance","getBalanceAmount","dollarRewardAsBalance","claimTicketsCallData","ticketIds","brackets","shouldBatchRequest","lt","handleProgressToNextClaim","setActiveClaimIndex","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","bracketsSlice","handleClaim","receipt","callWithEstimateGas","ToastDescriptionWithTx","txHash","transactionHash","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","setPendingBatchClaims","claimNum","claimTotal","textAlign","Balance","lineHeight","unit","PresentWonIcon","ml","mt","prefix","Button","pendingTx","endIcon","AutoRenewIcon","spin","onClick","pendingBatchClaims","StyledModal","ModalContainer","mediaQueries","sm","StyledModalHeader","ModalHeader","gradients","cardHeader","BunnyDecoration","showConfetti","confetti","particleCount","startVelocity","gravity","spread","origin","onDismiss","delay","minWidth","img","src","alt","ModalTitle","Heading","ModalCloseButton","ModalBody","p","ClaimPrizesInner","TopBox","dropdown","ScrollBox","Box","TicketSkeleton","Skeleton","userWinningTickets","isFetched","claimData","useTheme","onPresentClaimModal","useModal","ClaimPrizesModal","TooltipComponent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","addWinningTicketInfoToAllTickets","_allTickets","_allWinningTickets","winningTicketEquivalent","fetchData","processedLotteryData","allTicketsWithWinningTicketInfo","ticketsSortedByWinners","fetchUserTicketsForOneRound","fetchLottery","setUserWinningTickets","setLotteryInfo","tickets","orderBy","undefined","setAllUserTickets","textTransform","lotteryInfo","WinningNumbers","my","Ticket","mr","allUserTickets","TicketNumber","borderTop","InfoIcon","getFooter","StyledButton","children","disabled","scale","variant","InputsContainer","isDuplicate","focused","DigitInput","primaryDark","duplicateWith","updateTicket","containerRef","digit1","digit2","digit3","digit4","digit5","digit6","digitRefs","scrollInputIntoView","scrollIntoView","block","behavior","onPasteHandler","e","preventDefault","pasteContent","clipboardData","getData","test","filler","Array","onFocusHandler","setFocused","onBlurHandler","onChangeHandler","event","digitId","currentKey","key","includes","newNumbers","numbers","nextDigitId","nextInput","focus","prevDigitId","type","onKeyDown","placeholder","onChange","onFocus","onBlur","onPaste","inputMode","Modal","ScrollableContainer","totalCost","randomize","allComplete","onConfirm","isConfirming","headerBackground","onBack","TicketInput","m","ArrowBackIcon","numberOfTickets","userCurrentTickets","minNumber","maxNumber","existingTicketNumbers","generatedTicketNumbers","count","randomNumber","ticketsToBuy","getInitialState","amount","randomTicketsAsStringArray","generateTicketNumbers","from","_","isComplete","reducer","action","payload","ticketId","newDuplicates","forEach","prevTicketId","dupsToUpdate","indexToRemove","findIndex","duplicate","updatedTicket","every","Error","ShortcutButtonsWrapper","isVisible","BuyingStage","useCallWithGasPrice","callWithGasPrice","BUY","useCake","reader","signer","useTokenBalance","tokens","balance","fetchStatus","stringifiedUserCake","userCake","toJSON","memoisedUserCake","hasFetchedBalance","FetchStatus","userCakeDisplayBalance","getFullDisplayBalance","limitNumberByMaxTicketsPerBuy","useCallback","gt","getTicketCostAfterDiscount","numberTickets","minus","getMaxTicketBuyWithDiscount","costAfterDiscount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","setUserNotEnoughCake","eq","setMaxTicketPurchaseExceeded","maxPurchase","maxBalancePurchase","limitedMaxPurchase","maxPlusDiscountTickets","secondTicketDiscountBuy","setMaxPossibleTicketPurchase","getMaxPossiblePurchase","numberOfTicketsToBuy","costBeforeDiscount","discountBeingApplied","setTicketCostBeforeDiscount","setTotalCost","setDiscountValue","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","maxPossibleTicketPurchase","floor","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleNumberButtonClick","setTicketsToBuy","toFixed","useTicketsReducer","useReducer","reversedTicket","unshift","getTicketsForPurchase","useApproveConfirmTransaction","onRequiresApproval","requiresApproval","cakeContractReader","onApprove","cakeContractApprover","MaxUint256","onApproveSuccess","ticketsForPurchase","fetchUserTicketsAndLotteries","isApproving","isApproved","isConfirmed","handleApprove","handleConfirm","disableBuying","userNotEnoughCake","lte","buyingStage","EDIT","EditNumbersModal","setBuyingStage","BalanceInput","isWarning","maxTicketPurchaseExceeded","onUserInput","input","inputAsInt","inputAsBN","currencyValue","maxTickets","NumTicketsToBuyButton","display","discountValue","percentageAsBn","ticketCostBeforeDiscount","isNaN","percentageDiscount","HelpIcon","pt","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ButtonArrangement","confirmLabel","confirmId","ArrowForwardIcon","ConnectWalletButton","onPresentBuyTicketsModal","BuyTicketsModal","WaitIcon","ticketBuyIsDisabled","BuyTicketsButton","roundStatus","isPreviousRound","PreviousRoundTicketsInner","CurrentRoundTicketsInner","cakeAmount","numberWinners","isHistoricRound","isBurn","numberMatch","getRewardText","getBalanceNumber","decimals","Wrapper","RewardsInner","lotteryNodeData","cakeToBurn","rewardsLessTreasuryFee","amountLessTreasuryFee","setState","getCakeRewards","bracket","shareAsPercentage","bracketIndex","RewardBracketDetail","Grid","md","StyledCard","Card","NextDrawWrapper","currentLanguage","onPresentViewTicketsModal","ViewTicketsModal","prizeInBusd","endTimeMs","endDate","isLotteryOpen","userTicketCount","ticketRoundText","youHaveText","ticketsThisRoundText","CardHeader","Boolean","toLocaleString","CardBody","maxWidth","CardFooter","isExpanded","RewardBrackets","ExpandableLabel","expanded","setIsExpanded","StyledTimerFlex","showTooltip","StyledTimerText","gold","minutes","hours","days","seconds","wrapperClassName","className","timer","setLotteryIsTransitioning","currentSeconds","now","setSecondsRemaining","prevSecondsRemaining","fetchCurrentLottery","secondsRemaining","useNextEventCountdown","getTimePeriods","Timer","setActiveIndex","activeIndex","ButtonMenu","onItemClick","ButtonMenuItem","StyledSmallDotIcon","SmallDotIcon","textDisabled","hasWon","endTimeAsDate","toLocaleTimeString","PrizeIcon","ChevronRightIcon","handleShowMoreClick","numUserRoundsRequested","handleHistoryRowClick","filteredForClaimable","sortedByRoundId","sort","roundA","roundB","px","pb","overflowY","finishedRound","FinishedRoundRow","StyledCardBody","xs","userDataForRound","userLotteryRound","useMatchBreakpoints","isLg","isXl","isXxl","isLargerScreen","currentLotteryIdAsInt","isLatestRound","totalTicketNumber","youHadText","BunnyPlaceholderIcon","lotteryGraphDataFromState","getGraphData","fetchedGraphData","getGraphLotteries","id_in","setFetchedLotteryGraphData","NaN","formatNumber","fetchedLotteryGraphData","totalUsers","getTotalUsers","FooterExpanded","setShouldShowRoundDetail","setSelectedLotteryId","setSelectedLotteryNodeData","shouldShowRoundDetail","cursor","selectedLotteryId","selectedLotteryNodeData","PreviousRoundCardBody","WhiteBunny","FinishedRoundTable","getBody","PreviousRoundCardFooter","StyledInput","Input","StyledIconButton","IconButton","selectedRoundId","mostRecentRound","handleInputChange","handleArrowButtonPress","selectedRoundIdAsInt","pattern","currentTarget","validity","valid","ArrowLastIcon","StyledCardHeader","numRoundsFetched","mostRecentFinishedRoundId","setLatestRoundId","setSelectedRoundId","fetchLotteryData","RoundSwitcher","latestRoundId","target","setFetchStatus","fetchAllRewards","unclaimedRewardsResponse","setUnclaimedRewards","unclaimedRewards","TicketImage","TornTicketImage","useGetUnclaimedRewards","isFetchingRewards","lotteryIsNotClaimable","isCheckNowDisabled","hasCheckedForRewards","setHasRewardsToClaim","setHasCheckedForRewards","hasRewardsToClaim","MAX_USER_LOTTERIES_REQUEST_SIZE","handleShowMoreUserRounds","fetchAdditionalUserLotteries","skip","setNumUserRoundsRequested","LotteryPage","fetchPublicDataOnly","useFastRefreshEffect","batch","useFetchLottery","useStatusTransitions","isDark","endTimeAsInt","useGetNextLotteryEvent","useShowMoreUserHistory","PageMeta","PageSection","hasCurvedDivider","CheckPrizesSection","marginTop","concaveDivider","clipFill","light","dividerPosition","Countdown","NextDrawCard","innerProps","margin","HistoryTabMenu","historyTabMenuIndex","setHistoryTabMenuIndex","AllHistoryCard","YourHistoryCard","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","rawGasEstimation","gasEstimation","mul","add","overrides","tx","gasLimit","options","DEFAULT_GAS_LIMIT","stakeFarm","masterChefContract","pid","getGasPrice","DEFAULT_TOKEN_DECIMAL","deposit","unstakeFarm","withdraw","harvestFarm","getActivePools","eligiblePools","blockNumber","startBlockCalls","endBlockCalls","startBlocks","endBlocks","poolsConfig","pool","sousId","isFinished","simpleRpcProvider","contractAddress","getAddress","multicall","sousChefV2","poolCheck","startBlock","endBlock","gte","chainId","CHAIN_ID","userGas","store","user","GAS_PRICE_GWEI","ChainId"],"sourceRoot":""}