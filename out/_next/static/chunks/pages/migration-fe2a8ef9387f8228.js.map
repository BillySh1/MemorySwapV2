{"version":3,"file":"static/chunks/pages/migration-fe2a8ef9387f8228.js","mappings":"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","sources":["webpack://_N_E/?1912","webpack://_N_E/./packages/uikit/src/components/Spinner/PanIcon.tsx","webpack://_N_E/./packages/uikit/src/components/Spinner/PancakeIcon.tsx","webpack://_N_E/./packages/uikit/src/components/Spinner/Spinner.tsx","webpack://_N_E/./src/state/farmsV1/hooks.ts","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useFetchPublicPoolsData.ts","webpack://_N_E/./src/views/Migration/components/ProgressSteps.tsx","webpack://_N_E/./src/views/Migration/components/MigrationSticky.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/TableHeader.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/EmptyText.tsx","webpack://_N_E/./src/views/Migration/components/MigrationTable/StyledTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/NameCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/StakedCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/AutoEarningsCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/EarningsCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/TotalStakedCell.tsx","webpack://_N_E/./src/views/Migration/hook/V1/Pool/useUnstakePool.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/UnstakeButton.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/Unstaked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/Cells/ExpandActionCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/Stake.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/AutoEarning.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/Earning.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/TotalStaked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/PoolRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/PoolTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldPool/index.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Farm.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Staked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Earned.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Multiplier.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Liquidity.tsx","webpack://_N_E/./src/views/Migration/hook/V1/Farms/useUnstakeFarms.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/UnstakeButton.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/Cells/Unstake.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Staked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Earned.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Multiplier.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Liquidity.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/FarmRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/FarmTable.tsx","webpack://_N_E/./src/views/Migration/components/types.ts","webpack://_N_E/./src/views/Migration/components/MigrationStep1/OldFarm/index.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/Cells/StakedCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/PoolRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/PoolTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewPool/index.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/Cells/AprCell.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/Cells/StakeButtonCells.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/StakeButton.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/Staked.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/AprRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/ActionPanel/ActionPanel.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/FarmRow.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/FarmTable.tsx","webpack://_N_E/./src/views/Migration/components/MigrationStep2/NewFarm/index.tsx","webpack://_N_E/./src/views/Migration/index.tsx","webpack://_N_E/./src/pages/migration.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/migration\",\n      function () {\n        return require(\"private-next-pages/migration.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/migration\"])\n      });\n    }\n  ","import React from \"react\";\nimport Svg from \"../Svg/Svg\";\nimport { SvgProps } from \"../Svg/types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 256 256\" {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M166.898 204.279C172.402 190.795 170.197 176.127 166.942 163.633C164.747 155.208 156.522 149.043 143.339 146.339C130.289 143.662 113.23 144.62 95.212 149.658C77.1941 154.696 61.9863 162.761 52.0088 171.877C41.9295 181.085 37.8164 190.7 40.0117 199.126C43.2669 211.619 48.4857 225.444 59.7919 234.228C70.9463 242.894 88.7701 247.193 118.461 238.891C148.152 230.589 161.467 217.582 166.898 204.279ZM119.268 241.986C179.746 225.075 176.514 188.072 169.929 162.798C164.622 142.43 131.106 136.301 94.4056 146.563C57.7053 156.825 31.7183 179.593 37.0251 199.961C43.6102 225.235 58.7891 258.897 119.268 241.986Z\"\n        fill=\"#464649\"\n      />\n      <path\n        d=\"M155.801 175.68C158.653 186.628 180.351 181.576 214.977 171.894C249.604 162.212 257.158 150.578 254.305 139.63C251.453 128.682 244.685 121.053 216.678 128.884C182.051 138.566 152.948 164.732 155.801 175.68Z\"\n        fill=\"#606063\"\n      />\n      <path\n        d=\"M159.97 178.737L175.437 178.709C178.284 178.704 178.523 174.429 177.474 164.815C176.82 158.816 173.457 154.101 171.27 155.477L159.942 163.875L159.97 178.737Z\"\n        fill=\"#464649\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M162.261 177.996C160.059 177.319 159.158 176.266 158.788 174.845C158.644 174.296 158.636 173.375 159.104 171.965C159.566 170.568 160.432 168.889 161.754 166.98C164.397 163.161 168.612 158.775 174.091 154.332C185.037 145.456 200.6 136.7 217.484 131.979C231.34 128.104 239.201 128.297 243.777 130.191C248.018 131.946 250.005 135.425 251.319 140.465C251.901 142.7 251.928 144.848 251.283 146.962C250.634 149.091 249.235 151.411 246.622 153.858C241.312 158.83 231.342 163.998 214.171 168.799C196.798 173.657 182.967 177.263 173.149 178.336C168.216 178.875 164.644 178.728 162.261 177.996ZM214.977 171.894C180.351 181.576 158.653 186.628 155.801 175.68C152.948 164.732 182.051 138.566 216.678 128.884C244.685 121.053 251.453 128.682 254.305 139.63C257.158 150.578 249.604 162.212 214.977 171.894Z\"\n        fill=\"#464649\"\n      />\n      <path\n        d=\"M169.925 161.024C176.511 186.298 179.743 223.301 119.264 240.212C58.7859 257.123 43.607 223.461 37.022 198.187C31.7151 177.819 57.7022 155.052 94.4024 144.789C131.103 134.527 164.619 140.656 169.925 161.024Z\"\n        fill=\"#606063\"\n      />\n      <path\n        d=\"M62.2322 217.512C45.5076 212.12 42.4613 203.795 40.3848 196.052L41.9594 211.275L50.2352 225.685L64.4374 238.481L80.947 244.327C82.4065 243.612 89.4986 243.299 83.1029 242.028C76.7073 240.758 72.7474 234.756 69.9914 231.378C68.2638 226.484 67.7365 219.287 62.2322 217.512Z\"\n        fill=\"#464649\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M166.895 202.505C172.399 189.021 170.194 174.353 166.939 161.86C164.744 153.434 156.519 147.269 143.336 144.565C130.286 141.888 113.227 142.846 95.2088 147.884C77.1909 152.922 61.9831 160.987 52.0056 170.103C41.9263 179.311 37.8132 188.926 40.0086 197.352C43.2637 209.845 48.4825 223.67 59.7887 232.454C70.9431 241.12 88.7669 245.419 118.458 237.117C148.149 228.815 161.464 215.809 166.895 202.505ZM119.264 240.212C179.743 223.301 176.511 186.298 169.925 161.024C164.619 140.656 131.103 134.527 94.4024 144.789C57.7022 155.052 31.7151 177.819 37.022 198.187C43.607 223.461 58.7859 257.123 119.264 240.212Z\"\n        fill=\"#464649\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M164.233 181.686C165.018 182.322 165.157 183.497 164.543 184.311C162.98 186.382 161.187 188.422 159.188 190.412C158.469 191.128 157.327 191.104 156.636 190.36C155.945 189.615 155.968 188.431 156.687 187.716C158.576 185.834 160.252 183.925 161.7 182.007C162.314 181.193 163.448 181.05 164.233 181.686ZM57.4215 216.239C57.6566 215.235 58.6323 214.619 59.6008 214.863C73.2899 218.308 91.7045 217.793 111.035 212.388C120.262 209.808 128.779 206.37 136.271 202.374C137.157 201.901 138.245 202.263 138.701 203.181C139.157 204.099 138.809 205.226 137.923 205.699C130.195 209.821 121.438 213.352 111.976 215.998C92.2044 221.527 73.1589 222.124 58.7494 218.497C57.7809 218.253 57.1863 217.242 57.4215 216.239Z\"\n        fill=\"#979797\"\n      />\n      <path\n        d=\"M159.836 163.292C164.405 180.829 141.059 195.381 109.857 204.106C78.655 212.831 51.4793 212.682 46.8428 194.887C42.2064 177.092 65.6193 162.798 96.8214 154.074C128.024 145.349 155.266 145.755 159.836 163.292Z\"\n        fill=\"#464649\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M145.831 183.549C154.508 176.998 157.462 170.578 155.854 164.406C154.245 158.233 148.575 154.225 137.894 153.086C127.333 151.96 113.281 153.898 97.8965 158.2C82.4985 162.506 69.3986 168.094 60.8132 174.54C52.1526 181.043 49.1801 187.461 50.825 193.774C52.4698 200.087 58.1557 204.083 68.7987 205.189C79.3491 206.285 93.384 204.285 108.782 199.98C124.166 195.678 137.251 190.028 145.831 183.549ZM110.264 205.113C141.466 196.388 164.405 180.829 159.836 163.292C155.266 145.755 128.024 145.349 96.8214 154.074C65.6193 162.798 42.2064 177.092 46.8428 194.887C51.4793 212.682 79.0614 213.838 110.264 205.113Z\"\n        fill=\"#737373\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M103.877 181.153C89.0555 185.297 76.4977 192.072 68.1169 199.619C67.3647 200.297 66.2249 200.214 65.5711 199.434C64.9173 198.655 64.997 197.474 65.7492 196.796C74.622 188.806 87.7006 181.803 102.936 177.543C106.034 176.676 109.107 175.955 112.134 175.375C113.114 175.187 114.056 175.858 114.237 176.873C114.419 177.889 113.771 178.864 112.792 179.052C109.86 179.614 106.881 180.313 103.877 181.153ZM123.847 175.658C123.792 174.627 124.554 173.745 125.549 173.688C132.378 173.297 138.774 173.682 144.424 174.797C145.403 174.991 146.046 175.97 145.86 176.984C145.673 177.999 144.728 178.664 143.749 178.471C138.431 177.421 132.333 177.045 125.749 177.422C124.753 177.479 123.902 176.69 123.847 175.658Z\"\n        fill=\"#606063\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Svg from \"../Svg/Svg\";\nimport { SvgProps } from \"../Svg/types\";\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 128 128\" {...props}>\n      <svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M56.7204 37.5858C56.7204 45.3822 58.0271 54.1169 60.2906 60.8591C61.4246 64.2369 62.7705 67.0285 64.249 68.946C65.742 70.8826 67.1906 71.7103 68.5307 71.7103C71.1919 71.7103 74.4165 70.5307 77.8384 68.3524C81.235 66.1902 84.7001 63.1234 87.8127 59.5481C94.0844 52.3439 98.6784 43.3694 98.6784 35.942C98.6784 28.1653 97.1567 21.2636 93.9931 16.3543C90.8793 11.5222 86.1363 8.54284 79.3564 8.54284C72.6009 8.54284 66.9825 11.9157 63.0072 17.2564C59.0174 22.6164 56.7204 29.9263 56.7204 37.5858Z\"\n          fill=\"#FEDC90\"\n          stroke=\"#D1884F\"\n          strokeWidth=\"2.89134\"\n        />\n        <path\n          d=\"M32.7442 66.7859C39.4364 62.9222 47.2575 60.5211 53.8454 59.9252C57.1411 59.6272 60.0564 59.7876 62.336 60.3933C64.6294 61.0028 66.1079 62.0118 66.8368 63.2742C69.6116 68.0804 69.9429 76.4856 67.7501 84.8501C65.5656 93.1829 61.0085 100.957 54.6069 104.653C47.9434 108.5 40.9505 110.185 34.8292 109.454C28.7533 108.729 23.476 105.626 20.0729 99.7316C16.6658 93.8305 16.5364 87.5528 18.8757 81.7754C21.228 75.9659 26.1018 70.6209 32.7442 66.7859Z\"\n          fill=\"#D1884F\"\n          stroke=\"#633001\"\n          strokeWidth=\"2.89134\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M73.6122 7.76013C69.4145 8.86483 64.8207 11.0867 61.24 16.1556C53.2804 27.4231 51.7006 41.9592 58.5495 60.7386C65.3984 79.518 63.3431 89.9236 56.0487 98.3189C48.7543 106.714 29.475 108.685 23.3482 101.929C21.8481 100.274 17.4954 97.4588 20.3675 102.54C23.2397 107.622 30.7527 111.748 39.59 111.748C48.4273 111.748 55.5943 108.146 61.958 101.338C68.3217 94.5306 74.292 78.3883 68.3268 61.7709C60.6331 40.3385 62.8311 27.508 68.2893 19.7815C71.0879 15.8198 75.5453 12.3629 78.6077 10.5868C81.8233 8.72183 84.8797 8.42294 86.8682 8.42294C83.3332 6.65548 77.8099 6.65542 73.6122 7.76013Z\"\n          fill=\"#633001\"\n        />\n      </svg>\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport PanIcon from \"./PanIcon\";\nimport PancakeIcon from \"./PancakeIcon\";\nimport { SpinnerProps } from \"./types\";\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`;\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst RotatingPancakeIcon = styled(PancakeIcon)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation: ${rotate} 2s linear infinite;\n  transform: translate3d(0, 0, 0);\n`;\n\nconst FloatingPanIcon = styled(PanIcon)`\n  animation: ${float} 6s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`;\n\nconst Spinner: React.FC<SpinnerProps> = ({ size = 128 }) => {\n  return (\n    <Container>\n      <RotatingPancakeIcon width={`${size * 0.5}px`} />\n      <FloatingPanIcon width={`${size}px`} />\n    </Container>\n  );\n};\n\nexport default Spinner;\n","import { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { farmsConfig } from 'config/constants'\nimport { useFastRefreshEffect, useSlowRefreshEffect } from 'hooks/useRefreshEffect'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { deserializeToken } from 'state/user/hooks/helpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from '.'\nimport { DeserializedFarm, DeserializedFarmsState, DeserializedFarmUserData, SerializedFarm, State } from '../types'\n\nconst deserializeFarmUserData = (farm: SerializedFarm): DeserializedFarmUserData => {\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\nconst deserializeFarm = (farm: SerializedFarm): DeserializedFarm => {\n  const { lpAddresses, lpSymbol, v1pid, dual, multiplier, isCommunity, quoteTokenPriceBusd, tokenPriceBusd } = farm\n\n  return {\n    lpAddresses,\n    lpSymbol,\n    pid: v1pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd,\n    token: deserializeToken(farm.token),\n    quoteToken: deserializeToken(farm.quoteToken),\n    userData: deserializeFarmUserData(farm),\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO,\n  }\n}\n\nexport const usePollFarmsV1WithUserData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useSlowRefreshEffect(() => {\n    const pids = farmsConfig.filter((farmToFetch) => farmToFetch.v1pid).map((farmToFetch) => farmToFetch.v1pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [dispatch, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n\n  useFastRefreshEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch])\n}\n\nexport const useFarmsV1 = (): DeserializedFarmsState => {\n  const farms = useSelector((state: State) => state.farmsV1)\n  const deserializedFarmsData = farms.data.map(deserializeFarm)\n  const { loadArchivedFarmsData, userDataLoaded, poolLength } = farms\n  return {\n    loadArchivedFarmsData,\n    userDataLoaded,\n    data: deserializedFarmsData,\n    poolLength,\n  }\n}\n\nexport const useFarmsPoolLength = (): number => {\n  return useSelector((state: State) => state.farmsV1.poolLength)\n}\n\nexport const useFarmFromPid = (pid: number): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farmsV1.data.find((f) => f.v1pid === pid))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farmsV1.data.find((f) => f.lpSymbol === lpSymbol))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmUser = (pid): DeserializedFarmUserData => {\n  const { userData } = useFarmFromPid(pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = userData\n  return {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.tokenPriceBusd)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n/**\n * @@deprecated use the BUSD hook in /hooks\n */\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n\n  const cakePriceBusdAsString = cakeBnbFarm.tokenPriceBusd\n\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString)\n  }, [cakePriceBusdAsString])\n\n  return cakePriceBusd\n}\n","import { useAppDispatch } from 'state'\nimport farmsConfig from 'config/constants/farms'\nimport { useSlowRefreshEffect } from 'hooks/useRefreshEffect'\nimport { fetchFarmsPublicDataAsync } from 'state/farmsV1/index'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n\n  useSlowRefreshEffect(() => {\n    const fetchPoolsDataWithFarms = async () => {\n      const activeFarms = farmsConfig.filter((farm) => farm.v1pid !== 0)\n      await dispatch(fetchFarmsPublicDataAsync(activeFarms.map((farm) => farm.v1pid)))\n    }\n\n    fetchPoolsDataWithFarms()\n  })\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst Circle = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  width: 32px;\n  min-width: 32px;\n  height: 32px;\n  line-height: 32px;\n  font-size: 21px;\n  color: #ffffff;\n  border-radius: 50%;\n  background: linear-gradient(180deg, #8051d6 0%, #492286 100%);\n  z-index: 1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 48px;\n    min-width: 48px;\n    height: 48px;\n    line-height: 48px;\n    font-size: 32px;\n  }\n`\n\nconst Step = styled.div<{ confirmed?: boolean; disabled?: boolean; canHover?: boolean }>`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  margin-top: 28px;\n  &:before {\n    content: '';\n    position: absolute;\n    width: 1px;\n    height: calc(100% - 16px);\n    top: calc(-100% + 10px);\n    left: 16px;\n    z-index: 0;\n    pointer-events: none;\n    border: solid 1px;\n    border-color: ${({ theme, confirmed }) => (confirmed ? theme.colors.secondary : theme.colors.textDisabled)};\n  }\n\n  &:hover {\n    cursor: ${({ canHover }) => (canHover ? 'pointer' : 'initial')};\n    ${Circle} {\n      opacity: ${({ canHover }) => (canHover ? 0.65 : null)};\n    }\n    ${Text} {\n      opacity: ${({ canHover }) => (canHover ? 0.65 : null)};\n    }\n  }\n\n  &:active {\n    ${Circle} {\n      opacity: ${({ canHover }) => (canHover ? 0.85 : null)};\n    }\n    ${Text} {\n      opacity: ${({ canHover }) => (canHover ? 0.85 : null)};\n    }\n  }\n\n  ${Circle} {\n    background: ${({ theme, confirmed, disabled }) =>\n      disabled\n        ? theme.colors.textDisabled\n        : confirmed\n        ? 'linear-gradient(180deg, #8051D6 0%, #492286 100%)'\n        : theme.colors.textSubtle};\n  }\n\n  ${Text} {\n    color: ${({ theme, confirmed, disabled }) =>\n      disabled ? theme.colors.textDisabled : confirmed ? theme.colors.secondary : theme.colors.textSubtle};\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: column;\n    align-items: center;\n    margin-top: 0;\n\n    &:before {\n      width: 100%;\n      height: 1px;\n      left: calc(-100% + 48px);\n      top: 24px;\n    }\n  }\n`\n\nconst ProgressWrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 0 auto 24px auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 653px;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  ${Step} {\n    &:first-child {\n      margin-top: 0;\n      &:before {\n        display: none;\n      }\n    }\n  }\n`\n\nconst StepText = styled(Text)`\n  width: 100%;\n  text-align: left;\n  margin-left: 24px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 250px;\n    text-align: center;\n    margin: 19px 0 0 0;\n  }\n`\n\nexport enum ProgressStepsType {\n  'STEP1' = 1,\n  'STEP2' = 2,\n}\n\nexport interface Step {\n  stepId: ProgressStepsType\n  text: string\n  canHover?: boolean\n}\n\ninterface ProgressArrayProps {\n  pickedStep: ProgressStepsType\n  steps: Step[]\n  onClick?: (id: ProgressStepsType) => void\n}\n\nconst ProgressSteps: React.FC<ProgressArrayProps> = ({ pickedStep, steps, onClick }) => {\n  return (\n    <ProgressWrap>\n      {steps.map((step: Step, index: number) => {\n        return (\n          <Step\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            canHover={step.canHover}\n            confirmed={step.stepId === pickedStep}\n            disabled={step.stepId !== pickedStep && index + 1 > pickedStep}\n            onClick={() => onClick(step.stepId)}\n          >\n            <Circle>{index + 1}</Circle>\n            <StepText bold>{step.text}</StepText>\n          </Step>\n        )\n      })}\n    </ProgressWrap>\n  )\n}\n\nexport default ProgressSteps\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Button, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ProgressStepsType } from './ProgressSteps'\n\nconst Container = styled.div`\n  position: sticky;\n  bottom: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin: auto;\n  padding: 16px;\n  z-index: 6;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    bottom: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    width: 1120px;\n    padding: 24px 40px;\n  }\n\n  border-top: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-left: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-right: 1px ${({ theme }) => theme.colors.secondary} solid;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card}`} 0 0;\n  background: ${({ theme }) =>\n    theme.isDark\n      ? 'linear-gradient(360deg, rgba(61, 42, 84, 0.9) 0%, rgba(49, 61, 92, 0.9) 100%)'\n      : 'linear-gradient(180deg, rgba(206, 236, 243, 0.9) 0%,  rgba(204, 220, 239, 0.9) 51.04%, rgba(202, 194, 236, 0.9) 100%)'};\n`\n\nconst TextGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 16px;\n`\n\nconst TextTitle = styled(Text)`\n  font-size: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 20px;\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst TextSubTitle = styled(Text)`\n  font-size: 12px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 16px;\n  }\n`\n\ninterface MigrationStickyProps {\n  step: ProgressStepsType\n  handleClick: () => void\n}\n\nconst MigrationSticky: React.FC<MigrationStickyProps> = ({ step, handleClick }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { isMobile } = useMatchBreakpoints()\n\n  const isStep1: boolean = step === ProgressStepsType.STEP1\n  const title: string = isStep1 ? t('Unstaking LP Tokens and CAKE') : t('Stake in the new contract.')\n  const subTitle: string = isStep1\n    ? t('All the earned CAKE will be harvested to your wallet upon unstake.')\n    : t('Each farm and pool has to be individually enabled before staking.')\n  const buttonText: string = isStep1 ? t('Go to Stake') : t('Skip')\n\n  if (!account) {\n    return (\n      <Container>\n        <TextGroup>\n          <TextTitle bold>{t('MasterChef v2 Migration')}</TextTitle>\n          <TextSubTitle>{t('Please connect wallet to check your pools & farms status.')}</TextSubTitle>\n        </TextGroup>\n        <ConnectWalletButton width={isMobile ? '131px' : '178px'} />\n      </Container>\n    )\n  }\n\n  return (\n    <Container>\n      <TextGroup>\n        <TextTitle bold>{title}</TextTitle>\n        <TextSubTitle>{subTitle}</TextSubTitle>\n      </TextGroup>\n      <Button minWidth={isMobile ? '145px' : '178px'} onClick={handleClick}>\n        {buttonText}\n      </Button>\n    </Container>\n  )\n}\n\nexport default MigrationSticky\n","import React from 'react'\nimport { Text, CardHeader } from '@pancakeswap/uikit'\n\nexport interface TableHeaderProps {\n  title: string\n}\n\nconst TableHeader: React.FC<TableHeaderProps> = ({ title }) => {\n  return (\n    <CardHeader>\n      <Text fontSize=\"20px\" bold>\n        {title}\n      </Text>\n    </CardHeader>\n  )\n}\n\nexport default TableHeader\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface EmptyTextProps {\n  text: string\n}\n\nconst EmptyText: React.FC<EmptyTextProps> = ({ text }) => {\n  return (\n    <Text padding=\"24px\" fontSize=\"16px\" textAlign=\"center\">\n      {text}\n    </Text>\n  )\n}\n\nexport default EmptyText\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledTable = styled.div`\n  border-radius: 0px 0px 16px 16px;\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n\n  > div:last-child {\n    border-radius: 0px 0px 16px 16px;\n  }\n`\n\nconst TableStyle: React.FC = ({ children }) => {\n  return <StyledTable role=\"table\">{children}</StyledTable>\n}\n\nexport default TableStyle\n","import styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints, TokenPairImage as UITokenPairImage } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { TokenPairImage } from 'components/TokenImage'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\n\ninterface NameCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, vaultKey } = pool\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { userShares } = vaultPoolData.userData\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = vaultKey ? hasVaultShares : isStaked\n\n  let title: React.ReactNode = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle: React.ReactNode = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isMobile)\n\n  if (vaultKey) {\n    title = vaultPoolConfig[vaultKey].name\n    subtitle = vaultPoolConfig[vaultKey].description\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {vaultKey ? (\n        <UITokenPairImage {...vaultPoolConfig[vaultKey].tokenImage} mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isMobile} small={isMobile}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import { Box, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\n\ninterface StakedCellProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 0;\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 2 0 100px;\n    margin-left: 10px;\n    padding: 24px 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-left: 20px;\n  }\n`\n\nconst StakedCell: React.FC<StakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { pricePerFullShare } = vaultPoolData\n  const { userShares } = vaultPoolData.userData\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = pool.vaultKey && hasSharesStaked\n\n  let cakeAsNumberBalance = 0\n  if (pricePerFullShare) {\n    const { cakeAsNumberBalance: cakeBalance } = convertSharesToCake(userShares, pricePerFullShare)\n    cakeAsNumberBalance = cakeBalance\n  }\n\n  // pool\n  const { stakingToken, userData } = pool\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n\n  const labelText = `${pool.stakingToken.symbol} ${t('Staked')}`\n\n  const hasStaked = stakedBalance.gt(0) || isVaultWithShares\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasStaked ? 'text' : 'textDisabled'}\n              decimals={hasStaked ? 5 : 1}\n              value={pool.vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance}\n            />\n          </Box>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\ninterface AutoEarningsCellProps {\n  hasEarnings: boolean\n  earningTokenBalance: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 2 0 100px;\n  }\n`\n\nconst AutoEarningsCell: React.FC<AutoEarningsCellProps> = ({ hasEarnings, earningTokenBalance }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const labelText = t('Recent CAKE profit')\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasEarnings ? 'text' : 'textDisabled'}\n              decimals={hasEarnings ? 5 : 1}\n              value={hasEarnings ? earningTokenBalance : 0}\n            />\n          </Box>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\ninterface EarningsCellProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 2 0 100px;\n  }\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningToken, userData } = pool\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Balance\n            mt=\"4px\"\n            fontSize={isMobile ? '14px' : '16px'}\n            color={hasEarnings ? 'text' : 'textDisabled'}\n            decimals={hasEarnings ? 5 : 1}\n            value={hasEarnings ? earningTokenBalance : 0}\n          />\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React, { useMemo } from 'react'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: DeserializedPool\n  totalCakeInVault: BigNumber\n  cakeInVaults: BigNumber\n}\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n  flex: 2 0 100px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool, totalCakeInVault, cakeInVaults }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, vaultKey } = pool\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(cakeInVaults)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals, cakeInVaults])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {totalStakedBalance ? (\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          ) : (\n            <Skeleton width=\"80px\" height=\"16px\" />\n          )}\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import BigNumber from 'bignumber.js'\nimport { useCallback } from 'react'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { parseUnits } from '@ethersproject/units'\nimport { useMasterchefV1, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst sousUnstake = (sousChefContract: any, amount: string, decimals: number) => {\n  const gasPrice = getGasPrice()\n  const units = parseUnits(amount, decimals)\n\n  return sousChefContract.withdraw(units.toString(), {\n    gasPrice,\n  })\n}\n\nconst sousEmergencyUnstake = (sousChefContract: any) => {\n  const gasPrice = getGasPrice()\n  return sousChefContract.emergencyWithdraw({ gasPrice })\n}\n\nconst useUnstakePool = (sousId: number, enableEmergencyWithdraw = false) => {\n  const masterChefV1Contract = useMasterchefV1()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const gasPrice = getGasPrice()\n        const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n        return masterChefV1Contract.leaveStaking(value, { gasLimit: DEFAULT_GAS_LIMIT, gasPrice })\n      }\n\n      if (enableEmergencyWithdraw) {\n        return sousEmergencyUnstake(sousChefContract)\n      }\n\n      return sousUnstake(sousChefContract, amount, decimals)\n    },\n    [enableEmergencyWithdraw, masterChefV1Contract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import React, { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button, AutoRenewIcon } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport useToast from 'hooks/useToast'\nimport { useWeb3React } from '@web3-react/core'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\nimport cakeVaultAbi from 'config/abi/cakeVaultV2.json'\nimport { getContract } from 'utils/contractHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { useVaultPoolByKeyV1, ifoPoolV1Contract, cakeVaultAddress } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { useFetchUserPools } from '../../../hook/V1/Pool/useFetchUserPools'\nimport useUnstakePool from '../../../hook/V1/Pool/useUnstakePool'\n\nexport interface UnstakeButtonProps {\n  pool: DeserializedPool\n}\n\nconst UnstakeButton: React.FC<UnstakeButtonProps> = ({ pool }) => {\n  const { sousId, stakingToken, earningToken, userData, vaultKey } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { library } = useActiveWeb3React()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const { fetchUserPoolsData } = useFetchUserPools(account)\n\n  const { vaultPoolData, fetchPoolData } = useVaultPoolByKeyV1(vaultKey)\n  const { userShares } = vaultPoolData.userData\n\n  const vaultPoolContract = useMemo(() => {\n    return vaultKey === VaultKey.CakeVaultV1\n      ? getContract(cakeVaultAbi, cakeVaultAddress, library.getSigner())\n      : getContract(ifoPoolAbi, ifoPoolV1Contract, library.getSigner())\n  }, [library, vaultKey])\n\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n\n  const isNeedUnstake = vaultKey ? userShares && userShares.gt(0) : new BigNumber(userData.stakedBalance).gt(0)\n\n  const handleUnstake = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    if (vaultKey) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const onPresentVaultUnstake = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithGasPrice(vaultPoolContract, 'withdrawAll', undefined, {\n        gasLimit: vaultPoolConfig[pool.vaultKey].gasLimit,\n      })\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        t('Unstaked!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      fetchPoolData()\n    }\n  }\n\n  const onPresentUnstake = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      const stakedAmount = getFullDisplayBalance(userData.stakedBalance, stakingToken.decimals, stakingToken.decimals)\n      return onUnstake(stakedAmount, stakingToken.decimals)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          })}\n        </ToastDescriptionWithTx>,\n      )\n      fetchUserPoolsData()\n    }\n  }\n\n  return (\n    <>\n      {pendingTx ? (\n        <Button\n          width=\"138px\"\n          marginLeft=\"auto\"\n          isLoading={pendingTx}\n          endIcon={<AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('Confirming')}\n        </Button>\n      ) : (\n        <Button width=\"138px\" marginLeft=\"auto\" disabled={!isNeedUnstake} onClick={handleUnstake}>\n          {isNeedUnstake ? t('Unstake All') : t('Unstaked')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default UnstakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { DeserializedPool } from 'state/types'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n  }\n`\n\nexport interface UnstakeProps {\n  pool: DeserializedPool\n}\n\nconst Unstake: React.FC<UnstakeProps> = ({ pool }) => {\n  return (\n    <Container>\n      <UnstakeButton pool={pool} />\n    </Container>\n  )\n}\n\nexport default Unstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  showExpandedText: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 12px 0px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 24px 0 0;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst ExpandActionCell: React.FC<ExpandActionCellProps> = ({ expanded, showExpandedText }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {showExpandedText && (\n        <Text color=\"primary\" mr=\"10px\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default ExpandActionCell\n","import React from 'react'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 3;\n`\n\ninterface StackedActionProps {\n  pool: DeserializedPool\n}\n\nconst Staked: React.FC<StackedActionProps> = ({ pool }) => {\n  const { stakingToken, userData, stakingTokenPrice, vaultKey } = pool\n  const { t } = useTranslation()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { pricePerFullShare } = vaultPoolData\n  const { userShares } = vaultPoolData.userData\n\n  let cakeAsBigNumber = new BigNumber(0)\n  let cakeAsNumberBalance = 0\n  if (pricePerFullShare) {\n    const { cakeAsBigNumber: cakeBigBumber, cakeAsNumberBalance: cakeBalance } = convertSharesToCake(\n      userShares,\n      pricePerFullShare,\n    )\n    cakeAsBigNumber = cakeBigBumber\n    cakeAsNumberBalance = cakeBalance\n  }\n\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const balance = vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance\n  const isBalanceZero = balance === 0\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {`${pool.stakingToken.symbol} ${t('Staked')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <Balance\n            lineHeight=\"1\"\n            bold\n            color={isBalanceZero ? 'textDisabled' : 'text'}\n            fontSize=\"20px\"\n            decimals={5}\n            value={balance}\n          />\n          <Balance\n            fontSize=\"12px\"\n            display=\"inline\"\n            color={isBalanceZero ? 'textDisabled' : 'textSubtle'}\n            decimals={2}\n            value={vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </Flex>\n        <UnstakeButton pool={pool} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { ActionContainer, ActionTitles, ActionContent } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  align-self: stretch;\n`\n\ninterface AutoEarningProps {\n  earningTokenBalance: number\n  earningTokenDollarBalance: number\n  earningTokenPrice: number\n}\n\nconst AutoEarning: React.FunctionComponent<AutoEarningProps> = ({\n  earningTokenBalance,\n  earningTokenDollarBalance,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const actionTitle = (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent CAKE profit')}\n    </Text>\n  )\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Recent CAKE profit')}</Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {earningTokenBalance > 0 ? (\n            <Balance fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\">\n          <>\n            {earningTokenBalance > 0 ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default AutoEarning\n","import React from 'react'\nimport { Text, Flex, Heading, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { DeserializedPool } from 'state/types'\nimport { ActionContainer, ActionTitles, ActionContent } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n`\n\nconst Earning: React.FunctionComponent<DeserializedPool> = ({ earningToken, userData, earningTokenPrice }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = earnings.gt(0)\n\n  const actionTitle = (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol} {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>\n          {earningToken.symbol} {t('Earned')}{' '}\n        </Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {hasEarnings ? (\n            <Balance fontSize=\"16px\" value={earningTokenBalance} decimals={5} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Earning\n","import React, { useMemo } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0px;\n    padding: 0 12px;\n  }\n`\n\ninterface TotalStakedProps {\n  pool: DeserializedPool\n  totalCakeInVault: BigNumber\n  cakeInVaults: BigNumber\n}\n\nconst TotalStaked: React.FC<TotalStakedProps> = ({ pool, totalCakeInVault, cakeInVaults }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, vaultKey } = pool\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(cakeInVaults)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [vaultKey, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals, cakeInVaults])\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Total staked')}</Text>\n      <Flex height=\"20px\" alignItems=\"center\">\n        <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default TotalStaked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport Staked from './Stake'\nimport AutoEarning from './AutoEarning'\nimport Earning from './Earning'\nimport TotalStaked from './TotalStaked'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 700px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  pool: DeserializedPool\n  account: string\n  expanded: boolean\n}\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ pool, account, expanded }) => {\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { totalCakeInVault, pricePerFullShare } = vaultPoolData\n  const { cakeAtLastUserAction, userShares } = vaultPoolData.userData\n\n  const vaultPools = {\n    [VaultKey.CakeVaultV1]: useVaultPoolByKeyV1(VaultKey.CakeVaultV1).vaultPoolData,\n    [VaultKey.IfoPool]: useVaultPoolByKeyV1(VaultKey.IfoPool).vaultPoolData,\n  }\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  // Auto Earning\n  let earningTokenBalance = 0\n  let earningTokenDollarBalance = 0\n  if (pricePerFullShare) {\n    const { autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n      account,\n      cakeAtLastUserAction,\n      userShares,\n      pricePerFullShare,\n      pool.earningTokenPrice,\n    )\n    earningTokenBalance = autoCakeToDisplay\n    earningTokenDollarBalance = autoUsdToDisplay\n  }\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        {pool.vaultKey ? (\n          <AutoEarning\n            earningTokenBalance={earningTokenBalance}\n            earningTokenDollarBalance={earningTokenDollarBalance}\n            earningTokenPrice={pool.earningTokenPrice}\n          />\n        ) : (\n          <Earning {...pool} />\n        )}\n        <Staked pool={pool} />\n      </ActionContainer>\n      <TotalStaked pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={cakeInVaults} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { useVaultPoolByKeyV1 } from 'views/Migration/hook/V1/Pool/useFetchIfoPool'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport NameCell from './Cells/NameCell'\nimport StakedCell from './Cells/StakedCell'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport Unstaked from './Cells/Unstaked'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-self: center;\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account }) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n  const isCakePool = pool.sousId === 0\n\n  const { vaultPoolData } = useVaultPoolByKeyV1(pool.vaultKey)\n  const { totalCakeInVault, pricePerFullShare } = vaultPoolData\n  const { cakeAtLastUserAction, userShares } = vaultPoolData.userData\n\n  const vaultPools = {\n    [VaultKey.CakeVaultV1]: useVaultPoolByKeyV1(VaultKey.CakeVaultV1).vaultPoolData,\n    [VaultKey.IfoPool]: useVaultPoolByKeyV1(VaultKey.IfoPool).vaultPoolData,\n  }\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  // Auto Earning\n  let earningTokenBalance = 0\n  if (pricePerFullShare) {\n    const { autoCakeToDisplay } = getCakeVaultEarnings(\n      account,\n      cakeAtLastUserAction,\n      userShares,\n      pricePerFullShare,\n      pool.earningTokenPrice,\n    )\n    earningTokenBalance = autoCakeToDisplay\n  }\n  const hasEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  const EarningComponent = () => {\n    if (isLargerScreen || !expanded) {\n      return pool.vaultKey === VaultKey.IfoPool || pool.vaultKey === VaultKey.CakeVaultV1 ? (\n        <AutoEarningsCell hasEarnings={hasEarnings} earningTokenBalance={earningTokenBalance} />\n      ) : (\n        <EarningsCell pool={pool} account={account} />\n      )\n    }\n    return null\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <NameCell pool={pool} />\n          {isLargerScreen || !expanded ? <StakedCell pool={pool} account={account} /> : null}\n          {EarningComponent()}\n          {isLargerScreen && isCakePool && (\n            <TotalStakedCell pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={cakeInVaults} />\n          )}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? <Unstaked pool={pool} /> : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && <ActionPanel pool={pool} account={account} expanded={expanded} />}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport { Flex, Spinner } from '@pancakeswap/uikit'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: DeserializedPool[]\n  userDataReady: boolean\n  account: string\n}\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataReady, account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      <TableHeader title={t('Old Pools')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your pool status.')} />}\n        {account && userDataReady && pools.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any v1 pools.')} />\n        )}\n        {account &&\n          userDataReady &&\n          pools.map((pool) => <PoolRow key={pool.vaultKey ?? pool.sousId} pool={pool} account={account} />)}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default PoolsTable\n","import React from 'react'\nimport { DeserializedPool } from 'state/types'\nimport PoolsTable from './PoolTable'\n\ninterface OldPoolProps {\n  account: string\n  pools: DeserializedPool[]\n  userDataLoaded: boolean\n}\n\nconst OldPool: React.FC<OldPoolProps> = ({ account, pools, userDataLoaded }) => {\n  const userDataReady: boolean = !account || (!!account && userDataLoaded)\n  return <PoolsTable pools={pools} account={account} userDataReady={userDataReady} />\n}\n\nexport default OldPool\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { FarmWithStakedValue } from 'views/Farms/components/types'\n\nconst StyledCell = styled(BaseCell)`\n  flex: 0;\n  margin-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 100px;\n    margin-left: 30px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nexport interface FarmProps extends FarmWithStakedValue {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n  lpSymbol: string\n}\n\nconst Farm: React.FC<FarmProps> = ({ token, quoteToken, label }) => {\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Flex>\n          <TokenWrapper>\n            <TokenPairImage\n              variant=\"inverted\"\n              primaryToken={token}\n              secondaryToken={quoteToken}\n              width={40}\n              height={40}\n            />\n          </TokenWrapper>\n          <Flex flexDirection=\"column\" alignSelf=\"center\">\n            <Text bold>{label}</Text>\n          </Flex>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Farm\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\nconst StyledCell = styled(BaseCell)`\n  flex: 0;\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 3;\n    padding: 24px 8px;\n    margin-left: 30px;\n  }\n`\n\nexport interface StakedProps {\n  label: string\n  pid: number\n  stakedBalance: BigNumber\n}\n\nconst Staked: React.FC<StakedProps> = ({ label, stakedBalance }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const labelText = t('%asset% Staked', { asset: label })\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex mt=\"4px\">\n          <Text fontSize={isMobile ? '14px' : '16px'} color={stakedBalance.gt(0) ? 'text' : 'textDisabled'}>\n            {displayBalance()}\n          </Text>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n  flex: 1 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    flex: 3;\n  }\n`\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Earned: React.FC<EarnedProps> = ({ earnings }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const labelText = t('%asset% Earned', { asset: 'CAKE' })\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex mt=\"4px\">\n          <Text fontSize={isMobile ? '14px' : '16px'} color={earnings > 0 ? 'text' : 'textDisabled'}>\n            {earnings.toLocaleString()}\n          </Text>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n  flex: 1 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst Multiplier: React.FC<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : `0x`\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Multiplier')}\n        </Text>\n        <Flex mt=\"4px\">\n          <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n          <ReferenceElement ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </ReferenceElement>\n          {tooltipVisible && tooltip}\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, Text, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 100px;\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst Liquidity: React.FC<LiquidityProps> = ({ liquidity }) => {\n  const { t } = useTranslation()\n  const displayLiquidity =\n    liquidity && liquidity.gt(0)\n      ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : `$0`\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Liquidity')}\n        </Text>\n        <Flex mt=\"4px\">\n          <LiquidityWrapper>\n            <Text>{displayLiquidity}</Text>\n          </LiquidityWrapper>\n          <ReferenceElement ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </ReferenceElement>\n          {tooltipVisible && tooltip}\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default Liquidity\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useCallback } from 'react'\nimport getGasPrice from 'utils/getGasPrice'\nimport { useMasterchefV1 } from 'hooks/useContract'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchefV1()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const gasPrice = getGasPrice()\n      const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n      if (pid === 0) {\n        return masterChefContract.leaveStaking(value, { ...options, gasPrice })\n      }\n\n      return masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button, AutoRenewIcon } from '@pancakeswap/uikit'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useFarmUser } from 'state/farmsV1/hooks'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farmsV1'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hook/V1/Farms/useUnstakeFarms'\n\nexport interface UnstakeButtonProps {\n  pid: number\n}\n\nconst UnstakeButton: React.FC<UnstakeButtonProps> = ({ pid }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { stakedBalance } = useFarmUser(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const dispatch = useAppDispatch()\n\n  const isNeedUnstake = stakedBalance.gt(0)\n\n  const handleUnstake = async (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n\n    const receipt = await fetchWithCatchTxError(() => {\n      const balance = getFullDisplayBalance(stakedBalance)\n      return onUnstake(balance)\n    })\n\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  return (\n    <>\n      {pendingTx ? (\n        <Button\n          width=\"138px\"\n          marginLeft=\"auto\"\n          isLoading={pendingTx}\n          endIcon={<AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('Confirming')}\n        </Button>\n      ) : (\n        <Button width=\"138px\" marginLeft=\"auto\" disabled={!isNeedUnstake} onClick={handleUnstake}>\n          {isNeedUnstake ? t('Unstake All') : t('Unstaked')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default UnstakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n  }\n`\nexport interface UnstakeProps {\n  pid: number\n}\n\nconst Unstake: React.FC<UnstakeProps> = ({ pid }) => {\n  return (\n    <Container>\n      <UnstakeButton pid={pid} />\n    </Container>\n  )\n}\n\nexport default Unstake\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { BigNumber } from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport Balance from 'components/Balance'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { useFarmUser, useLpTokenPrice } from 'state/farmsV1/hooks'\nimport { FarmProps } from '../Cells/Farm'\nimport UnstakeButton from '../UnstakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 3;\n`\n\nconst Staked: React.FC<FarmProps> = ({ pid, lpSymbol }) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { stakedBalance } = useFarmUser(pid)\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`${lpSymbol} ${t('Staked')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={stakedBalance.gt(0) ? 'text' : 'textDisabled'}>{displayBalance()}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={stakedBalance.gt(0) && lpPrice.gt(0) ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n        <UnstakeButton pid={pid} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Heading, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport Balance from 'components/Balance'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { usePriceCakeBusd } from 'state/farmsV1/hooks'\nimport { EarnedProps } from '../Cells/Earned'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  height: 100%;\n`\n\nconst Earned: React.FC<EarnedProps> = ({ earnings }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const earningsBigNumber = new BigNumber(earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earningsBusd = 0\n  let displayBalance = earnings.toLocaleString()\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earningsBusd = earningsBigNumber.multipliedBy(cakePrice).toNumber()\n    displayBalance = earningsBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  if (isMobile) {\n    return (\n      <Flex justifyContent=\"space-between\">\n        <Text>{`CAKE ${t('Earned')}`}</Text>\n        <Flex height=\"20px\" alignItems=\"center\">\n          {Number(displayBalance) ? (\n            <Balance fontSize=\"16px\" value={Number(displayBalance)} />\n          ) : (\n            <Text fontSize=\"16px\">0</Text>\n          )}\n        </Flex>\n      </Flex>\n    )\n  }\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`CAKE ${t('Earned')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={earningsBigNumber.gt(0) ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={earningsBusd > 0 ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={earningsBusd}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { MultiplierProps } from '../Cells/Multiplier'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 12px;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n  align-self: center;\n`\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  margin-right: 6px;\n  align-self: center;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-right: 0;\n  }\n`\n\nconst TotalStaked: React.FC<MultiplierProps> = ({ multiplier }) => {\n  const { t } = useTranslation()\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '0x'\n\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Multiplier')}</Text>\n      <Flex>\n        <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n        <ReferenceElement ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </ReferenceElement>\n        {tooltipVisible && tooltip}\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default TotalStaked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { LiquidityProps } from '../Cells/Liquidity'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 12px;\n  }\n`\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n  align-self: center;\n`\n\nconst LiquidityWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  min-width: 110px;\n  align-self: center;\n  text-align: right;\n  margin-right: 6px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-right: 0;\n  }\n`\n\nconst Liquidity: React.FC<LiquidityProps> = ({ liquidity }) => {\n  const { t } = useTranslation()\n  const displayLiquidity =\n    liquidity && liquidity.gt(0)\n      ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : '$0'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('Liquidity')}</Text>\n      <Flex>\n        <LiquidityWrapper>\n          <Text>{displayLiquidity}</Text>\n        </LiquidityWrapper>\n        <ReferenceElement ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </ReferenceElement>\n        {tooltipVisible && tooltip}\n      </Flex>\n    </Containter>\n  )\n}\n\nexport default Liquidity\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport Staked from './Staked'\nimport Earned from './Earned'\nimport Multiplier from './Multiplier'\nimport Liquidity from './Liquidity'\nimport { EarnedProps } from '../Cells/Earned'\nimport { FarmProps } from '../Cells/Farm'\nimport { MultiplierProps } from '../Cells/Multiplier'\nimport { LiquidityProps } from '../Cells/Liquidity'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 700px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  earned: EarnedProps\n  farm: FarmProps\n  expanded: boolean\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n}\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ expanded, earned, farm, multiplier, liquidity }) => {\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        <Earned {...earned} />\n        <Staked {...farm} />\n      </ActionContainer>\n      <Multiplier {...multiplier} />\n      <Liquidity {...liquidity} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport ExpandActionCell from 'views/Migration/components/MigrationStep1/OldPool/Cells/ExpandActionCell'\nimport { useFarmUser } from 'state/farmsV1/hooks'\nimport Farm, { FarmProps } from './Cells/Farm'\nimport Staked, { StakedProps } from './Cells/Staked'\nimport Earned, { EarnedProps } from './Cells/Earned'\nimport Multiplier, { MultiplierProps } from './Cells/Multiplier'\nimport Liquidity, { LiquidityProps } from './Cells/Liquidity'\nimport Unstake, { UnstakeProps } from './Cells/Unstake'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-self: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nexport interface RowProps {\n  earned: EarnedProps\n  staked: StakedProps\n  farm: FarmProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  unstake: UnstakeProps\n}\n\nconst FarmRow: React.FunctionComponent<RowProps> = ({ farm, staked, earned, multiplier, liquidity, unstake }) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const { stakedBalance } = useFarmUser(farm.pid)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <Farm {...farm} />\n          {isLargerScreen || !expanded ? (\n            <>\n              <Staked {...staked} stakedBalance={stakedBalance} />\n              <Earned {...earned} />\n              <Multiplier {...multiplier} />\n            </>\n          ) : null}\n          {isLargerScreen && <Liquidity {...liquidity} />}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? <Unstake {...unstake} /> : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && (\n        <ActionPanel earned={earned} farm={farm} multiplier={multiplier} liquidity={liquidity} expanded={expanded} />\n      )}\n    </>\n  )\n}\n\nexport default FarmRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTable, ColumnType, Flex, Spinner } from '@pancakeswap/uikit'\nimport Row, { RowProps } from './FarmRow'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nexport interface ITableProps {\n  account: string\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst FarmTable: React.FC<ITableProps> = ({ account, data, columns, userDataReady }) => {\n  const { t } = useTranslation()\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  return (\n    <Container>\n      <TableHeader title={t('Old Farms')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your farms status.')} />}\n        {account && userDataReady && rows.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any v1 farms.')} />\n        )}\n        {account &&\n          userDataReady &&\n          rows.map((row) => {\n            return <Row {...row.original} key={`table-row-${row.id}`} />\n          })}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'staked',\n    sortable: true,\n    label: 'Staked',\n  },\n  {\n    id: 3,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 4,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 5,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 6,\n    name: 'unstake',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopV2ColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'staked',\n    sortable: true,\n    label: 'Staked',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'Apr',\n  },\n  {\n    id: 4,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'liquidity',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useMemo, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getFarmApr } from 'utils/apr'\nimport { RowType } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { CAKE_PER_YEAR } from 'config'\nimport { useFarmsV1, usePriceCakeBusd } from 'state/farmsV1/hooks'\nimport { DeserializedFarm } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { FarmWithStakedValue } from 'views/Farms/components/types'\nimport OldFarm from './FarmTable'\nimport { RowProps } from './FarmRow'\nimport { DesktopColumnSchema } from '../../types'\n\nconst OldFarmStep1: React.FC = () => {\n  const { account } = useWeb3React()\n  const { data: farmsLP, userDataLoaded } = useFarmsV1()\n  const cakePrice = usePriceCakeBusd()\n\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const farms = farmsLP.filter((farm) => farm.pid !== 0)\n\n  const stakedOrHasTokenBalance = farms.filter((farm) => {\n    return (\n      farm.userData &&\n      (new BigNumber(farm.userData.stakedBalance).isGreaterThan(0) ||\n        new BigNumber(farm.userData.tokenBalance).isGreaterThan(0))\n    )\n  })\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n          new BigNumber(farm.poolWeight),\n          cakePrice,\n          totalLiquidity,\n          farm.lpAddresses[ChainId.MAINNET],\n          CAKE_PER_YEAR,\n        )\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    return farmsList(stakedOrHasTokenBalance)\n  }, [stakedOrHasTokenBalance, farmsList])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      farm: {\n        ...farm,\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        lpSymbol: farm.lpSymbol,\n        quoteToken: farm.quoteToken,\n      },\n      staked: {\n        label: lpLabel,\n        pid: farm.pid,\n        stakedBalance: farm.userData.stakedBalance,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      unstake: {\n        pid: farm.pid,\n      },\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    const columnSchema = DesktopColumnSchema\n    const columns = columnSchema.map((column) => ({\n      id: column.id,\n      name: column.name,\n      label: column.label,\n      sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n        switch (column.name) {\n          case 'farm':\n            return b.id - a.id\n          default:\n            return 1\n        }\n      },\n    }))\n\n    return <OldFarm account={account} data={rowData} columns={columns} userDataReady={userDataReady} />\n  }\n\n  return <>{renderContent()}</>\n}\n\nexport default OldFarmStep1\n","import { Box, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\n\ninterface StakedCellProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledCell = styled(BaseCell)`\n  padding: 0 0 24px 0;\n  margin-left: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 10px;\n    padding: 24px 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-left: 20px;\n  }\n`\n\nconst StakedCell: React.FC<StakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  // vault\n  const {\n    userData: {\n      balance: { cakeAsBigNumber, cakeAsNumberBalance },\n    },\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  // pool\n  const { stakingTokenPrice, stakingToken, userData } = pool\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const labelText = `${pool.stakingToken.symbol} ${t('Staked')}`\n  const hasStaked = pool.vaultKey ? (Number.isNaN(cakeAsNumberBalance) ? 0 : cakeAsNumberBalance) : stakedTokenBalance\n\n  return (\n    <StyledCell role=\"cell\" flex={pool.vaultKey ? '1 0 100px' : '2 0 100px'}>\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        <Flex>\n          <Box mr=\"8px\" height=\"32px\">\n            <Balance\n              mt=\"4px\"\n              bold={!isMobile}\n              fontSize={isMobile ? '14px' : '16px'}\n              color={hasStaked ? 'primary' : 'textDisabled'}\n              decimals={hasStaked ? 5 : 1}\n              value={hasStaked}\n            />\n            {hasStaked ? (\n              <Balance\n                display=\"inline\"\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                prefix=\"~\"\n                value={pool.vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n                unit=\" USD\"\n              />\n            ) : (\n              <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                0 USD\n              </Text>\n            )}\n          </Box>\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default StakedCell\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { useVaultPoolByKey, useVaultPools } from 'state/pools/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport NameCell from 'views/Pools/components/PoolsTable/Cells/NameCell'\nimport AprCell from 'views/Pools/components/PoolsTable/Cells/AprCell'\nimport AutoAprCell from 'views/Pools/components/PoolsTable/Cells/AutoAprCell'\nimport ActionPanel from 'views/Pools/components/PoolsTable/ActionPanel/ActionPanel'\nimport ExpandActionCell from 'views/Pools/components/PoolsTable/Cells/ExpandActionCell'\nimport AutoEarningsCell from 'views/Pools/components/PoolsTable/Cells/AutoEarningsCell'\nimport EarningsCell from '../../MigrationStep1/OldPool/Cells/EarningsCell'\nimport TotalStakedCell from '../../MigrationStep1/OldPool/Cells/TotalStakedCell'\nimport StakedCell from './Cells/StakedCell'\n\ninterface PoolRowProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account }) => {\n  const { isXl, isXxl, isXs, isSm, isMd, isLg, isTablet, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const isXLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const { totalCakeInVault } = useVaultPoolByKey(pool.vaultKey)\n  const vaultPools = useVaultPools()\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        {isXLargerScreen && pool.vaultKey === VaultKey.CakeVault && <StakedCell pool={pool} account={account} />}\n        {pool.vaultKey ? (\n          isXLargerScreen && pool.vaultKey === VaultKey.CakeVault && <AutoEarningsCell pool={pool} account={account} />\n        ) : (\n          <EarningsCell pool={pool} account={account} />\n        )}\n        {pool.vaultKey ? <AutoAprCell pool={pool} /> : <AprCell pool={pool} />}\n        {isLargerScreen && (\n          <TotalStakedCell pool={pool} totalCakeInVault={totalCakeInVault} cakeInVaults={cakeInVaults} />\n        )}\n        <ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport { Flex, Spinner } from '@pancakeswap/uikit'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: DeserializedPool[]\n  userDataReady: boolean\n  account: string\n}\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataReady, account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      <TableHeader title={t('Pools')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your pool status.')} />}\n        {account && userDataReady && pools.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any pools.')} />\n        )}\n        {account &&\n          userDataReady &&\n          pools.map((pool) => <PoolRow key={pool.vaultKey ?? pool.sousId} pool={pool} account={account} />)}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault, usePoolsWithVault } from 'state/pools/hooks'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchCakePoolUserDataAsync,\n  fetchCakeVaultFees,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n} from 'state/pools'\nimport PoolsTable from './PoolTable'\n\nconst NewPool: React.FC = () => {\n  const { account } = useWeb3React()\n  const { pools } = usePoolsWithVault()\n  const cakeVault = useCakeVault()\n\n  const stakedOnlyOpenPools = useMemo(\n    () => pools.filter((pool) => pool.userData && pool.sousId === 0 && !pool.isFinished),\n    [pools],\n  )\n\n  const userDataReady: boolean = !account || (!!account && !cakeVault.userData?.isLoading)\n\n  const dispatch = useAppDispatch()\n\n  useFastRefreshEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n    if (account) {\n      dispatch(fetchCakeVaultUserData({ account }))\n      dispatch(fetchCakePoolUserDataAsync(account))\n    }\n  }, [account, dispatch])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n\n  return <PoolsTable pools={stakedOnlyOpenPools} account={account} userDataReady={userDataReady} />\n}\n\nexport default NewPool\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from 'views/Pools/components/PoolsTable/Cells/BaseCell'\nimport Apr, { AprProps } from 'views/Farms/components/FarmTable/Apr'\n\nconst StyledCell = styled(BaseCell)`\n  display: none;\n  flex: 2 0 100px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n  }\n`\n\nconst AprCell: React.FC<AprProps> = (apr) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APR')}\n        </Text>\n        <Flex mt=\"4px\">\n          <Apr {...apr} />\n        </Flex>\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import styled from 'styled-components'\n\nconst StakeButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 30px 14px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 14px 0 0;\n    align-items: center;\n    width: 120px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 32px;\n    width: 142px;\n    justify-content: center;\n  }\n`\n\nconst StakeButtonCells = ({ children }: { children: JSX.Element }) => {\n  return <StakeButtonContainer>{children}</StakeButtonContainer>\n}\n\nexport default StakeButtonCells\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button, useMatchBreakpoints, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/types'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport useApproveFarm from 'views/Farms/hooks/useApproveFarm'\nimport useStakeFarms from 'views/Farms/hooks/useStakeFarms'\nimport useUnstakeFarms from 'views/Farms/hooks/useUnstakeFarms'\nimport DepositModal from 'views/Farms/components/DepositModal'\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useAppDispatch } from 'state'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst StakeButton: React.FC<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { isDesktop } = useMatchBreakpoints()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onStake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Staked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your funds have been staked in the farm')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const handleUnstake = async (amount: string) => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onUnstake(amount)\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your earnings have also been harvested to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    handlePoolApprove()\n  }\n\n  const handlePoolApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return onApprove()\n    })\n    if (receipt?.status) {\n      toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    }\n  }, [onApprove, dispatch, account, pid, t, toastSuccess, fetchWithCatchTxError])\n\n  const handleDeposit = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentDeposit()\n  }\n\n  const handleWithdraw = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentWithdraw()\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <IconButtonWrapper>\n          <IconButton variant=\"secondary\" onClick={handleWithdraw} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"14px\" />\n          </IconButton>\n          <IconButton variant=\"secondary\" onClick={handleDeposit}>\n            <AddIcon color=\"primary\" width=\"14px\" />\n          </IconButton>\n        </IconButtonWrapper>\n      )\n    }\n\n    return (\n      <Button width={isDesktop ? '142px' : '120px'} onClick={onPresentDeposit} marginLeft=\"auto\">\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return (\n    <Button\n      disabled={pendingTx}\n      onClick={handleApprove}\n      variant=\"tertiary\"\n      marginLeft=\"auto\"\n      width={isDesktop ? '142px' : '120px'}\n    >\n      {t('Enable')}\n    </Button>\n  )\n}\n\nexport default StakeButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport Balance from 'components/Balance'\nimport { ActionContainer, ActionContent, ActionTitles } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { EarnedProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Earned'\nimport { FarmProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Farm'\nimport StakeButton from '../StakeButton'\n\nconst Container = styled(ActionContainer)`\n  flex: 2;\n  height: 100%;\n`\n\ninterface StakedProps {\n  earned: EarnedProps\n  farm: FarmProps\n}\n\nconst Staked: React.FC<StakedProps> = ({ earned, farm }) => {\n  const { t } = useTranslation()\n  const { earnings } = earned\n  const earningsBigNumber = new BigNumber(earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earningsBusd = 0\n  let displayBalance = earnings.toLocaleString()\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earningsBusd = earningsBigNumber.multipliedBy(cakePrice).toNumber()\n    displayBalance = earningsBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <Container>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {`CAKE ${t('Earned')}`}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading color={earningsBigNumber.gt(0) ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n          <Balance\n            fontSize=\"12px\"\n            color={earningsBusd > 0 ? 'textSubtle' : 'textDisabled'}\n            decimals={2}\n            value={earningsBusd}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        </div>\n        <StakeButton {...farm} />\n      </ActionContent>\n    </Container>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Apr, { AprProps } from 'views/Farms/components/FarmTable/Apr'\n\nconst Containter = styled(Flex)`\n  margin-top: 12px;\n  padding: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0px;\n    padding: 0 12px;\n  }\n`\n\nconst AprRow: React.FC<AprProps> = (apr) => {\n  const { t } = useTranslation()\n\n  return (\n    <Containter justifyContent=\"space-between\">\n      <Text>{t('APR')}</Text>\n      <Apr {...apr} />\n    </Containter>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport Multiplier from 'views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Multiplier'\nimport Liquidity from 'views/Migration/components/MigrationStep1/OldFarm/ActionPanel/Liquidity'\nimport { EarnedProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Earned'\nimport { FarmProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Farm'\nimport { AprProps } from 'views/Farms/components/FarmTable/Apr'\nimport { MultiplierProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Multiplier'\nimport { LiquidityProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Liquidity'\nimport Staked from './Staked'\nimport AprRow from './AprRow'\n\nconst expandAnimation = keyframes`\n  from {\n    opacity: 0;\n    max-height: 0px;\n  }\n  to {\n    opacity: 1;\n    max-height: 1000px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    opacity: 1;\n    max-height: 1000px;\n  }\n  to {\n    opacity: 0;\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  opacity: 1;\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 12px 10px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-bottom: 24px;\n  }\n`\n\ninterface ActionPanelProps {\n  expanded: boolean\n  earned: EarnedProps\n  farm: FarmProps\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n}\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ expanded, earned, farm, apr, multiplier, liquidity }) => {\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <ActionContainer>\n        <Staked earned={earned} farm={farm} />\n      </ActionContainer>\n      <AprRow {...apr} />\n      <Multiplier {...multiplier} />\n      <Liquidity {...liquidity} />\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { AprProps } from 'views/Farms/components/FarmTable/Apr'\nimport Farm, { FarmProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Farm'\nimport Staked, { StakedProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Staked'\nimport { EarnedProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Earned'\nimport Multiplier, { MultiplierProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Multiplier'\nimport Liquidity, { LiquidityProps } from 'views/Migration/components/MigrationStep1/OldFarm/Cells/Liquidity'\nimport ExpandActionCell from 'views/Migration/components/MigrationStep1/OldPool/Cells/ExpandActionCell'\nimport { useFarmUser } from 'state/farms/hooks'\nimport AprCell from './Cells/AprCell'\nimport StakeButtonCells from './Cells/StakeButtonCells'\nimport StakeButton from './StakeButton'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\nexport interface RowProps {\n  farm: FarmProps\n  apr: AprProps\n  earned: EarnedProps\n  staked: StakedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  background-color: transparent;\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    cursor: initial;\n  }\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-self: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst RightContainer = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 24px 0;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n  }\n`\n\nconst FarmRow: React.FunctionComponent<RowProps> = ({ earned, farm, staked, apr, multiplier, liquidity }) => {\n  const { isMobile, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n\n  const { stakedBalance } = useFarmUser(farm.pid)\n\n  const toggleExpanded = () => {\n    if (!isLargerScreen) {\n      setExpanded((prev) => !prev)\n    }\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <LeftContainer>\n          <Farm {...farm} />\n          {isLargerScreen || !expanded ? (\n            <>\n              <Staked {...staked} stakedBalance={stakedBalance} />\n              <AprCell {...apr} />\n              <Multiplier {...multiplier} />\n            </>\n          ) : null}\n          {isLargerScreen && <Liquidity {...liquidity} />}\n        </LeftContainer>\n        <RightContainer>\n          {isLargerScreen || !expanded ? (\n            <StakeButtonCells>\n              <StakeButton {...farm} lpLabel={lpLabel} displayApr={apr.value} />\n            </StakeButtonCells>\n          ) : null}\n          {!isLargerScreen && <ExpandActionCell expanded={expanded} showExpandedText={expanded || isMobile} />}\n        </RightContainer>\n      </StyledRow>\n      {!isLargerScreen && shouldRenderActionPanel && (\n        <ActionPanel\n          farm={farm}\n          earned={earned}\n          apr={apr}\n          multiplier={multiplier}\n          liquidity={liquidity}\n          expanded={expanded}\n        />\n      )}\n    </>\n  )\n}\n\nexport default FarmRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTable, ColumnType, Flex, Spinner } from '@pancakeswap/uikit'\nimport TableHeader from '../../MigrationTable/TableHeader'\nimport EmptyText from '../../MigrationTable/EmptyText'\nimport TableStyle from '../../MigrationTable/StyledTable'\nimport Row, { RowProps } from './FarmRow'\n\nconst Container = styled.div`\n  overflow: hidden;\n  margin-bottom: 32px;\n  border-radius: 24px 24px 16px 16px;\n  background-color: ${({ theme }) => theme.colors.disabled};\n  padding: 1px 1px 3px 1px;\n`\n\nexport interface ITableProps {\n  account: string\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst FarmTable: React.FC<ITableProps> = ({ account, data, columns, userDataReady }) => {\n  const { t } = useTranslation()\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  return (\n    <Container>\n      <TableHeader title={t('Farms')} />\n      <TableStyle>\n        {!userDataReady && (\n          <Flex padding=\"50px 10px\" justifyContent=\"center\">\n            <Spinner />\n          </Flex>\n        )}\n        {!account && <EmptyText text={t('Please connect wallet to check your farms status.')} />}\n        {account && userDataReady && rows.length === 0 && (\n          <EmptyText text={t('You are not currently staking in any farms.')} />\n        )}\n        {account &&\n          userDataReady &&\n          rows.map((row) => {\n            return <Row {...row.original} key={`table-row-${row.id}`} />\n          })}\n      </TableStyle>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useMemo, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getFarmApr } from 'utils/apr'\nimport { RowType } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { useFarms, usePriceCakeBusd, usePollFarmsWithUserData } from 'state/farms/hooks'\nimport { useFarmsV1 } from 'state/farmsV1/hooks'\nimport { DeserializedFarm } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { FarmWithStakedValue } from 'views/Farms/components/types'\nimport { getDisplayApr } from 'views/Farms/Farms'\nimport OldFarm from './FarmTable'\nimport { RowProps } from './FarmRow'\nimport { DesktopV2ColumnSchema } from '../../types'\n\nconst OldFarmStep1: React.FC = () => {\n  const { account } = useWeb3React()\n  const { data: farmsLP, userDataLoaded, regularCakePerBlock } = useFarms()\n  const { data: farmsV1LP } = useFarmsV1()\n  const cakePrice = usePriceCakeBusd()\n\n  usePollFarmsWithUserData()\n\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const activeFarmsV1 = farmsV1LP.filter((farm) => farm.pid !== 0)\n\n  const v1StakedOrHasTokenBalance = activeFarmsV1.filter((farm) => {\n    const hasStakedBalance = new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)\n    const hasTokenBalance = new BigNumber(farm.userData.tokenBalance).isGreaterThan(0)\n    return farm.userData && (hasStakedBalance || hasTokenBalance)\n  })\n\n  // Only show farms that has staked or has balance in v1 & v2\n  const stakedOrHasTokenBalance = activeFarms.filter((farm) => {\n    const hasStakedBalance = new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)\n    const hasTokenBalance = new BigNumber(farm.userData.tokenBalance).isGreaterThan(0)\n    const farms = v1StakedOrHasTokenBalance.find(\n      (v1Farm) => v1Farm.pid === farm.pid && v1Farm.lpSymbol === farm.lpSymbol,\n    )\n    return farm.userData && (hasStakedBalance || hasTokenBalance || farms)\n  })\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n          new BigNumber(farm.poolWeight),\n          cakePrice,\n          totalLiquidity,\n          farm.lpAddresses[ChainId.MAINNET],\n          regularCakePerBlock,\n        )\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, regularCakePerBlock],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    return farmsList(stakedOrHasTokenBalance)\n  }, [stakedOrHasTokenBalance, farmsList])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        ...farm,\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        lpSymbol: farm.lpSymbol,\n        quoteToken: farm.quoteToken,\n      },\n      staked: {\n        label: lpLabel,\n        pid: farm.pid,\n        stakedBalance: farm.userData.stakedBalance,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    const columnSchema = DesktopV2ColumnSchema\n    const columns = columnSchema.map((column) => ({\n      id: column.id,\n      name: column.name,\n      label: column.label,\n      sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n        switch (column.name) {\n          case 'farm':\n            return b.id - a.id\n          default:\n            return 1\n        }\n      },\n    }))\n\n    return <OldFarm account={account} data={rowData} columns={columns} userDataReady={userDataReady} />\n  }\n\n  return <>{renderContent()}</>\n}\n\nexport default OldFarmStep1\n","import React, { memo, useState, useRef, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Text, Button, ArrowForwardIcon, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePollFarmsV1WithUserData } from 'state/farmsV1/hooks'\nimport { VaultKey } from 'state/types'\nimport { useFetchUserPools } from 'views/Migration/hook/V1/Pool/useFetchUserPools'\nimport { useFetchPublicPoolsData } from 'views/Migration/hook/V1/Pool/useFetchPublicPoolsData'\nimport PageHeader from 'components/PageHeader'\nimport Page from 'components/Layout/Page'\nimport ProgressSteps, { Step, ProgressStepsType } from './components/ProgressSteps'\nimport MigrationSticky from './components/MigrationSticky'\nimport OldPool from './components/MigrationStep1/OldPool'\nimport OldFarm from './components/MigrationStep1/OldFarm'\nimport NewPool from './components/MigrationStep2/NewPool'\nimport NewFarm from './components/MigrationStep2/NewFarm'\n\nconst MigrationPage: React.FC = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const router = useRouter()\n  const [step, setStep] = useState<ProgressStepsType>(ProgressStepsType.STEP1)\n  const steps: Step[] = [\n    {\n      stepId: ProgressStepsType.STEP1,\n      canHover: true,\n      text: t('Unstake LP tokens and CAKE from the old MasterChef contract.'),\n    },\n    {\n      stepId: ProgressStepsType.STEP2,\n      canHover: true,\n      text: t('Stake LP tokens and CAKE to the new MasterChef v2 contract.'),\n    },\n  ]\n\n  // v1 Farms\n  usePollFarmsV1WithUserData()\n\n  // v1 Pools\n  useFetchPublicPoolsData()\n  const { data: cakePool, userDataLoaded } = useFetchUserPools(account)\n\n  const v1Pools = useMemo(() => {\n    const ifoPoolVault = { ...cakePool, vaultKey: VaultKey.IfoPool }\n    const cakeAutoVault = { ...cakePool, vaultKey: VaultKey.CakeVaultV1 }\n\n    return [ifoPoolVault, cakeAutoVault, cakePool]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cakePool])\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  const handleMigrationStickyClick = () => {\n    scrollToTop()\n    if (step === ProgressStepsType.STEP1) {\n      setStep(ProgressStepsType.STEP2)\n    } else {\n      router.push('/')\n    }\n  }\n\n  return (\n    <div ref={tableWrapperEl}>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Migration')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Migrate your stakings to the new MasterChef contract.')}\n        </Heading>\n        <Link href=\"https://docs.pancakeswap.finance/code/migration/migrate-your-stakings\" external>\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Learn more')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </Link>\n      </PageHeader>\n      <Page>\n        <ProgressSteps pickedStep={step} steps={steps} onClick={setStep} />\n        {step === ProgressStepsType.STEP1 ? (\n          <>\n            <OldPool pools={v1Pools} account={account} userDataLoaded={userDataLoaded} />\n            <OldFarm />\n          </>\n        ) : (\n          <>\n            <NewPool />\n            <NewFarm />\n          </>\n        )}\n      </Page>\n      <MigrationSticky step={step} handleClick={handleMigrationStickyClick} />\n    </div>\n  )\n}\n\nexport default memo(MigrationPage)\n","import Migration from '../views/Migration'\n\nexport default Migration\n"],"names":["window","__NEXT_P","push","props","Svg","viewBox","path","fillRule","clipRule","d","fill","svg","width","height","xmlns","stroke","strokeWidth","rotate","keyframes","float","Container","styled","RotatingPancakeIcon","PancakeIcon","FloatingPanIcon","PanIcon","size","deserializeFarmUserData","farm","allowance","userData","BigNumber","BIG_ZERO","tokenBalance","stakedBalance","earnings","deserializeFarm","lpAddresses","lpSymbol","pid","v1pid","dual","multiplier","isCommunity","quoteTokenPriceBusd","tokenPriceBusd","token","deserializeToken","quoteToken","tokenAmountTotal","lpTotalInQuoteToken","lpTotalSupply","tokenPriceVsQuote","poolWeight","useFarmsV1","farms","useSelector","state","farmsV1","deserializedFarmsData","data","map","loadArchivedFarmsData","userDataLoaded","poolLength","useFarmFromPid","find","f","useFarmUser","useLpTokenPrice","symbol","useFarmFromLpSymbol","farmTokenPriceInUsd","useBusdPriceFromPid","lpTokenPrice","gt","overallValueOfAllTokensInFarm","times","totalLpTokens","getBalanceAmount","div","usePriceCakeBusd","cakePriceBusdAsString","useMemo","useFetchPublicPoolsData","dispatch","useAppDispatch","useSlowRefreshEffect","fetchPoolsDataWithFarms","activeFarms","farmsConfig","fetchFarmsPublicDataAsync","Circle","theme","mediaQueries","lg","Step","confirmed","colors","secondary","textDisabled","canHover","Text","disabled","textSubtle","ProgressWrap","StepText","ProgressStepsType","pickedStep","steps","onClick","step","index","stepId","bold","text","sm","xxl","radii","card","isDark","TextGroup","TextTitle","TextSubTitle","handleClick","useTranslation","t","useWeb3React","account","useMatchBreakpoints","isMobile","isStep1","STEP1","title","subTitle","buttonText","Button","minWidth","ConnectWalletButton","CardHeader","fontSize","padding","textAlign","StyledTable","background","children","role","StyledCell","BaseCell","pool","sousId","stakingToken","earningToken","isFinished","vaultKey","useVaultPoolByKeyV1","vaultPoolData","userShares","hasVaultShares","stakingTokenSymbol","earningTokenSymbol","isStaked","isManualCakePool","showStakedTag","subtitle","showSubtitle","vaultPoolConfig","name","description","toLocaleLowerCase","UITokenPairImage","tokenImage","mr","TokenPairImage","primaryToken","secondaryToken","CellContent","color","textTransform","small","pricePerFullShare","hasSharesStaked","isVaultWithShares","cakeAsNumberBalance","convertSharesToCake","stakedTokenBalance","getBalanceNumber","decimals","labelText","hasStaked","Flex","Box","Balance","mt","value","Number","isNaN","md","hasEarnings","earningTokenBalance","pendingReward","asset","totalCakeInVault","cakeInVaults","totalStaked","totalStakedBalance","manualCakeTotalMinusAutoVault","minus","alignItems","unit","Skeleton","sousUnstake","sousChefContract","amount","gasPrice","getGasPrice","units","parseUnits","withdraw","toString","sousEmergencyUnstake","emergencyWithdraw","enableEmergencyWithdraw","masterChefV1Contract","useMasterchefV1","useSousChef","handleUnstake","useCallback","DEFAULT_TOKEN_DECIMAL","leaveStaking","gasLimit","DEFAULT_GAS_LIMIT","onUnstake","useActiveWeb3React","library","useCatchTxError","fetchWithCatchTxError","loading","useCallWithGasPrice","callWithGasPrice","useToast","toastSuccess","useFetchUserPools","fetchUserPoolsData","fetchPoolData","vaultPoolContract","VaultKey","getContract","cakeVaultAbi","cakeVaultAddress","getSigner","ifoPoolAbi","ifoPoolV1Contract","useUnstakePool","isNeedUnstake","onPresentVaultUnstake","receipt","undefined","status","ToastDescriptionWithTx","txHash","transactionHash","onPresentUnstake","stakedAmount","getFullDisplayBalance","pendingTx","marginLeft","isLoading","endIcon","AutoRenewIcon","spin","event","stopPropagation","UnstakeButton","ArrowIcon","ChevronDownIcon","toggled","expanded","showExpandedText","ActionContainer","stakingTokenPrice","stakedTokenDollarBalance","multipliedBy","cakeAsBigNumber","stakedAutoDollarValue","balance","isBalanceZero","ActionTitles","as","ActionContent","flex","pt","flexDirection","alignSelf","lineHeight","display","prefix","earningTokenDollarBalance","earningTokenPrice","actionTitle","justifyContent","Heading","Containter","expandAnimation","collapseAnimation","StyledActionPanel","css","dropdown","cakeAtLastUserAction","vaultPools","Object","values","reduce","total","vault","plus","getCakeVaultEarnings","autoCakeToDisplay","autoUsdToDisplay","AutoEarning","Earning","Staked","TotalStaked","StyledRow","LeftContainer","RightContainer","isXl","isXxl","isLargerScreen","useState","shouldRenderActionPanel","useDelayedUnmount","isCakePool","setExpanded","prev","NameCell","StakedCell","AutoEarningsCell","EarningsCell","TotalStakedCell","Unstaked","ExpandActionCell","ActionPanel","pools","userDataReady","TableHeader","TableStyle","Spinner","EmptyText","length","PoolRow","PoolsTable","TokenWrapper","label","variant","displayBalance","stakedBalanceBigNumber","lt","toFixed","toLocaleString","ReferenceElement","MultiplierWrapper","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","HelpIcon","LiquidityWrapper","liquidity","displayLiquidity","maximumFractionDigits","options","masterChefContract","useUnstakeFarms","fetchFarmUserDataAsync","pids","lpPrice","pr","earningsBigNumber","cakePrice","earningsBusd","isZero","toNumber","earned","Earned","Multiplier","Liquidity","staked","unstake","Farm","Unstake","columns","useTable","sortable","sortColumn","rows","row","Row","original","key","id","DesktopColumnSchema","DesktopV2ColumnSchema","stakedOrHasTokenBalance","farmsLP","filter","isGreaterThan","farmsList","farmsToDisplay","totalLiquidity","getFarmApr","ChainId","CAKE_PER_YEAR","apr","cakeRewardsApr","lpRewardsApr","rowData","lpLabel","split","toUpperCase","replace","column","sort","a","b","OldFarm","renderContent","useVaultPoolByKey","isXs","isSm","isMd","isLg","isTablet","isDesktop","isXLargerScreen","useVaultPools","AutoAprCell","AprCell","isFullLayout","breakpoints","cakeVault","usePoolsWithVault","useCakeVault","stakedOnlyOpenPools","useFastRefreshEffect","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakePoolUserDataAsync","useEffect","fetchCakeVaultFees","Apr","StakeButtonContainer","IconButtonWrapper","displayApr","useStakeFarms","onStake","isApproved","lpAddress","getAddress","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","addLiquidityUrl","BASE_ADD_LIQUIDITY_URL","handleStake","onPresentDeposit","useModal","DepositModal","max","onConfirm","tokenName","onPresentWithdraw","WithdrawModal","lpContract","useERC20","useApproveFarm","onApprove","handlePoolApprove","IconButton","MinusIcon","AddIcon","StakeButton","AprRow","StakeButtonCells","useFarms","regularCakePerBlock","usePollFarmsWithUserData","v1StakedOrHasTokenBalance","farmsV1LP","hasStakedBalance","hasTokenBalance","v1Farm","getDisplayApr","originalValue","MigrationPage","tableWrapperEl","useRef","router","useRouter","STEP2","farmToFetch","usePollFarmsV1WithUserData","v1Pools","cakePool","PageHeader","scale","mb","Link","href","external","p","ArrowForwardIcon","Page","ProgressSteps","setStep","OldPool","NewPool","NewFarm","MigrationSticky","current","scrollIntoView","behavior","memo"],"sourceRoot":""}