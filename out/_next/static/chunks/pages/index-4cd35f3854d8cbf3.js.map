{"version":3,"file":"static/chunks/pages/index-4cd35f3854d8cbf3.js","mappings":"uFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,IACA,WACE,OAAO,EAAQ,W,yHCuIvB,UA/HkB,Y,IAAGC,EAAa,EAAbA,cAAeC,EAAkB,EAAlBA,mBAAoBC,EAAG,EAAHA,IACtD,OACE,SAACC,EAAAA,GAAS,CACRC,MAAO,CACLC,SAAU,CACRL,cAAAA,EACAC,mBAAAA,EACAC,IAAAA,I,UAIJ,SAACI,EAAAA,EAAI,S","sources":["webpack://_N_E/","webpack://_N_E/./src/pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import { FACTORY_ADDRESS } from '@pancakeswap/sdk'\nimport { getUnixTime, sub } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { GetStaticProps } from 'next'\nimport { SWRConfig } from 'swr'\nimport { bitQueryServerClient, infoServerClient } from 'utils/graphql'\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\nimport { getCakeContract } from 'utils/contractHelpers'\nimport { formatEther } from '@ethersproject/units'\nimport Swap from '../views/Swap'\n\nconst IndexPage = ({ totalTx30Days, addressCount30Days, tvl }) => {\n  return (\n    <SWRConfig\n      value={{\n        fallback: {\n          totalTx30Days,\n          addressCount30Days,\n          tvl,\n        },\n      }}\n    >\n      <Swap />\n    </SWRConfig>\n  )\n}\n\n// Values fetched from TheGraph and BitQuery jan 24, 2022\nconst txCount = 54780336\nconst addressCount = 4425459\n\nconst tvl = 6082955532.115718\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const totalTxQuery = gql`\n    query TotalTransactions($id: ID!, $block: Block_height) {\n      pancakeFactory(id: $id, block: $block) {\n        totalTransactions\n      }\n    }\n  `\n\n  const days30Ago = sub(new Date(), { days: 30 })\n\n  const results = {\n    totalTx30Days: txCount,\n    addressCount30Days: addressCount,\n    tvl,\n  }\n\n  if (process.env.SF_HEADER) {\n    try {\n      const [days30AgoBlock] = await getBlocksFromTimestamps([getUnixTime(days30Ago)])\n\n      if (!days30AgoBlock) {\n        throw new Error('No block found for 30 days ago')\n      }\n\n      const totalTx = await infoServerClient.request(totalTxQuery, {\n        id: FACTORY_ADDRESS,\n      })\n      const totalTx30DaysAgo = await infoServerClient.request(totalTxQuery, {\n        block: {\n          number: days30AgoBlock.number,\n        },\n        id: FACTORY_ADDRESS,\n      })\n\n      if (\n        totalTx?.pancakeFactory?.totalTransactions &&\n        totalTx30DaysAgo?.pancakeFactory?.totalTransactions &&\n        parseInt(totalTx.pancakeFactory.totalTransactions) > parseInt(totalTx30DaysAgo.pancakeFactory.totalTransactions)\n      ) {\n        results.totalTx30Days =\n          parseInt(totalTx.pancakeFactory.totalTransactions) -\n          parseInt(totalTx30DaysAgo.pancakeFactory.totalTransactions)\n      }\n    } catch (error) {\n      if (process.env.NODE_ENV === 'production') {\n        console.error('Error when fetching total tx count', error)\n      }\n    }\n  }\n\n  const usersQuery = gql`\n    query userCount($since: ISO8601DateTime, $till: ISO8601DateTime) {\n      ethereum(network: bsc) {\n        dexTrades(exchangeName: { in: [\"Pancake\", \"Pancake v2\"] }, date: { since: $since, till: $till }) {\n          count(uniq: senders)\n        }\n      }\n    }\n  `\n\n  if (process.env.BIT_QUERY_HEADER) {\n    try {\n      const result = await bitQueryServerClient.request(usersQuery, {\n        since: days30Ago.toISOString(),\n        till: new Date().toISOString(),\n      })\n      if (result?.ethereum?.dexTrades?.[0]?.count) {\n        results.addressCount30Days = result.ethereum.dexTrades[0].count\n      }\n    } catch (error) {\n      if (process.env.NODE_ENV === 'production') {\n        console.error('Error when fetching address count', error)\n      }\n    }\n  }\n\n  try {\n    const result = await infoServerClient.request(gql`\n      query tvl {\n        pancakeFactories(first: 1) {\n          totalLiquidityUSD\n        }\n        token(id: \"0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82\") {\n          derivedUSD\n        }\n      }\n    `)\n    const { totalLiquidityUSD } = result.pancakeFactories[0]\n    const cakeVaultV2 = getCakeVaultAddress()\n    const cakeContract = getCakeContract()\n    const totalCakeInVault = await cakeContract.balanceOf(cakeVaultV2)\n    results.tvl = parseFloat(formatEther(totalCakeInVault)) * result.token.derivedUSD + parseFloat(totalLiquidityUSD)\n  } catch (error) {\n    if (process.env.NODE_ENV === 'production') {\n      console.error('Error when fetching tvl stats', error)\n    }\n  }\n\n  return {\n    props: results,\n    revalidate: 60 * 60 * 24 * 30, // 30 days\n  }\n}\n\nexport default IndexPage\n"],"names":["window","__NEXT_P","push","totalTx30Days","addressCount30Days","tvl","SWRConfig","value","fallback","Swap"],"sourceRoot":""}