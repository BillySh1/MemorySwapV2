{"version":3,"file":"static/chunks/pages/info-d17195640ebaffec.js","mappings":"sFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,QACA,WACE,OAAO,EAAQ,W,0SCJvB,iB,oxCAoBO,IAAMC,GAAsBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAK,Y,6BAAZD,C,KAW/B,Y,OAAQ,EAALE,MAAkBC,aAAaC,MA2ItC,EAtI2B,WACzB,IAGIC,GAAAA,EAAAA,EAAAA,MAFFC,EAEED,EAFFC,EACAC,EACEF,EADFE,gBAAmBC,OAEuBC,GAAAA,EAAAA,EAAAA,YAzC9C,EAyC8CA,EAA8B,GAzC5E,EAyC8CA,EAA8B,GACtBA,GAAAA,EAAAA,EAAAA,YA1CtD,EA0CsDA,EAA8B,GA1CpF,EA0CsDA,EAA8B,GAC5CA,GAAAA,EAAAA,EAAAA,YA3CxC,EA2CwCA,EAA8B,GA3CtE,EA2CwCA,EAA8B,GACtBA,GAAAA,EAAAA,EAAAA,YA5ChD,EA4CgDA,EAA8B,GA5C9E,EA4CgDA,EAA8B,GAErEC,EAAiC,GAAjBC,EAAAA,EAAAA,MAAiB,MACjCC,EAAmC,GAAtBC,EAAAA,EAAAA,MAAsB,MACnCC,EAAyC,GAAzBC,EAAAA,EAAAA,MAAyB,MAE1CC,GAAc,IAAIC,MAAOC,eAAeV,EAAQ,CAAEW,MAAO,QAASC,KAAM,UAAWC,IAAK,aAG9FC,EAAAA,EAAAA,YAAU,WACW,MAAfC,GAAuBb,GACzBc,EAAed,EAAae,aAE7B,CAACf,EAAca,KAClBD,EAAAA,EAAAA,YAAU,WACc,MAAlBI,GAA0BhB,GAC5BiB,EAAkBjB,EAAakB,gBAEhC,CAACF,EAAgBhB,IAEpB,IAAMmB,GAAyBC,EAAAA,EAAAA,UAAQ,WACrC,OAAIlB,EACKA,EAAUmB,KAAI,SAACV,GACpB,MAAO,CACLW,MAAMC,EAAAA,EAAAA,GAAaZ,EAAIa,MACvBC,MAAOd,EAAIO,iBAIV,KACN,CAAChB,IAEEwB,GAAsBN,EAAAA,EAAAA,UAAQ,WAClC,OAAIlB,EACKA,EAAUmB,KAAI,SAACV,GACpB,MAAO,CACLW,MAAMC,EAAAA,EAAAA,GAAaZ,EAAIa,MACvBC,MAAOd,EAAII,cAIV,KACN,CAACb,IAEEyB,GAAYC,EAAAA,EAAAA,MAEZC,GAAkBT,EAAAA,EAAAA,UAAQ,WAC9B,OAAOU,OAAOC,OAAOJ,GAClBN,KAAI,SAACW,G,OAAUA,EAAMC,QACrBC,QAAO,SAACF,G,OAAUA,OACpB,CAACL,IAEEQ,GAAcC,EAAAA,EAAAA,MACdC,GAAYjB,EAAAA,EAAAA,UAAQ,WACxB,OAAOU,OAAOC,OAAOI,GAClBd,KAAI,SAACiB,G,OAASA,EAAKL,QACnBC,QAAO,SAACI,G,OAASA,OACnB,CAACH,IAEEI,GAAsBnB,EAAAA,EAAAA,UAAQ,WAClC,OAAOU,OAAOC,OAAOI,GAAaK,MAAK,SAACF,G,OAAUA,EAAKL,UACtD,CAACE,IAEJ,OACE,UAACM,EAAAA,EAAI,C,WACH,SAACC,EAAAA,EAAO,CAACC,MAAM,KAAKC,GAAG,OAAOC,GAAG,sB,SAC9BjD,EAAE,mCAEL,UAACP,EAAmB,C,WAClB,SAACyD,EAAAA,EAAI,C,UACH,UAACC,EAAAA,EAAG,CAACC,EAAG,CAAC,OAAQ,OAAQ,Q,WACvB,SAACC,EAAAA,EAAI,CAACC,MAAI,EAACC,MAAM,Y,SACdvD,EAAE,eAEJoB,EAAiB,GAChB,UAACiC,EAAAA,EAAI,CAACC,MAAI,EAACE,SAAS,O,UAAO,KACvBC,EAAAA,EAAAA,GAAarC,OAGjB,SAACsC,EAAAA,EAAQ,CAACC,MAAM,QAAQC,OAAO,UAEjC,SAACP,EAAAA,EAAI,C,SAAoB,OAAlBQ,QAAkB,IAAlBA,EAAAA,EAAsBnD,KAC7B,SAACyC,EAAAA,EAAG,CAACS,OAAO,Q,UACV,SAACE,EAAAA,EAAS,CACRzB,KAAMd,EACNwC,cAAe1C,EACf2C,aAAcC,YAKtB,SAACf,EAAAA,EAAI,C,UACH,UAACC,EAAAA,EAAG,CAACC,EAAG,CAAC,OAAQ,OAAQ,Q,WACvB,SAACC,EAAAA,EAAI,CAACC,MAAI,EAACC,MAAM,Y,SACdvD,EAAE,gBAEJiB,EAAc,GACb,UAACoC,EAAAA,EAAI,CAACC,MAAI,EAACE,SAAS,O,UAAO,KACvBC,EAAAA,EAAAA,GAAaxC,OAGjB,SAACyC,EAAAA,EAAQ,CAACC,MAAM,QAAQC,OAAO,UAEjC,SAACP,EAAAA,EAAI,C,SAAiB,OAAfa,QAAe,IAAfA,EAAAA,EAAmBxD,KAC1B,SAACyC,EAAAA,EAAG,CAACS,OAAO,Q,UACV,SAACO,EAAAA,EAAQ,CAAC9B,KAAMP,EAAqBiC,cAAe7C,EAAgB8C,aAAcI,eAK1F,SAACtB,EAAAA,EAAO,CAACC,MAAM,KAAKsB,GAAG,OAAOrB,GAAG,O,SAC9BhD,EAAE,iBAEL,SAACsE,EAAAA,EAAU,CAACC,WAAYtC,KACxB,SAACa,EAAAA,EAAO,CAACC,MAAM,KAAKsB,GAAG,OAAOrB,GAAG,O,SAC9BhD,EAAE,gBAEL,SAACwE,EAAAA,EAAS,CAAC/B,UAAWA,EAAWgC,QAAS9B,KAC1C,SAACG,EAAAA,EAAO,CAACC,MAAM,KAAKsB,GAAG,OAAOrB,GAAG,O,SAC9BhD,EAAE,mBAEL,SAAC0E,EAAAA,EAAgB,CAAClE,aAAcA,QClKhCmE,EAAW,WACf,OAAO,SAACC,EAAQ,KAGlBD,EAASE,OAASC,EAAAA,EAElB,S,yMCTA,gB,y9BAkBA,IAAMC,EAAiBrF,EAAAA,GAAAA,IAAAA,WAAU,C,4BAAVA,C,KA+BjBsF,GAActF,EAAAA,EAAAA,IAAOuF,EAAAA,GAAwB,Y,4BAA/BvF,C,KAQdwF,EACO,YADPA,EAEU,eAFVA,EAGW,gBAHXA,EAIO,YAJPA,EAKK,UAGLC,EAAuB,W,OAC3B,UAACJ,EAAc,C,WACb,SAACrB,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,QAIP0B,EAAwB,W,OAC5B,sB,WACE,SAACD,EAAU,KACX,SAACA,EAAU,KACX,SAACA,EAAU,QAITE,EAAU,Y,IAAGC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC3B,OACE,SAACP,EAAW,CAACQ,GAAI,cAA+B,OAAjBF,EAASG,S,UACtC,UAACV,EAAc,C,WACb,SAAC1B,EAAAA,EAAI,C,SAAEkC,EAAQ,KACf,UAAC5F,EAAAA,EAAI,C,WACH,SAAC+F,EAAAA,EAAkB,CAACC,SAAUL,EAASM,OAAOH,QAASI,SAAUP,EAASQ,OAAOL,WACjF,UAACpC,EAAAA,EAAI,CAAC0C,GAAG,M,UACNT,EAASM,OAAOI,OAAO,IAAEV,EAASQ,OAAOE,cAG9C,UAAC3C,EAAAA,EAAI,C,UAAC,KAAEI,EAAAA,EAAAA,GAAa6B,EAASnE,eAC9B,UAACkC,EAAAA,EAAI,C,UAAC,KAAEI,EAAAA,EAAAA,GAAa6B,EAASW,mBAC9B,UAAC5C,EAAAA,EAAI,C,UAAC,KAAEI,EAAAA,EAAAA,GAAa6B,EAASY,eAC9B,UAAC7C,EAAAA,EAAI,C,WAAEI,EAAAA,EAAAA,GAAa6B,EAASa,SAAS,QACtC,UAAC9C,EAAAA,EAAI,C,UAAC,KAAEI,EAAAA,EAAAA,GAAa6B,EAAShE,uBAgKpC,IArJ0C,Y,IAAGmB,EAAS,EAATA,UAAWgC,EAAO,EAAPA,QAEtBtE,GAAAA,EAAAA,EAAAA,UAAS+E,GAjH7C,EAiHoC/E,EAA8B,GAjHlE,EAiHoCA,EAA8B,GACtBA,GAAAA,EAAAA,EAAAA,WAAkB,GAlH9D,EAkH4CA,EAAuB,GAlHnE,EAkH4CA,EAAuB,GAC3D,GAAQJ,EAAAA,EAAAA,MAANC,EAGgBG,GAAAA,EAAAA,EAAAA,UAAS,GAtHnC,EAsH0BA,EAAW,GAtHrC,EAsH0BA,EAAW,GACLA,GAAAA,EAAAA,EAAAA,UAAS,GAvHzC,EAuHgCA,EAAW,GAvH3C,EAuHgCA,EAAW,IACzCa,EAAAA,EAAAA,YAAU,WACR,IAAIoF,EAAa,EACb3D,EAAU4D,OAASC,EAAAA,KAA8B,IACnDF,EAAa,GAEfG,EAAWC,KAAKC,MAAMhE,EAAU4D,OAASC,EAAAA,IAA6BF,KACrE,CAAC3D,IAEJ,IAAMiE,GAAclF,EAAAA,EAAAA,UAAQ,WAC1B,OAAOiB,EACHA,EACGkE,MAAK,SAACC,EAAGC,GACR,OAAID,GAAKC,EACAD,EAAEE,GAA+BD,EAAEC,GACX,GAA1BC,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETC,MAAMV,EAAAA,IAA6BW,EAAO,GAAIA,EAAOX,EAAAA,IACxD,KACH,CAACW,EAAMxE,EAAWsE,EAAeD,IAE9BI,GAAaC,EAAAA,EAAAA,cACjB,SAACC,GACCC,EAAaD,GACbE,EAAiBR,IAAcM,IAAmBL,KAEpD,CAACA,EAAeD,IAGZS,GAAQJ,EAAAA,EAAAA,cACZ,SAACK,GAEG,OAAOV,IAAcU,EADCT,EAAwB,SAAR,SACQ,KAEhD,CAACA,EAAeD,IAGlB,OACE,UAACW,EAAAA,GAAY,C,WACX,UAAC1C,EAAc,C,WACb,SAAC1B,EAAAA,EAAI,CAACE,MAAM,YAAYC,SAAS,OAAOF,MAAI,E,SAAC,OAG7C,SAACD,EAAAA,EAAI,CAACE,MAAM,YAAYC,SAAS,OAAOF,MAAI,EAACoE,cAAc,Y,SACxD1H,EAAE,WAEL,UAAC2H,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,cAAc,IAAEuH,EAAMrC,OAE3B,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,aAAa,IAAEuH,EAAMrC,OAE1B,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,sBAAsB,IAAEuH,EAAMrC,OAEnC,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,iBAAiB,IAAEuH,EAAMrC,OAE9B,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,aAAa,IAAEuH,EAAMrC,UAG5B,SAAC2C,EAAAA,GAAK,IACLnB,EAAYL,OAAS,GACpB,sB,UACGK,EAAYjF,KAAI,SAAC6D,EAAUwC,GAC1B,OAAIxC,GAEA,UAACyC,EAAAA,SAAQ,C,WACP,SAAC1C,EAAO,CAACE,OAAQ0B,EAAO,GAAKX,EAAAA,GAA4BwB,EAAGxC,SAAUA,KACtE,SAACuC,EAAAA,GAAK,MAFOvC,EAASG,SAMrB,QAERhB,IAAW,SAACU,EAAU,KACvB,UAAC6C,EAAAA,GAAW,C,WACV,SAACC,EAAAA,GAAK,CACJL,QAAS,WACPM,EAAiB,IAATjB,EAAaA,EAAOA,EAAO,I,UAGrC,SAACkB,EAAAA,EAAa,CAAC5E,MAAgB,IAAT0D,EAAa,eAAiB,eAGtD,SAAC5D,EAAAA,EAAI,C,SAAErD,EAAE,2BAA4B,CAAEiH,KAAAA,EAAMmB,QAAAA,OAE7C,SAACH,EAAAA,GAAK,CACJL,QAAS,WACPM,EAAQjB,IAASmB,EAAUnB,EAAOA,EAAO,I,UAG3C,SAACoB,EAAAA,EAAgB,CAAC9E,MAAO0D,IAASmB,EAAU,eAAiB,qBAKnE,sB,WACE,SAAChD,EAAW,KAEZ,SAACjC,EAAAA,EAAG,Y,wOC7PhB,gB,2jCAoBA,IAAM4B,EAAiBrF,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,KAkCjBsF,GAActF,EAAAA,EAAAA,IAAOuF,EAAAA,GAAwB,Y,6BAA/BvF,C,KAQd4I,GAAiB5I,EAAAA,EAAAA,IAAO6I,EAAAA,GAAa,Y,6BAApB7I,C,KAOjB0F,EAAwB,WAC5B,IAAMoD,GACJ,UAACzD,EAAc,C,WACb,SAACrB,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,KACT,SAACA,EAAAA,EAAQ,OAGb,OACE,sB,UACG8E,EACAA,EACAA,MAKDnD,EAA6D,Y,IAAGoD,EAAS,EAATA,UAAWlD,EAAK,EAALA,MACxDmD,GAAAA,EAAAA,EAAAA,KAAfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACd,OACE,SAAC5D,EAAW,CAACQ,GAAI,eAAiC,OAAlBiD,EAAUhD,S,UACxC,UAACV,EAAc,C,WACb,SAACpF,EAAAA,EAAI,C,UACH,SAAC0D,EAAAA,EAAI,C,SAAEkC,EAAQ,OAEjB,UAAC5F,EAAAA,EAAI,CAACkJ,WAAW,S,WACf,SAACP,EAAc,CAAC7C,QAASgD,EAAUhD,WACjCkD,GAAQC,KAAS,SAACvF,EAAAA,EAAI,CAAC0C,GAAG,M,SAAO0C,EAAUzC,UAC3C2C,IAASC,IACT,UAACjJ,EAAAA,EAAI,CAACmJ,WAAW,O,WACf,SAACzF,EAAAA,EAAI,C,SAAEoF,EAAUM,QACjB,UAAC1F,EAAAA,EAAI,CAAC0C,GAAG,M,UAAM,IAAE0C,EAAUzC,OAAO,cAIxC,UAAC3C,EAAAA,EAAI,CAAC2F,WAAY,I,UAAK,KAAEvF,EAAAA,EAAAA,GAAagF,EAAUQ,SAAU,CAAEC,SAAU,iBACtE,SAAC7F,EAAAA,EAAI,CAAC2F,WAAY,I,UAChB,SAACG,EAAAA,EAAO,CAACtH,MAAO4G,EAAUW,eAAgBJ,WAAY,SAExD,UAAC3F,EAAAA,EAAI,CAAC2F,WAAY,I,UAAK,KAAEvF,EAAAA,EAAAA,GAAagF,EAAUtH,eAChD,UAACkC,EAAAA,EAAI,CAAC2F,WAAY,I,UAAK,KAAEvF,EAAAA,EAAAA,GAAagF,EAAUnH,uBAMlD4D,EACE,OADFA,EAEO,YAFPA,EAGU,eAHVA,EAIM,WAJNA,EAKY,iBAwJhB,IA/IG,Y,IAAGX,EAAU,EAAVA,WAAY,EAAF,EAAE8E,SAAAA,OAAQ,IAAG,EALb,GAKsB,EACJlJ,GAAAA,EAAAA,EAAAA,UAAS+E,GArI7C,EAqIoC/E,EAA8B,GArIlE,EAqIoCA,EAA8B,GACtBA,GAAAA,EAAAA,EAAAA,WAAkB,GAtI9D,EAsI4CA,EAAuB,GAtInE,EAsI4CA,EAAuB,GAE3D,GAAQJ,EAAAA,EAAAA,MAANC,EAEgBG,GAAAA,EAAAA,EAAAA,UAAS,GA1InC,EA0I0BA,EAAW,GA1IrC,EA0I0BA,EAAW,GACLA,GAAAA,EAAAA,EAAAA,UAAS,GA3IzC,EA2IgCA,EAAW,GA3I3C,EA2IgCA,EAAW,IACzCa,EAAAA,EAAAA,YAAU,WACR,IAAIoF,EAAa,EACb7B,IACEA,EAAW8B,OAASgD,IAAa,IACnCjD,EAAa,GAEfG,EAAWC,KAAKC,MAAMlC,EAAW8B,OAASgD,GAAYjD,MAEvD,CAACiD,EAAU9E,IAEd,IAAM+E,GAAe9H,EAAAA,EAAAA,UAAQ,WAC3B,OAAO+C,EACHgF,GAAAA,CACEhF,GACA,SAACkE,G,OAAcA,EAAU3B,KACzBC,EAAgB,OAAS,OACzBC,MAAMqC,GAAYpC,EAAO,GAAIA,EAAOoC,GACtC,KACH,CAAC9E,EAAY8E,EAAUpC,EAAMF,EAAeD,IAEzCI,GAAaC,EAAAA,EAAAA,cACjB,SAACC,GACCC,EAAaD,GACbE,EAAiBR,IAAcM,IAAmBL,KAEpD,CAACA,EAAeD,IAGZS,GAAQJ,EAAAA,EAAAA,cACZ,SAACK,GAEG,OAAOV,IAAcU,EADCT,EAAwB,SAAR,SACQ,KAEhD,CAACA,EAAeD,IAGlB,OAAKvC,GAKH,UAACkD,EAAAA,GAAY,C,WACX,UAAC1C,EAAc,C,WACb,SAAC1B,EAAAA,EAAI,CAACE,MAAM,YAAYC,SAAS,OAAOF,MAAI,E,SAAC,OAG7C,UAACqE,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,QAAQ,IAAEuH,EAAMrC,OAErB,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,SAAS,IAAEuH,EAAMrC,OAEtB,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,gBAAgB,IAAEuH,EAAMrC,OAE7B,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,cAAc,IAAEuH,EAAMrC,OAE3B,UAACyC,EAAAA,GAAqB,CACpBpE,MAAM,YACNC,SAAS,OACTF,MAAI,EACJsE,QAAS,W,OAAMV,EAAWhC,IAC1BwC,cAAc,Y,UAEb1H,EAAE,aAAa,IAAEuH,EAAMrC,UAI5B,SAAC2C,EAAAA,GAAK,IACLyB,EAAajD,OAAS,GACrB,sB,UACGiD,EAAa7H,KAAI,SAACY,EAAMyF,GACvB,OAAIzF,GAEA,UAAC0F,EAAAA,SAAQ,C,WACP,SAAC1C,EAAO,CAACE,MAjHX,IAiHmB0B,EAAO,GAAiBa,EAAGW,UAAWpG,KACvD,SAACwF,EAAAA,GAAK,MAFOxF,EAAKoD,SAMjB,SAET,UAACuC,EAAAA,GAAW,C,WACV,SAACC,EAAAA,GAAK,CACJL,QAAS,WACPM,EAAiB,IAATjB,EAAaA,EAAOA,EAAO,I,UAGrC,SAACkB,EAAAA,EAAa,CAAC5E,MAAgB,IAAT0D,EAAa,eAAiB,eAEtD,SAAC5D,EAAAA,EAAI,C,SAAErD,EAAE,2BAA4B,CAAEiH,KAAAA,EAAMmB,QAAAA,OAC7C,SAACH,EAAAA,GAAK,CACJL,QAAS,WACPM,EAAQjB,IAASmB,EAAUnB,EAAOA,EAAO,I,UAG3C,SAACoB,EAAAA,EAAgB,CAAC9E,MAAO0D,IAASmB,EAAU,eAAiB,qBAKnE,sB,WACE,SAAChD,EAAW,KACZ,SAACjC,EAAAA,EAAG,WA3FH,SAACO,EAAAA,EAAQ,O","sources":["webpack://_N_E/?223a","webpack://_N_E/./src/views/Info/Overview/index.tsx","webpack://_N_E/./src/pages/info/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/TokensTable.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info\",\n      function () {\n        return require(\"private-next-pages/info/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info\"])\n      });\n    }\n  ","import { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import { InfoPageLayout } from 'views/Info'\nimport Overview from 'views/Info/Overview'\n\nconst InfoPage = () => {\n  return <Overview />\n}\n\nInfoPage.Layout = InfoPageLayout\n\nexport default InfoPage\n","import { useCallback, useState, useMemo, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import { useState, useMemo, useCallback, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport orderBy from 'lodash/orderBy'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? orderBy(\n          tokenDatas,\n          (tokenData) => tokenData[sortField as keyof TokenData],\n          sortDirection ? 'desc' : 'asc',\n        ).slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n"],"names":["window","__NEXT_P","push","ChartCardsContainer","styled","Flex","theme","mediaQueries","md","useTranslation","t","currentLanguage","locale","useState","protocolData","useProtocolData","chartData","useProtocolChartData","transactions","useProtocolTransactions","currentDate","Date","toLocaleString","month","year","day","useEffect","volumeHover","setVolumeHover","volumeUSD","liquidityHover","setLiquidityHover","liquidityUSD","formattedLiquidityData","useMemo","map","time","fromUnixTime","date","value","formattedVolumeData","allTokens","useAllTokenData","formattedTokens","Object","values","token","data","filter","allPoolData","useAllPoolData","poolDatas","pool","somePoolsAreLoading","some","Page","Heading","scale","mb","id","Card","Box","p","Text","bold","color","fontSize","formatAmount","Skeleton","width","height","liquidityDateHover","LineChart","setHoverValue","setHoverDate","setLiquidityDateHover","volumeDateHover","BarChart","setVolumeDateHover","mt","TokenTable","tokenDatas","PoolTable","loading","TransactionTable","InfoPage","Overview","Layout","InfoPageLayout","ResponsiveGrid","LinkWrapper","NextLinkFromReactRouter","SORT_FIELD","LoadingRow","TableLoader","DataRow","poolData","index","to","address","DoubleCurrencyLogo","address0","token0","address1","token1","ml","symbol","volumeUSDWeek","lpFees24h","lpApr7d","extraPages","length","ITEMS_PER_INFO_TABLE_PAGE","setMaxPage","Math","floor","sortedPools","sort","a","b","sortField","sortDirection","slice","page","handleSort","useCallback","newField","setSortField","setSortDirection","arrow","field","TableWrapper","textTransform","ClickableColumnHeader","onClick","Break","i","Fragment","PageButtons","Arrow","setPage","ArrowBackIcon","maxPage","ArrowForwardIcon","ResponsiveLogo","CurrencyLogo","loadingRow","tokenData","useMatchBreakpoints","isXs","isSm","alignItems","marginLeft","name","fontWeight","priceUSD","notation","Percent","priceUSDChange","maxItems","sortedTokens","orderBy"],"sourceRoot":""}