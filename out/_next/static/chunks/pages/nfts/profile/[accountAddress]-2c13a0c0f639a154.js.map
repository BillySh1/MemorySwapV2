{"version":3,"file":"static/chunks/pages/nfts/profile/[accountAddress]-2c13a0c0f639a154.js","mappings":"uFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,iCACA,WACE,OAAO,EAAQ,W,sICJvB,gB,8bAGO,IAAMC,EAA0BC,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,KAGnC,Y,IAAGC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUC,EAAK,EAALA,M,OACxBF,GACa,YAAbC,GACA,kKAO6C,OAArBC,EAAMC,OAAOC,QAAQ,4DA6CjD,EAvCuBL,EAAAA,GAAAA,EAAAA,WAAQ,C,6BAARA,C,KAKZ,Y,IAAGG,EAAK,EAALA,M,OAAgB,EAATF,UAA6BE,EAAMC,OAAOE,UAAYH,EAAMC,OAAOG,cAEvE,Y,OAAY,EAATN,UAA6B,MAAQ,SAErD,Y,IAAGO,EAAY,EAAZA,aAAcL,EAAK,EAALA,M,OACjBK,GACA,sFAI2C,OAA3BL,EAAMC,OAAOI,GAAc,oFAO3C,Y,MACa,YADF,EAARN,SAEE,gDAIA,4DAMS,Y,OAAQ,EAALC,MAAkBC,OAAOK,YACxC,Y,MAA+B,YAApB,EAARP,UAAyC,0BCzDlD,kB,myBAKA,IA0BA,EA1B0C,Y,IACxCQ,EAAQ,EAARA,SACAC,EAAI,EAAJA,KAAI,IACJC,SAAAA,OAAQ,IAAG,GAAK,MAChBC,QAAAA,OAAO,IAAG,YAAS,EACnBC,EAAW,EAAXA,YACGC,EAAK,KALRL,WACAC,OACAC,WACAC,UACAC,gBAGM,GAAoBE,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,cACFC,EAAyBR,EAC3B,CACES,GAAIF,EACJP,KAAAA,GAEF,CACES,GAAI,OAEV,OACE,SAACrB,EAAuB,CAACE,UAAWW,EAAUV,SAAUW,E,UACtD,SAACQ,EAAc,KAAKF,EAAa,CAAElB,UAAWW,EAAUV,SAAUW,EAASL,aAAcM,GAAiBC,EAAK,C,SAC5GL,Q,uCCzBT,I,GAAA,E,wYAGA,IAeA,GAf2BV,EAAAA,EAAAA,IAAOsB,EAAAA,GAAK,Y,6BAAZtB,C,KACvB,Y,OAAQ,EAALG,MAAkBoB,aAAaC,MAChC,Y,OAAgB,EAAbC,cAAqC,eAAiB,MAGzC,Y,IAAGtB,EAAK,EAALA,M,MAAY,GAA+B,OAA5BA,EAAMC,OAAOsB,mBCRrD,kB,myBAQA,IAsCA,EAtCkD,Y,QAAGC,MAAAA,OAAK,IAAG,KAAE,EAAEC,EAAU,EAAVA,WAAY,EAAF,EAAEC,aAAAA,OAAY,IAAG,GAAK,EAAKd,EAAK,KAAtDY,QAAYC,aAAYC,iBAC3E,OACE,SAACC,EAAkB,GACjBC,eAAgB,CAACF,EAAe,WAAa,QAAS,KAAM,WACxDd,EAAK,CACTiB,GAAI,CAAC,OAAQ,KAAM,OACnBP,cAAeI,E,SAEdF,EAAMM,KAAI,Y,IAAGC,EAAK,EAALA,MAAOvB,EAAI,EAAJA,KAAMwB,EAAI,EAAJA,KAAMC,EAAS,EAATA,UACzBC,EAAOF,EACPG,EAFwC,EAAJC,OAEVC,EAAAA,EAAAA,cAC1BC,EAAYH,EACd,CACElB,GAAI,IACJsB,OAAQ,UAEV,GAEJ,OACER,IACE,SAACS,EAAAA,EAAG,CAAaC,GAAG,O,UAClB,UAACC,EAAQ,GAAClC,KAAMA,EAAMC,SAAUD,IAASiB,EAAYf,QAAQ,WAAcuB,EAAeK,EAAS,C,UAChGJ,IAAQ,SAACA,EAAI,CAACS,MAAOnC,IAASiB,EAAa,YAAc,aAAcgB,GAAG,QAC1EV,EACAI,IACC,SAACK,EAAAA,EAAG,CAACI,QAAS,CAAC,OAAQ,KAAM,QAASC,MAAO,CAAEC,WAAY,UAAYC,GAAG,M,UACxE,SAACC,EAAAA,EAAW,CAACL,MAAM,sBANjBZ,W,sPCqBtB,EA1CqE,Y,IAAGkB,EAAI,EAAJA,KAAMC,EAAS,EAATA,UACtE,GAAQC,EAAAA,EAAAA,MAANC,EAER,OACE,qB,SAEmB,IAAhBH,EAAKI,QAAiBH,EAQvBD,EAAKI,OAAS,GACZ,SAACC,EAAAA,EAAI,CACHC,QAAQ,OACRC,oBAAqB,CAAC,MAAO,iBAAkB,iBAAkB,KAAM,kBACvEV,WAAW,Q,SAEVG,EAAKnB,KAAI,SAAC2B,GACT,IAAM,EAAiBA,EAAfC,WAER,OACE,SAACC,EAAAA,GAAmB,CAElBF,IAAKA,EACLG,iBACY,OAAVF,QAAU,IAAVA,OAAAA,EAAAA,EAAYE,mBAA6B,OAAVF,QAAU,IAAVA,OAAAA,EAAAA,EAAYG,aAAcC,WAAqB,OAAVJ,QAAU,IAAVA,OAAAA,EAAAA,EAAYE,kBAH7E,GAAmBH,OAAb,OAAHA,QAAG,IAAHA,OAAAA,EAAAA,EAAKM,QAAQ,KAAuB,OAAjB,OAAHN,QAAG,IAAHA,OAAAA,EAAAA,EAAKO,uBAWrC,SAACC,EAAAA,EAAe,KA7BhB,UAAC9C,EAAAA,EAAI,CAAC+C,EAAE,OAAOC,cAAc,SAASrB,WAAW,S,WAC/C,SAACsB,EAAAA,EAAW,KACZ,SAACC,EAAAA,EAAI,CAACC,GAAG,MAAMC,MAAI,E,SAChBnB,EAAE,yB,sDCjBf,iB,67BAqBA,IA+FA,EA1FK,Y,IAAGH,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWsB,EAAa,EAAbA,cAAeC,EAAoB,EAApBA,qBACYC,GAAAA,EAAAA,EAAAA,UAA0B,CAAEjB,IAAK,KAAMkB,SAAU,OA3BrG,EA2BoDD,EAAwD,GA3B5G,EA2BoDA,EAAwD,GAC9DA,GAAAA,EAAAA,EAAAA,UAAuB,CAAEjB,IAAK,KAAMkB,SAAU,KAAMjE,QAAS,OA5B3G,EA4B8CgE,EAAoE,GA5BlH,EA4B8CA,EAAoE,GACzGE,EAEN,GAFkCC,EAAAA,EAAAA,IACjC,SAACC,EAAAA,EAAe,CAACrB,IAAKsB,EAAkBtB,IAAKuB,UAAWP,KACzD,MACMQ,EAON,GAP4BJ,EAAAA,EAAAA,IAC3B,SAACK,EAAAA,EAAS,CACRxE,QAASyE,EAAezE,QACxB0E,UAAWD,EAAe1B,IAC1Be,cAAeA,EACfC,qBAAsBA,KAEzB,MACK,GAAQtB,EAAAA,EAAAA,MAANC,EAkCR,OAhBAiC,EAAAA,EAAAA,YAAU,WACJN,EAAkBtB,KACpBmB,MAID,CAACG,KAEJM,EAAAA,EAAAA,YAAU,WACJF,EAAe1B,KACjBwB,MAID,CAACE,KAGF,qB,SAEmB,IAAhBlC,EAAKI,QAAiBH,EAQvBD,EAAKI,OAAS,GACZ,SAACC,EAAAA,EAAI,CACHC,QAAQ,OACRC,oBAAqB,CAAC,MAAO,iBAAkB,iBAAkB,KAAM,kBACvEV,WAAW,Q,SAEVG,EAAKnB,KAAI,SAAC2B,GACT,IAAQC,EAAyBD,EAAzBC,WAAYiB,EAAalB,EAAbkB,SAEpB,OACE,SAACW,EAAAA,GAAqB,CACpBC,WAAS,EACTC,QAAS,W,OAvDQ,SAAC/B,EAAekB,GAC7C,OAAQA,GACN,KAAKc,EAAAA,GAAAA,QACHC,EAAqB,CAAEjC,IAAAA,EAAKkB,SAAAA,IAC5B,MACF,KAAKc,EAAAA,GAAAA,OACHE,EAAkB,CAAElC,IAAAA,EAAKkB,SAAAA,EAAUjE,QAAS,SAC5C,MACF,KAAK+E,EAAAA,GAAAA,QACHE,EAAkB,CAAElC,IAAAA,EAAKkB,SAAAA,EAAUjE,QAAS,UA8CrBkF,CAAuBnC,EAAKkB,IAE3ClB,IAAKA,EACLG,iBACY,OAAVF,QAAU,IAAVA,OAAAA,EAAAA,EAAYE,mBAA6B,OAAVF,QAAU,IAAVA,OAAAA,EAAAA,EAAYG,aAAcC,WAAqB,OAAVJ,QAAU,IAAVA,OAAAA,EAAAA,EAAYE,iBAElFiC,YAAalB,GALR,GAAmBlB,OAAb,OAAHA,QAAG,IAAHA,OAAAA,EAAAA,EAAKM,QAAQ,KAAuB,OAAjB,OAAHN,QAAG,IAAHA,OAAAA,EAAAA,EAAKO,uBAYrC,SAACC,EAAAA,EAAe,KAhChB,UAAC9C,EAAAA,EAAI,CAAC+C,EAAE,OAAOC,cAAc,SAASrB,WAAW,S,WAC/C,SAACsB,EAAAA,EAAW,KACZ,SAACC,EAAAA,EAAI,CAACC,GAAG,MAAMC,MAAI,E,SAChBnB,EAAE,yB,WCjFf,0B,+FASA,IAAM0C,EAAiB,WACrB,I,EAAM,GAAcC,EAAAA,EAAAA,MAAZC,QACFC,GAAiBC,EAAAA,EAAAA,aAAYC,MAAMF,eACnCG,GAA4B,OAAPJ,QAAO,IAAPA,OAAAA,EAAAA,EAASK,kBAAgC,OAAdJ,QAAc,IAAdA,OAAAA,EAAAA,EAAgBI,eAKlEC,GAAAA,EAAAA,EAAAA,IAAqBL,EAAgB,CACvCM,mBAAmB,EACnBC,mBAAmB,EACnBC,uBAAuB,IANvBC,EAGEJ,EAHFI,QACAC,EAEEL,EAFFK,aACAC,EACEN,EADFM,QAUEC,GAAAA,EAAAA,EAAAA,GAAkBZ,EAAgBS,EAASI,GAH7C7D,EAGE4D,EAHF5D,KACAC,EAEE2D,EAFF3D,UACA0D,EACEC,EADFD,QAGF,OACE,sB,WACE,SAACG,EAAAA,EAAO,IACPX,GACC,SAACY,EAAQ,CACP/D,KAAMA,EACNC,UAAW+D,EACXzC,cAAe0C,EACfzC,sB,EAAsB,uB,iFACd0C,I,OACND,I,4NAIJ,SAACE,EAAsB,CAACnE,KAAMA,EAAMC,UAAW+D,QAMvDnB,EAAeuB,OAASC,EAAAA,EAExB,S,6FCzBA,IApBmC,WACjC,IAAM,GAAQnE,EAAAA,EAAAA,MAANC,EACFmE,GAASrB,EAAAA,EAAAA,aACTD,EAAiBsB,EAAOpB,MAAMF,eAC9B,EAAasB,EAAXC,OAEFC,EAAc,CAClB,CACE1F,MAAOqB,EAAE,SACT5C,KAAM,GAA0ByF,OAAvByB,EAAAA,EAAY,aAA0B,OAAfzB,IAElC,CACElE,MAAOqB,EAAE,YACT5C,KAAM,GAA0ByF,OAAvByB,EAAAA,EAAY,aAA0B,OAAfzB,EAAe,eAInD,OAAO,SAAC0B,EAAAA,EAAW,CAACnG,MAAOiG,EAAahG,WAAY+F,EAAQ5F,eAAe,aAAagG,GAAG,W,mECtB7F,I,GAAA,E,sMAGA,IAAMD,GAAc9H,E,OAAAA,IAAOgI,EAAAA,GAAa,Y,6BAApBhI,C,KAEG,Y,OAAQ,EAALG,MAAkBC,OAAO6H,cAGnD,O,uGCRA,kB,myBAOO,IAAMC,EAA0C,SAACnH,G,OACtD,UAAC4B,EAAAA,EAAG,KAAK5B,EAAK,C,WACZ,SAACoH,EAAAA,EAAQ,CAACC,OAAO,QAAQL,GAAG,SAC5B,SAACI,EAAAA,EAAQ,CAACE,MAAM,MAAMN,GAAG,SACzB,SAACI,EAAAA,EAAQ,CAACE,MAAM,MAAMN,GAAG,UACzB,SAACI,EAAAA,EAAQ,SAYb,IARwD,Y,QAAGG,SAAAA,OAAQ,IAAG,KAAE,EAAKvH,EAAK,KAAvBuH,a,OACzD,SAAC7E,EAAAA,EAAI,GAACC,QAAQ,OAAOC,oBAAqB,CAAC,MAAO,KAAM,KAAM,mBAAuB5C,EAAK,C,SACvFwH,GAAAA,CAAMD,GAAUrG,KAAI,SAACuG,G,OACpB,SAACN,EAAmB,GAAMM,Y","sources":["webpack://_N_E/?5994","webpack://_N_E/./packages/uikit/src/components/MenuItem/styles.tsx","webpack://_N_E/./packages/uikit/src/components/MenuItem/MenuItem.tsx","webpack://_N_E/./packages/uikit/src/components/SubMenuItems/styles.tsx","webpack://_N_E/./packages/uikit/src/components/SubMenuItems/SubMenuItems.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/UserNfts.tsx","webpack://_N_E/./src/pages/nfts/profile/[accountAddress].tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/SubMenu.tsx","webpack://_N_E/./src/views/Nft/market/components/BaseSubMenu.tsx","webpack://_N_E/./src/views/Nft/market/components/GridPlaceholder.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/nfts/profile/[accountAddress]\",\n      function () {\n        return require(\"private-next-pages/nfts/profile/[accountAddress].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/nfts/profile/[accountAddress]\"])\n      });\n    }\n  ","import styled from \"styled-components\";\nimport { StyledMenuItemProps } from \"./types\";\n\nexport const StyledMenuItemContainer = styled.div<StyledMenuItemProps>`\n  position: relative;\n\n  ${({ $isActive, $variant, theme }) =>\n    $isActive &&\n    $variant === \"subMenu\" &&\n    `\n      &:after{\n        content: \"\";\n        position: absolute;\n        bottom: 0;\n        height: 4px;\n        width: 100%;\n        background-color: ${theme.colors.primary};\n        border-radius: 2px 2px 0 0;\n      }\n    `};\n`;\n\nconst StyledMenuItem = styled.a<StyledMenuItemProps>`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  color: ${({ theme, $isActive }) => ($isActive ? theme.colors.secondary : theme.colors.textSubtle)};\n  font-size: 16px;\n  font-weight: ${({ $isActive }) => ($isActive ? \"600\" : \"400\")};\n\n  ${({ $statusColor, theme }) =>\n    $statusColor &&\n    `\n    &:after {\n      content: \"\";\n      border-radius: 100%;\n      background: ${theme.colors[$statusColor]};\n      height: 8px;\n      width: 8px;\n      margin-left: 12px;\n    }\n  `}\n\n  ${({ $variant }) =>\n    $variant === \"default\"\n      ? `\n    padding: 0 16px;\n    height: 48px;\n  `\n      : `\n    padding: 4px 4px 0px 4px;\n    height: 42px;\n  `}\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.tertiary};\n    ${({ $variant }) => $variant === \"default\" && \"border-radius: 16px;\"};\n  }\n`;\n\nexport default StyledMenuItem;\n","import React, { useContext } from \"react\";\nimport { MenuContext } from \"../../widgets/Menu/context\";\nimport StyledMenuItem, { StyledMenuItemContainer } from \"./styles\";\nimport { MenuItemProps } from \"./types\";\n\nconst MenuItem: React.FC<MenuItemProps> = ({\n  children,\n  href,\n  isActive = false,\n  variant = \"default\",\n  statusColor,\n  ...props\n}) => {\n  const { linkComponent } = useContext(MenuContext);\n  const itemLinkProps: unknown = href\n    ? {\n        as: linkComponent,\n        href,\n      }\n    : {\n        as: \"div\",\n      };\n  return (\n    <StyledMenuItemContainer $isActive={isActive} $variant={variant}>\n      <StyledMenuItem {...itemLinkProps} $isActive={isActive} $variant={variant} $statusColor={statusColor} {...props}>\n        {children}\n      </StyledMenuItem>\n    </StyledMenuItemContainer>\n  );\n};\n\nexport default MenuItem;\n","import styled from \"styled-components\";\nimport { Flex } from \"../Box\";\n\nconst StyledSubMenuItems = styled(Flex)<{ $isMobileOnly: boolean }>`\n  ${({ theme }) => theme.mediaQueries.sm} {\n    ${({ $isMobileOnly }) => ($isMobileOnly ? \"display:none\" : \"\")};\n  }\n  flex-grow: 1;\n  background-color: ${({ theme }) => `${theme.colors.backgroundAlt2}`};\n  box-shadow: inset 0px -2px 0px -8px rgba(133, 133, 133, 0.1);\n  overflow-x: scroll;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport default StyledSubMenuItems;\n","import React from \"react\";\nimport { Box } from \"../Box\";\nimport { DropdownMenuItemType } from \"../DropdownMenu/types\";\nimport MenuItem from \"../MenuItem/MenuItem\";\nimport { OpenNewIcon } from \"../Svg\";\nimport StyledSubMenuItems from \"./styles\";\nimport { SubMenuItemsProps } from \"./types\";\n\nconst SubMenuItems: React.FC<SubMenuItemsProps> = ({ items = [], activeItem, isMobileOnly = false, ...props }) => {\n  return (\n    <StyledSubMenuItems\n      justifyContent={[isMobileOnly ? \"flex-end\" : \"start\", null, \"center\"]}\n      {...props}\n      pl={[\"12px\", null, \"0px\"]}\n      $isMobileOnly={isMobileOnly}\n    >\n      {items.map(({ label, href, icon, itemProps, type }) => {\n        const Icon = icon;\n        const isExternalLink = type === DropdownMenuItemType.EXTERNAL_LINK;\n        const linkProps = isExternalLink\n          ? {\n              as: \"a\",\n              target: \"_blank\",\n            }\n          : {};\n\n        return (\n          label && (\n            <Box key={label} mr=\"20px\">\n              <MenuItem href={href} isActive={href === activeItem} variant=\"subMenu\" {...itemProps} {...linkProps}>\n                {Icon && <Icon color={href === activeItem ? \"secondary\" : \"textSubtle\"} mr=\"4px\" />}\n                {label}\n                {isExternalLink && (\n                  <Box display={[\"none\", null, \"flex\"]} style={{ alignItems: \"center\" }} ml=\"4px\">\n                    <OpenNewIcon color=\"textSubtle\" />\n                  </Box>\n                )}\n              </MenuItem>\n            </Box>\n          )\n        );\n      })}\n    </StyledSubMenuItems>\n  );\n};\n\nexport default SubMenuItems;\n","import { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft?.tokenId}-${nft?.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData?.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts: React.FC<{\n  nfts: NftToken[]\n  isLoading: boolean\n  onSuccessSale: () => void\n  onSuccessEditProfile: () => void\n}> = ({ nfts, isLoading, onSuccessSale, onSuccessEditProfile }) => {\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(\n    <ProfileNftModal nft={clickedProfileNft.nft} onSuccess={onSuccessEditProfile} />,\n  )\n  const [onPresentSellModal] = useModal(\n    <SellModal\n      variant={clickedSellNft.variant}\n      nftToSell={clickedSellNft.nft}\n      onSuccessSale={onSuccessSale}\n      onSuccessEditProfile={onSuccessEditProfile}\n    />,\n  )\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft?.tokenId}-${nft?.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData?.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import { useWeb3React } from '@web3-react/core'\nimport { useRouter } from 'next/router'\nimport { useProfileForAddress } from 'state/profile/hooks'\nimport { NftProfileLayout } from 'views/Nft/market/Profile'\nimport SubMenu from 'views/Nft/market/Profile/components/SubMenu'\nimport UnconnectedProfileNfts from 'views/Nft/market/Profile/components/UnconnectedProfileNfts'\nimport UserNfts from 'views/Nft/market/Profile/components/UserNfts'\nimport useNftsForAddress from 'views/Nft/market/hooks/useNftsForAddress'\n\nconst NftProfilePage = () => {\n  const { account } = useWeb3React()\n  const accountAddress = useRouter().query.accountAddress as string\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const {\n    profile,\n    isValidating: isProfileFetching,\n    refresh: refreshProfile,\n  } = useProfileForAddress(accountAddress, {\n    revalidateIfStale: true,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n  })\n  const {\n    nfts,\n    isLoading: isNftLoading,\n    refresh: refreshUserNfts,\n  } = useNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <SubMenu />\n      {isConnectedProfile ? (\n        <UserNfts\n          nfts={nfts}\n          isLoading={isNftLoading}\n          onSuccessSale={refreshUserNfts}\n          onSuccessEditProfile={async () => {\n            await refreshProfile()\n            refreshUserNfts()\n          }}\n        />\n      ) : (\n        <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\n      )}\n    </>\n  )\n}\n\nNftProfilePage.Layout = NftProfileLayout\n\nexport default NftProfilePage\n","import { useTranslation } from 'contexts/Localization'\nimport { useRouter } from 'next/router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const router = useRouter()\n  const accountAddress = router.query.accountAddress as string\n  const { asPath } = router\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={asPath} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"258px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n"],"names":["window","__NEXT_P","push","StyledMenuItemContainer","styled","$isActive","$variant","theme","colors","primary","secondary","textSubtle","$statusColor","tertiary","children","href","isActive","variant","statusColor","props","useContext","MenuContext","linkComponent","itemLinkProps","as","StyledMenuItem","Flex","mediaQueries","sm","$isMobileOnly","backgroundAlt2","items","activeItem","isMobileOnly","StyledSubMenuItems","justifyContent","pl","map","label","icon","itemProps","Icon","isExternalLink","type","DropdownMenuItemType","linkProps","target","Box","mr","MenuItem","color","display","style","alignItems","ml","OpenNewIcon","nfts","isLoading","useTranslation","t","length","Grid","gridGap","gridTemplateColumns","nft","marketData","CollectibleLinkCard","currentAskPrice","isTradable","parseFloat","tokenId","collectionName","GridPlaceholder","p","flexDirection","NoNftsImage","Text","pt","bold","onSuccessSale","onSuccessEditProfile","useState","location","onPresentProfileNftModal","useModal","ProfileNftModal","clickedProfileNft","onSuccess","onPresentSellModal","SellModal","clickedSellNft","nftToSell","useEffect","CollectibleActionCard","isUserNft","onClick","NftLocation","setClickedProfileNft","setClickedSellNft","handleCollectibleClick","nftLocation","NftProfilePage","useWeb3React","account","accountAddress","useRouter","query","isConnectedProfile","toLowerCase","useProfileForAddress","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","profile","isValidating","refresh","useNftsForAddress","isProfileFetching","SubMenu","UserNfts","isNftLoading","refreshUserNfts","refreshProfile","UnconnectedProfileNfts","Layout","NftProfileLayout","router","asPath","ItemsConfig","nftsBaseUrl","BaseSubMenu","mb","SubMenuItems","cardBorder","GridPlaceholderItem","Skeleton","height","width","numItems","times","itemKey"],"sourceRoot":""}