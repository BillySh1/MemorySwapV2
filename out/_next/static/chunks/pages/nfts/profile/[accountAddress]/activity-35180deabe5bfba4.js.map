{"version":3,"file":"static/chunks/pages/nfts/profile/[accountAddress]/activity-35180deabe5bfba4.js","mappings":"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","sources":["webpack://_N_E/?45df","webpack://_N_E/./packages/uikit/src/components/MenuItem/styles.tsx","webpack://_N_E/./packages/uikit/src/components/MenuItem/MenuItem.tsx","webpack://_N_E/./packages/uikit/src/components/SubMenuItems/styles.tsx","webpack://_N_E/./packages/uikit/src/components/SubMenuItems/SubMenuItems.tsx","webpack://_N_E/./src/views/Nft/market/Profile/utils/sortUserActivity.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/ActivityHistory/index.tsx","webpack://_N_E/./src/pages/nfts/profile/[accountAddress]/activity.tsx","webpack://_N_E/./src/views/Nft/market/ActivityHistory/utils/fetchActivityNftMetadata.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/SubMenu.tsx","webpack://_N_E/./src/views/Nft/market/components/BaseSubMenu.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/nfts/profile/[accountAddress]/activity\",\n      function () {\n        return require(\"private-next-pages/nfts/profile/[accountAddress]/activity.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/nfts/profile/[accountAddress]/activity\"])\n      });\n    }\n  ","import styled from \"styled-components\";\nimport { StyledMenuItemProps } from \"./types\";\n\nexport const StyledMenuItemContainer = styled.div<StyledMenuItemProps>`\n  position: relative;\n\n  ${({ $isActive, $variant, theme }) =>\n    $isActive &&\n    $variant === \"subMenu\" &&\n    `\n      &:after{\n        content: \"\";\n        position: absolute;\n        bottom: 0;\n        height: 4px;\n        width: 100%;\n        background-color: ${theme.colors.primary};\n        border-radius: 2px 2px 0 0;\n      }\n    `};\n`;\n\nconst StyledMenuItem = styled.a<StyledMenuItemProps>`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  color: ${({ theme, $isActive }) => ($isActive ? theme.colors.secondary : theme.colors.textSubtle)};\n  font-size: 16px;\n  font-weight: ${({ $isActive }) => ($isActive ? \"600\" : \"400\")};\n\n  ${({ $statusColor, theme }) =>\n    $statusColor &&\n    `\n    &:after {\n      content: \"\";\n      border-radius: 100%;\n      background: ${theme.colors[$statusColor]};\n      height: 8px;\n      width: 8px;\n      margin-left: 12px;\n    }\n  `}\n\n  ${({ $variant }) =>\n    $variant === \"default\"\n      ? `\n    padding: 0 16px;\n    height: 48px;\n  `\n      : `\n    padding: 4px 4px 0px 4px;\n    height: 42px;\n  `}\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.tertiary};\n    ${({ $variant }) => $variant === \"default\" && \"border-radius: 16px;\"};\n  }\n`;\n\nexport default StyledMenuItem;\n","import React, { useContext } from \"react\";\nimport { MenuContext } from \"../../widgets/Menu/context\";\nimport StyledMenuItem, { StyledMenuItemContainer } from \"./styles\";\nimport { MenuItemProps } from \"./types\";\n\nconst MenuItem: React.FC<MenuItemProps> = ({\n  children,\n  href,\n  isActive = false,\n  variant = \"default\",\n  statusColor,\n  ...props\n}) => {\n  const { linkComponent } = useContext(MenuContext);\n  const itemLinkProps: unknown = href\n    ? {\n        as: linkComponent,\n        href,\n      }\n    : {\n        as: \"div\",\n      };\n  return (\n    <StyledMenuItemContainer $isActive={isActive} $variant={variant}>\n      <StyledMenuItem {...itemLinkProps} $isActive={isActive} $variant={variant} $statusColor={statusColor} {...props}>\n        {children}\n      </StyledMenuItem>\n    </StyledMenuItemContainer>\n  );\n};\n\nexport default MenuItem;\n","import styled from \"styled-components\";\nimport { Flex } from \"../Box\";\n\nconst StyledSubMenuItems = styled(Flex)<{ $isMobileOnly: boolean }>`\n  ${({ theme }) => theme.mediaQueries.sm} {\n    ${({ $isMobileOnly }) => ($isMobileOnly ? \"display:none\" : \"\")};\n  }\n  flex-grow: 1;\n  background-color: ${({ theme }) => `${theme.colors.backgroundAlt2}`};\n  box-shadow: inset 0px -2px 0px -8px rgba(133, 133, 133, 0.1);\n  overflow-x: scroll;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport default StyledSubMenuItems;\n","import React from \"react\";\nimport { Box } from \"../Box\";\nimport { DropdownMenuItemType } from \"../DropdownMenu/types\";\nimport MenuItem from \"../MenuItem/MenuItem\";\nimport { OpenNewIcon } from \"../Svg\";\nimport StyledSubMenuItems from \"./styles\";\nimport { SubMenuItemsProps } from \"./types\";\n\nconst SubMenuItems: React.FC<SubMenuItemsProps> = ({ items = [], activeItem, isMobileOnly = false, ...props }) => {\n  return (\n    <StyledSubMenuItems\n      justifyContent={[isMobileOnly ? \"flex-end\" : \"start\", null, \"center\"]}\n      {...props}\n      pl={[\"12px\", null, \"0px\"]}\n      $isMobileOnly={isMobileOnly}\n    >\n      {items.map(({ label, href, icon, itemProps, type }) => {\n        const Icon = icon;\n        const isExternalLink = type === DropdownMenuItemType.EXTERNAL_LINK;\n        const linkProps = isExternalLink\n          ? {\n              as: \"a\",\n              target: \"_blank\",\n            }\n          : {};\n\n        return (\n          label && (\n            <Box key={label} mr=\"20px\">\n              <MenuItem href={href} isActive={href === activeItem} variant=\"subMenu\" {...itemProps} {...linkProps}>\n                {Icon && <Icon color={href === activeItem ? \"secondary\" : \"textSubtle\"} mr=\"4px\" />}\n                {label}\n                {isExternalLink && (\n                  <Box display={[\"none\", null, \"flex\"]} style={{ alignItems: \"center\" }} ml=\"4px\">\n                    <OpenNewIcon color=\"textSubtle\" />\n                  </Box>\n                )}\n              </MenuItem>\n            </Box>\n          )\n        );\n      })}\n    </StyledSubMenuItems>\n  );\n};\n\nexport default SubMenuItems;\n","import { Activity, AskOrder, AskOrderType, MarketEvent, Transaction, UserActivity } from 'state/nftMarket/types'\nimport orderBy from 'lodash/orderBy'\n\nexport const sortUserActivity = (account: string, userActivity: UserActivity): Activity[] => {\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivity\n\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\n    const transformedTransactions = transactions.map((transaction) => {\n      const userSeller = transaction.seller.id === account.toLowerCase()\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n      const { timestamp, nft } = transaction\n      const price = transaction.askPrice\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n      const tx = transaction.id\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrders.map((askOrder) => {\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\n      const { timestamp, nft } = askOrder\n      const price = askOrder.askPrice\n      const tx = askOrder.id\n      return { marketEvent, price, timestamp, nft, tx }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [\n    ...transformAskOrders(askOrderHistory),\n    ...transformTransactions(buyTradeHistory),\n    ...transformTransactions(sellTradeHistory),\n  ]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = orderBy(allActivity, (activity) => parseInt(activity.timestamp, 10), 'desc')\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { getUserActivity } from 'state/nftMarket/helpers'\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TableLoader from 'components/TableLoader'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useRouter } from 'next/router'\nimport { sortUserActivity } from '../../utils/sortUserActivity'\nimport NoNftsImage from '../../../components/Activity/NoNftsImage'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\nimport ActivityRow from '../../../components/Activity/ActivityRow'\nimport { fetchActivityNftMetadata } from '../../../ActivityHistory/utils/fetchActivityNftMetadata'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const accountAddress = useRouter().query.accountAddress as string\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    const fetchAddressActivity = async () => {\n      try {\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    if (isAddress(accountAddress)) {\n      fetchAddressActivity()\n    }\n  }, [account, accountAddress, dispatch])\n\n  useEffect(() => {\n    const fetchNftMetadata = async () => {\n      const nfts = await fetchActivityNftMetadata(sortedUserActivities)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitySlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitySlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card style={{ overflowX: 'auto' }}>\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"center\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                      isUserActivity\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import { NftProfileLayout } from 'views/Nft/market/Profile'\nimport ActivityHistory from 'views/Nft/market/Profile/components/ActivityHistory'\nimport SubMenu from 'views/Nft/market/Profile/components/SubMenu'\n\nconst NftProfileActivityPage = () => {\n  return (\n    <>\n      <SubMenu />\n      <ActivityHistory />\n    </>\n  )\n}\n\nNftProfileActivityPage.Layout = NftProfileLayout\n\nexport default NftProfileActivityPage\n","import { Activity, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { getNftsFromCollectionApi, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport uniqBy from 'lodash/uniqBy'\nimport { pancakeBunniesAddress } from '../../constants'\n\nexport const fetchActivityNftMetadata = async (activities: Activity[]): Promise<NftToken[]> => {\n  const hasPBCollections = activities.some(\n    (activity) => activity.nft.collection.id.toLowerCase() === pancakeBunniesAddress.toLowerCase(),\n  )\n  let bunniesMetadata\n  if (hasPBCollections) {\n    bunniesMetadata = await getNftsFromCollectionApi(pancakeBunniesAddress)\n  }\n\n  const pbNfts = bunniesMetadata\n    ? activities\n        .filter((activity) => activity.nft.collection.id.toLowerCase() === pancakeBunniesAddress.toLowerCase())\n        .map((activity) => {\n          const { name: collectionName } = bunniesMetadata.data[activity.nft.otherId].collection\n          return {\n            ...bunniesMetadata.data[activity.nft.otherId],\n            tokenId: activity.nft.tokenId,\n            attributes: [{ traitType: 'bunnyId', value: activity.nft.otherId }],\n            collectionAddress: activity.nft.collection.id,\n            collectionName,\n          }\n        })\n    : []\n\n  const activityNftTokenIds = uniqBy(\n    activities\n      .filter((activity) => activity.nft.collection.id.toLowerCase() !== pancakeBunniesAddress.toLowerCase())\n      .map((activity): TokenIdWithCollectionAddress => {\n        return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n      }),\n    'tokenId',\n  )\n  const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n  return nfts.concat(pbNfts)\n}\n","import { useTranslation } from 'contexts/Localization'\nimport { useRouter } from 'next/router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const router = useRouter()\n  const accountAddress = router.query.accountAddress as string\n  const { asPath } = router\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={asPath} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n"],"names":["window","__NEXT_P","push","StyledMenuItemContainer","styled","$isActive","$variant","theme","colors","primary","secondary","textSubtle","$statusColor","tertiary","children","href","isActive","variant","statusColor","props","useContext","MenuContext","linkComponent","itemLinkProps","as","StyledMenuItem","Flex","mediaQueries","sm","$isMobileOnly","backgroundAlt2","items","activeItem","isMobileOnly","StyledSubMenuItems","justifyContent","pl","map","label","icon","itemProps","Icon","isExternalLink","type","DropdownMenuItemType","linkProps","target","Box","mr","MenuItem","color","display","style","alignItems","ml","OpenNewIcon","sortUserActivity","account","userActivity","askOrders","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","id","toLowerCase","marketEvent","MarketEvent","timestamp","nft","price","askPrice","otherParty","buyer","tx","allActivity","askOrder","orderType","AskOrderType","getAskOrderEvent","transformAskOrders","length","sortedByMostRecent","orderBy","activity","parseInt","useWeb3React","dispatch","useAppDispatch","accountAddress","useRouter","query","useTheme","useTranslation","t","useState","bnbBusdPrice","useBNBBusdPrice","useMatchBreakpoints","isXs","isSm","useEffect","fetchAddressActivity","addressActivity","getUserActivity","toLocaleLowerCase","setSortedUserActivities","setIsLoading","console","error","isAddress","fetchNftMetadata","nfts","fetchActivityNftMetadata","sortedUserActivities","setNftMetadata","max","Math","ceil","setMaxPages","getMaxPages","setActivitiesSlice","setCurrentPage","slice","currentPage","getActivitySlice","Card","overflowX","nftMetadata","activitiesSlice","isLoading","Table","thead","tr","Th","textAlign","tbody","TableLoader","nftMeta","find","metaNft","tokenId","ActivityRow","isUserActivity","borderTop","cardBorder","pt","flexDirection","height","PageButtons","Arrow","onClick","ArrowBackIcon","Text","page","maxPage","ArrowForwardIcon","p","NoNftsImage","bold","NftProfileActivityPage","SubMenu","ActivityHistory","Layout","NftProfileLayout","activities","bunniesMetadata","pbNfts","activityNftTokenIds","some","collection","pancakeBunniesAddress","getNftsFromCollectionApi","filter","name","data","otherId","attributes","traitType","value","collectionAddress","collectionName","uniqBy","getNftsFromDifferentCollectionsApi","concat","router","asPath","ItemsConfig","nftsBaseUrl","BaseSubMenu","mb","SubMenuItems"],"sourceRoot":""}