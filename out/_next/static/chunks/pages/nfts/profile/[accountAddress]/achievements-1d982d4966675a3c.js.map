{"version":3,"file":"static/chunks/pages/nfts/profile/[accountAddress]/achievements-1d982d4966675a3c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/_baseSum.js","webpack://_N_E/./node_modules/lodash/sumBy.js","webpack://_N_E/?4359","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","webpack://_N_E/./src/views/Nft/market/Profile/components/Achievements/index.tsx","webpack://_N_E/./src/pages/nfts/profile/[accountAddress]/achievements.tsx","webpack://_N_E/./src/state/nftMarket/hooks.ts"],"sourcesContent":["/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseIteratee = require('./_baseIteratee'),\n    baseSum = require('./_baseSum');\n\n/**\n * This method is like `_.sum` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be summed.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {number} Returns the sum.\n * @example\n *\n * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n *\n * _.sumBy(objects, function(o) { return o.n; });\n * // => 20\n *\n * // The `_.property` iteratee shorthand.\n * _.sumBy(objects, 'n');\n * // => 20\n */\nfunction sumBy(array, iteratee) {\n  return (array && array.length)\n    ? baseSum(array, baseIteratee(iteratee, 2))\n    : 0;\n}\n\nmodule.exports = sumBy;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/nfts/profile/[accountAddress]/achievements\",\n      function () {\n        return require(\"private-next-pages/nfts/profile/[accountAddress]/achievements.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/nfts/profile/[accountAddress]/achievements\"])\n      });\n    }\n  ","import { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" fontSize=\"14px\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import styled from 'styled-components'\nimport { Flex, Heading, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Achievement } from 'state/types'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList: React.FC<{ achievements: Achievement[]; isLoading: boolean }> = ({\n  achievements,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  if (isLoading) {\n    if (isMobile) {\n      return <Skeleton width=\"100%\" height=\"64px\" />\n    }\n    return <Skeleton width=\"540px\" height=\"64px\" />\n  }\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: isCollecting } = useCatchTxError()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n    })\n    if (receipt?.status) {\n      onCollectSuccess(achievement)\n      toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import { useEffect, useState } from 'react'\nimport sumBy from 'lodash/sumBy'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout: React.FC<{ onSuccess?: () => void }> = ({ onSuccess = null }) => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile, refresh: refreshProfile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    refreshProfile()\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n    if (onSuccess) {\n      onSuccess()\n    }\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport IconStatBox from 'views/Teams/components/IconStatBox'\nimport { Achievement } from 'state/types'\nimport AchievementsList from './AchievementsList'\nimport ClaimPointsCallout from './ClaimPointsCallout'\n\nconst Achievements: React.FC<{\n  achievements: Achievement[]\n  isLoading: boolean\n  points?: number\n  onSuccess?: () => void\n}> = ({ achievements, isLoading, points = 0, onSuccess = null }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Card>\n      <CardBody>\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n          {t('Achievements')}\n        </Heading>\n        <ClaimPointsCallout onSuccess={onSuccess} />\n        <AchievementsList achievements={achievements} isLoading={isLoading} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Achievements\n","import { useRouter } from 'next/router'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { NftProfileLayout } from 'views/Nft/market/Profile'\nimport Achievements from 'views/Nft/market/Profile/components/Achievements'\n\nconst NftProfileAchievementsPage = () => {\n  const accountAddress = useRouter().query.accountAddress as string\n  const { profile } = useProfileForAddress(accountAddress)\n  const { achievements, isFetching: isAchievementFetching, refresh } = useAchievementsForAddress(accountAddress)\n\n  return (\n    <Achievements\n      achievements={achievements}\n      isLoading={isAchievementFetching}\n      points={profile?.points}\n      onSuccess={refresh}\n    />\n  )\n}\n\nNftProfileAchievementsPage.Layout = NftProfileLayout\n\nexport default NftProfileAchievementsPage\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { isAddress } from 'utils'\nimport { FetchStatus } from 'config/constants/types'\nimport erc721Abi from 'config/abi/erc721.json'\nimport { useSWRMulticall } from 'hooks/useSWRContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport useSWR from 'swr'\nimport useSWRImmutable from 'swr/immutable'\nimport isEmpty from 'lodash/isEmpty'\nimport shuffle from 'lodash/shuffle'\n\nimport { State } from '../types'\nimport { ApiCollections, NftActivityFilter, NftFilter, NftToken, Collection, NftAttribute } from './types'\nimport { getCollection, getCollections } from './helpers'\n\nconst DEFAULT_NFT_ORDERING = { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\nconst DEFAULT_NFT_ACTIVITY_FILTER = { typeFilters: [], collectionFilters: [] }\nconst EMPTY_OBJECT = {}\n\nexport const useGetCollections = (): { data: ApiCollections; status: FetchStatus } => {\n  const { data, status } = useSWR(['nftMarket', 'collections'], async () => getCollections())\n  const collections = data ?? ({} as ApiCollections)\n  return { data: collections, status }\n}\n\nexport const useGetCollection = (collectionAddress: string): Collection | undefined => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const { data } = useSWR(\n    checksummedCollectionAddress ? ['nftMarket', 'collections', checksummedCollectionAddress.toLowerCase()] : null,\n    async () => getCollection(checksummedCollectionAddress),\n  )\n  const collectionObject = data ?? {}\n  return collectionObject[checksummedCollectionAddress]\n}\n\nexport const useGetShuffledCollections = (): { data: Collection[]; status: FetchStatus } => {\n  const { data } = useSWRImmutable(['nftMarket', 'collections'], async () => getCollections())\n  const collections = data ?? ({} as ApiCollections)\n  const { data: shuffledCollections, status } = useSWRImmutable(\n    !isEmpty(collections) ? ['nftMarket', 'shuffledCollections'] : null,\n    () => {\n      return shuffle(collections)\n    },\n  )\n  return { data: shuffledCollections, status }\n}\n\nexport const useNftsFromCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\n  return nfts\n}\n\nexport const useApprovalNfts = (nftsInWallet: NftToken[]) => {\n  const nftApprovalCalls = useMemo(\n    () =>\n      nftsInWallet.map((nft: NftToken) => {\n        const { tokenId, collectionAddress } = nft\n\n        return {\n          address: collectionAddress,\n          name: 'getApproved',\n          params: [tokenId],\n        }\n      }),\n    [nftsInWallet],\n  )\n\n  const { data } = useSWRMulticall(erc721Abi, nftApprovalCalls)\n\n  const approvedTokenIds = Array.isArray(data)\n    ? data\n        .flat()\n        .reduce(\n          (acc, address, index) => ({ ...acc, [nftsInWallet[index].tokenId]: getPancakeProfileAddress() === address }),\n          {},\n        )\n    : null\n\n  return { data: approvedTokenIds }\n}\n\nexport const useGetNftFilters = (collectionAddress: string): Readonly<Record<string, NftAttribute>> => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.activeFilters : EMPTY_OBJECT\n}\n\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.loadingState : FetchStatus.Idle\n}\n\nexport const useGetNftOrdering = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.ordering : DEFAULT_NFT_ORDERING\n}\n\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\n}\n\nexport const useTryVideoNftMedia = () => {\n  const tryVideoNftMedia = useSelector((state: State) => state.nftMarket.data.tryVideoNftMedia)\n  return tryVideoNftMedia ?? true\n}\n\nexport const useGetNftActivityFilters = (collectionAddress: string) => {\n  const collectionFilter: NftActivityFilter = useSelector(\n    (state: State) => state.nftMarket.data.activityFilters[collectionAddress],\n  )\n  return collectionFilter || DEFAULT_NFT_ACTIVITY_FILTER\n}\n"],"names":["module","exports","array","iteratee","result","index","length","current","undefined","baseIteratee","baseSum","window","__NEXT_P","push","NoBadgePlaceholder","styled","BunnyPlaceholderIcon","theme","mediaQueries","sm","StyledAchievementAvatar","badge","props","src","alt","title","useTranslation","t","Text","bold","key","data","Description","attrs","as","md","description","color","fontSize","Details","Flex","achievement","AchievementAvatar","AchievementTitle","AchievementDescription","alignItems","PrizeIcon","width","mr","points","toLocaleString","Grid","achievements","isLoading","useMatchBreakpoints","isMobile","Skeleton","height","map","AchievementCard","id","justifyContent","style","Heading","scale","localePoints","num","ActionColumn","StyledAchievementRow","colors","cardBorder","Body","onCollectSuccess","pointCenterContract","usePointCenterIfoContract","useToast","toastSuccess","useCatchTxError","fetchWithCatchTxError","loading","useCallWithGasPrice","callWithGasPrice","handleCollectPoints","receipt","address","status","ToastDescriptionWithTx","txHash","transactionHash","PointsLabel","px","mb","Button","onClick","isCollecting","endIcon","AutoRenewIcon","spin","disabled","variant","onSuccess","useState","dispatch","useAppDispatch","useProfile","profile","refresh","useWeb3React","account","useEffect","fetchIfoClaims","ifoData","getClaimableIfoData","setClaimableAchievement","handleCollectSuccess","refreshProfile","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","claimableAchievements","totalPointsToCollect","sumBy","Card","CardHeader","flexDirection","CardBody","AchievementRow","IconStatBox","icon","subtitle","ClaimPointsCallout","AchievementsList","NftProfileAchievementsPage","accountAddress","useRouter","query","useProfileForAddress","useAchievementsForAddress","isFetching","Achievements","isAchievementFetching","Layout","NftProfileLayout","DEFAULT_NFT_ORDERING","field","direction","DEFAULT_NFT_ACTIVITY_FILTER","typeFilters","collectionFilters","EMPTY_OBJECT","useGetCollections","useSWR","getCollections","useGetCollection","collectionAddress","checksummedCollectionAddress","isAddress","toLowerCase","getCollection","useGetShuffledCollections","useSWRImmutable","collections","isEmpty","shuffle","useNftsFromCollection","useSelector","state","nftMarket","nfts","useApprovalNfts","nftsInWallet","nftApprovalCalls","useMemo","nft","tokenId","name","params","useSWRMulticall","erc721Abi","approvedTokenIds","Array","isArray","flat","reduce","acc","getPancakeProfileAddress","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","loadingState","FetchStatus","useGetNftOrdering","ordering","useGetNftShowOnlyOnSale","showOnlyOnSale","useTryVideoNftMedia","tryVideoNftMedia","useGetNftActivityFilters","activityFilters"],"sourceRoot":""}