{"version":3,"file":"static/chunks/pages/info/tokens-ae2978b136334944.js","mappings":"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","sources":["webpack://_N_E/?56db","webpack://_N_E/./src/views/Info/components/TopTokenMovers/index.tsx","webpack://_N_E/./src/views/Info/Tokens/index.tsx","webpack://_N_E/./src/pages/info/tokens.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/TokensTable.tsx","webpack://_N_E/./src/views/Info/components/Percent/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info/tokens\",\n      function () {\n        return require(\"private-next-pages/info/tokens.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info/tokens\"])\n      });\n    }\n  ","import { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(NextLinkFromReactRouter)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import { Card, Heading, Text } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport { useMemo } from 'react'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import Tokens from 'views/Info/Tokens'\nimport { InfoPageLayout } from 'views/Info'\n\nconst InfoTokensPage = () => {\n  return <Tokens />\n}\n\nInfoTokensPage.Layout = InfoPageLayout\n\nexport default InfoTokensPage\n","import { useState, useMemo, useCallback, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport orderBy from 'lodash/orderBy'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? orderBy(\n          tokenDatas,\n          (tokenData) => tokenData[sortField as keyof TokenData],\n          sortDirection ? 'desc' : 'asc',\n        ).slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import { Text, TextProps } from '@pancakeswap/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n"],"names":["window","__NEXT_P","push","CardWrapper","styled","NextLinkFromReactRouter","TopMoverCard","Box","theme","colors","cardBorder","radii","card","ScrollableRow","DataCard","tokenData","to","address","Flex","width","height","CurrencyLogo","size","ml","Text","symbol","alignItems","fontSize","mr","lineHeight","formatAmount","priceUSD","Percent","value","priceUSDChange","allTokens","useAllTokenData","useTranslation","t","topPriceIncrease","useMemo","Object","values","sort","data","a","b","Math","abs","slice","min","length","increaseRef","useRef","moveLeftRef","useEffect","scrollInterval","setInterval","current","scrollLeft","scrollWidth","clientWidth","scrollTo","clearInterval","some","entry","Card","my","mt","ref","map","formattedTokens","token","filter","savedTokens","useWatchlistTokens","watchListTokens","useTokenDatas","Page","Heading","scale","mb","TokenTable","tokenDatas","py","px","TopTokenMovers","id","InfoTokensPage","Tokens","Layout","InfoPageLayout","ResponsiveGrid","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","Skeleton","DataRow","index","useMatchBreakpoints","isXs","isSm","marginLeft","name","fontWeight","notation","volumeUSD","liquidityUSD","SORT_FIELD","maxItems","useState","extraPages","setMaxPage","floor","sortedTokens","orderBy","sortField","sortDirection","page","handleSort","useCallback","newField","setSortField","setSortDirection","arrow","field","TableWrapper","color","bold","ClickableColumnHeader","onClick","textTransform","Break","i","Fragment","PageButtons","Arrow","setPage","ArrowBackIcon","maxPage","ArrowForwardIcon","rest","Number","isNaN","isNegative","toFixed"],"sourceRoot":""}