{"version":3,"file":"static/chunks/pages/info/tokens/[address]-f8d6df55dc4b420f.js","mappings":"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","sources":["webpack://_N_E/?bbcf","webpack://_N_E/./src/views/Info/hooks/useCMCLink.ts","webpack://_N_E/./src/views/Info/Tokens/TokenPage.tsx","webpack://_N_E/./src/pages/info/tokens/[address].tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info/tokens/[address]\",\n      function () {\n        return require(\"private-next-pages/info/tokens/[address].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info/tokens/[address]\"])\n      });\n    }\n  ","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport { useMemo } from 'react'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Image,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<{ routeAddress: string }> = ({ routeAddress }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <NextLinkFromReactRouter style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </NextLinkFromReactRouter>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <NextLinkFromReactRouter to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </NextLinkFromReactRouter>\n                <NextLinkFromReactRouter to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </NextLinkFromReactRouter>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on BscScan')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <NextLinkFromReactRouter to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </NextLinkFromReactRouter>\n                <NextLinkFromReactRouter to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </NextLinkFromReactRouter>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import Token from 'views/Info/Tokens/TokenPage'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport { isAddress } from 'utils'\nimport { InfoPageLayout } from 'views/Info'\n\nconst TokenPage = ({ address }: { address: string }) => {\n  if (!address) {\n    return null\n  }\n\n  return <Token routeAddress={address} />\n}\n\nTokenPage.Layout = InfoPageLayout\n\nexport default TokenPage\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: true,\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const address = params?.address\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!address || !isAddress(String(address).toLowerCase())) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n  }\n  return {\n    props: {\n      address,\n    },\n  }\n}\n","import { useCallback, useState, useMemo, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n"],"names":["window","__NEXT_P","push","address","useState","undefined","useEffect","fetchLink","result","fetch","status","json","then","data","setCMCPageUrl","url","cmcPageUrl","ContentLayout","styled","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","routeAddress","useMatchBreakpoints","isXs","isSm","useTranslation","t","toLowerCase","cmcLink","useCMCLink","tokenData","useTokenData","poolsForToken","usePoolsForToken","poolDatas","usePoolDatas","transactions","useTokenTransactions","chartData","useTokenChartData","priceData","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","useMemo","length","time","Date","getTime","open","close","priceUSD","high","low","useWatchlistTokens","watchlistTokens","addWatchlistToken","Page","symbol","exists","Flex","justifyContent","mb","flexDirection","Breadcrumbs","NextLinkFromReactRouter","to","Text","color","mr","truncateHash","mt","LinkExternal","href","getBscScanLink","rel","target","Image","src","height","width","alt","SaveIcon","fill","includes","onClick","alignItems","CurrencyLogo","size","ml","bold","lineHeight","fontSize","id","name","formatAmount","notation","Percent","value","priceUSDChange","fontWeight","Button","variant","Card","Box","p","small","textTransform","liquidityUSD","liquidityUSDChange","volumeUSD","volumeUSDChange","volumeUSDWeek","txCount","isInteger","ChartCard","tokenPriceData","Heading","scale","PoolTable","TransactionTable","style","display","marginLeft","Spinner","TokenPage","Token","Layout","InfoPageLayout","ResponsiveGrid","LinkWrapper","SORT_FIELD","LoadingRow","Skeleton","TableLoader","DataRow","poolData","index","DoubleCurrencyLogo","address0","token0","address1","token1","lpFees24h","lpApr7d","loading","extraPages","ITEMS_PER_INFO_TABLE_PAGE","setMaxPage","Math","floor","sortedPools","sort","a","b","sortField","sortDirection","slice","page","handleSort","useCallback","newField","setSortField","setSortDirection","arrow","field","TableWrapper","ClickableColumnHeader","Break","map","i","Fragment","PageButtons","Arrow","setPage","ArrowBackIcon","maxPage","ArrowForwardIcon"],"sourceRoot":""}