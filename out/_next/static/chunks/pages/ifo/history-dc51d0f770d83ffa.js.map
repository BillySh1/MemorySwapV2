{"version":3,"file":"static/chunks/pages/ifo/history-dc51d0f770d83ffa.js","mappings":"uFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,eACA,WACE,OAAO,EAAQ,W,8PCJvB,iB,u/CAcA,IAoEA,EApE4B,SAACC,GAC3B,IAAQC,EAAgCD,EAAhCC,QAASC,EAAuBF,EAAvBE,mBACXC,GAAoBC,EAAAA,EAAAA,IAAgBJ,EAAIK,SAASC,QAC7BC,GAAAA,EAAAA,EAAAA,UAWxB,GAVAC,eAAe,EACfC,OAAQ,OACRC,gBAAiB,EACjBC,kBAAmB,EACnBC,SAAU,EACVC,gBAAiB,EACjBC,cAAe,EACfC,YAAa,EACbC,aAAc,KACdC,qBAAiBC,GAChBC,EAAAA,GAAAA,cAAwB,CACvBC,kBAAmBC,EAAAA,GACnBC,gBAAiBD,EAAAA,GACjBE,mBAAoBF,EAAAA,GACpBG,iBAAkBH,EAAAA,GAClBI,QAAS,EACTC,iBAAkBL,EAAAA,MAlCxB,EAiB4Bd,EAmBxB,GApCJ,EAiB4BA,EAmBxB,GACIoB,GAAeC,EAAAA,EAAAA,aAAY,W,WAC/B,qBAAOC,G,IACCC,EAKqD,EAApDC,EAAYC,EAAUC,EAAeC,EAEtCpB,EACAC,EAEAN,EACA0B,EACAzB,EAGAE,E,wEAfAkB,EAAW,CAAC,aAAc,WAAY,gBAAiB,eAAeM,KAAI,SAACC,G,MAAY,CAC3FpC,QAAAA,EACAqC,KAAMD,M,iBAGyDE,EAAAA,EAAAA,GAAYC,EAAUV,G,mBAA5B,GAAqC,gBAAzFC,EAAoD,EAAqC,GAA7EC,EAAwC,EAAqC,GAAnEC,EAA8B,EAAqC,GAApDC,EAAe,EAAqC,GAE1FpB,EAAgBiB,EAAaA,EAAW,GAAGU,WAAa,EACxD1B,EAAciB,EAAWA,EAAS,GAAGS,WAAa,EAElDhC,GAASiC,EAAAA,EAAAA,GAAUb,EAAcf,EAAeC,GAChDoB,EAAcpB,EAAcD,EAC5BJ,EAAkBK,EAAcc,EAGhCjB,EACJiB,EAAef,GACTe,EAAef,GAAiBqB,EAAe,KAC/CN,EAAe3B,IAAuBY,EAAgBZ,GAAuB,IAErFyC,GAAS,SAACC,G,OAAU,KACfA,EASH,GARApC,eAAe,EACfC,OAAAA,EACAC,gBAAAA,EACAC,mBAAoBG,EAAgBe,GAAgBgB,EAAAA,GACpDjC,SAAAA,EACAC,gBAAiBH,EAAkBmC,EAAAA,GACnC/B,cAAAA,EACAC,YAAAA,GACCI,EAAAA,GAAAA,cAAwB,KACpByB,EAAKE,cAAa,CACrB1B,kBAAmBa,EAAgB,IAAIc,IAAJ,CAAcd,EAAc,GAAGe,YAAc3B,EAAAA,GAChFC,gBAAiBY,EAAc,IAAIa,IAAJ,CAAcb,EAAY,GAAGc,YAAc3B,EAAAA,U,0OAlCzEQ,G,gCADwB,GAuC/B,CAAC5B,EAASC,IAGZ,OAAO,KAAK+C,EAAO,CAAAC,mBAAoB/C,EAAmBwB,aAAAA,K,iCC/E5D,iB,u/CAgBA,IAAMwB,EAEJ,GADA3C,eAAe,GACdW,EAAAA,GAAAA,cAAwB,CACvBiC,yBAA0B/B,EAAAA,GAC1BgC,YAAY,EACZC,aAAa,EACbC,sBAAuBlC,EAAAA,GACvBmC,oBAAqBnC,EAAAA,GACrBoC,cAAepC,EAAAA,KAuEnB,EAhE4B,SAACrB,GAC3B,I,EAA0BO,GAAAA,EAAAA,EAAAA,UAAyB4C,GAhCrD,EAgC4B5C,EAAsC,GAhClE,EAgC4BA,EAAsC,GAExDN,EAAsBD,EAAtBC,QAASI,EAAaL,EAAbK,SACX,EAAoB4C,EAAlBH,cAEF,GAAcY,EAAAA,EAAAA,MAAZC,QACFC,GAAWC,EAAAA,EAAAA,IAAiB5D,GAC5B6D,GAAmBC,EAAAA,EAAAA,IAAS1D,EAASJ,SAAS,GAC9C+D,GAAYC,EAAAA,EAAAA,GAAgBH,EAAkB7D,EAAS6C,EAAcQ,aAqBrE3B,GAAeC,EAAAA,EAAAA,c,EAAY,uB,IACzBE,EAMsD,EAArDoC,EAAgBC,EAAkBC,EACnCC,E,wEAPAvC,EAAW,CAAC,oBAAqB,WAAY,sBAAsBM,KAAI,SAACC,G,MAAY,CACxFpC,QAAAA,EACAqC,KAAMD,EACNiC,OAAQ,CAACX,O,iBAGuDpB,EAAAA,EAAAA,GAAYC,EAAUV,G,mBAA5B,GAAqC,gBAA1FoC,EAAqD,EAAqC,GAA1EC,EAAqC,EAAqC,GAAxDC,EAAmB,EAAqC,GAC3FC,EAA2BF,EAC7B,CACEI,OAAQ,IAAIxB,IAAJ,CAAcoB,EAAiBI,OAAOvB,YAC9CwB,QAASL,EAAiBK,SAE5B,CAAED,OAAQlD,EAAAA,GAAUmD,SAAS,GAEjC7B,GAAS,SAAC8B,G,OAER,GADAjE,eAAe,GACdW,EAAAA,GAAAA,cAAwB,KACpBsD,EAAU3B,cAAa,CAC1BM,yBAA0BiB,EAAeE,OACzClB,WAAYgB,EAAeG,QAC3BjB,sBAAuBW,EAAiB,IAAInB,IAAJ,CAAcmB,EAAe,GAAGlB,YAAc3B,EAAAA,GACtFmC,oBAAqBY,EAAkB,IAAIrB,IAAJ,CAAcqB,EAAgB,GAAGpB,YAAc3B,EAAAA,S,0NAGzF,CAACsC,EAAS1D,IAMb,OAAO,KAAKgD,EAAO,CAAAe,UAAAA,EAAWJ,SAAAA,EAAUc,aAlDnB,SAACjE,G,OACpBkC,GAAS,SAAC8B,G,OAAe,KACpBA,EACH,KAACtD,EAAAA,GAAAA,cAAwB,KACpBsD,EAAU3B,cAAa,CAC1BQ,YAAa7C,UA6CmCkE,aAzCjC,WACnBhC,GAAS,SAAC8B,G,OAAe,KACpBA,EACH,KAACtD,EAAAA,GAAAA,cAAwB,KACpBsD,EAAU3B,cAAa,CAC1BO,YAAY,UAoCkD1B,aAAAA,EAAciD,cAJ7DhD,EAAAA,EAAAA,cAAY,WAC/Be,EAASQ,KACR,O,UC1EL,EAPuC,Y,IAAGnD,EAAG,EAAHA,IAClC6E,EAAgBC,EAAsB9E,GACtC+E,EAAgBC,EAAsBhF,GAE5C,OAAO,SAACiF,EAAAA,GAAe,CAACjF,IAAKA,EAAK6E,cAAeA,EAAeE,cAAeA,K,qBCbjF,iB,u/CAWA,IAAM5B,EAAe,CACnB3C,eAAe,EACf0E,UAAW,CACT9B,yBAA0B/B,EAAAA,GAC1BkC,sBAAuBlC,EAAAA,GACvBmC,oBAAqBnC,EAAAA,GACrBoC,cAAepC,EAAAA,GACfgC,YAAY,EACZC,aAAa,GAEfR,cAAe,CACbM,yBAA0B/B,EAAAA,GAC1BkC,sBAAuBlC,EAAAA,GACvBmC,oBAAqBnC,EAAAA,GACrBoC,cAAepC,EAAAA,GACfgC,YAAY,EACZC,aAAa,IA0EjB,EAnE4B,SAACtD,GAC3B,I,EAA0BO,GAAAA,EAAAA,EAAAA,UAAyB4C,GAnCrD,EAmC4B5C,EAAsC,GAnClE,EAmC4BA,EAAsC,GAExDN,EAAsBD,EAAtBC,QAASI,EAAaL,EAAbK,SAEX,GAAcqD,EAAAA,EAAAA,MAAZC,QACFC,GAAWuB,EAAAA,EAAAA,IAAiBlF,GAC5B6D,GAAmBC,EAAAA,EAAAA,IAAS1D,EAASJ,SAAS,GAC9C+D,GAAYC,EAAAA,EAAAA,GAAgBH,EAAkB7D,GAqB9C0B,GAAeC,EAAAA,EAAAA,c,EAAY,uB,IACzBE,EAMsB,EAArBsD,EAAUC,E,wEANXvD,EAAW,CAAC,eAAgB,+CAA+CM,KAAI,SAACC,G,MAAY,CAChGpC,QAAAA,EACAqC,KAAMD,EACNiC,OAAQ,CAACX,EAAS,CAAC,EAAG,Q,iBAGUpB,EAAAA,EAAAA,GAAY+C,EAAUxD,G,mBAA5B,GAAqC,gBAA1DsD,EAAqB,EAAqC,GAAhDC,EAAW,EAAqC,GAEjE1C,GAAS,SAAC8B,G,OAAe,KACpBA,EAAS,CACZjE,eAAe,EACf0E,UAAW,KACNT,EAAUS,UAAS,CACtB9B,yBAA0B,IAAIL,IAAJ,CAAcqC,EAAS,GAAG,GAAGpC,YACvDO,sBAAuB,IAAIR,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YACtDQ,oBAAqB,IAAIT,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YACpDS,cAAe,IAAIV,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YAC9CK,WAAY+B,EAAS,GAAG,KAE1BtC,cAAe,KACV2B,EAAU3B,cAAa,CAC1BM,yBAA0B,IAAIL,IAAJ,CAAcqC,EAAS,GAAG,GAAGpC,YACvDO,sBAAuB,IAAIR,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YACtDQ,oBAAqB,IAAIT,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YACpDS,cAAe,IAAIV,IAAJ,CAAcsC,EAAQ,GAAG,GAAG,GAAGrC,YAC9CK,WAAY+B,EAAS,GAAG,U,yNAG3B,CAACzB,EAAS1D,IAEP2E,GAAehD,EAAAA,EAAAA,cAAY,WAC/Be,EAAS,KAAKQ,MACb,IAEH,OAAO,KAAKF,EAAO,CAAAe,UAAAA,EAAWJ,SAAAA,EAAUc,aAtDnB,SAACjE,EAAiB8E,G,OACrC5C,GAAS,SAAC8B,G,OAAe,KACpBA,EACH,KAACc,EAAS,KACLd,EAAUc,GAAO,CACpBjC,YAAa7C,UAiDmCkE,aA7CjC,SAACY,GACpB5C,GAAS,SAAC8B,G,OAAe,KACpBA,EACH,KAACc,EAAS,KACLd,EAAUc,GAAO,CACpBlC,YAAY,UAwCkD1B,aAAAA,EAAciD,aAAAA,KClFpF,EAPuC,Y,IAAG5E,EAAG,EAAHA,IAClC6E,GAAgBW,EAAAA,EAAAA,GAAsBxF,GACtC+E,EAAgBU,EAAsBzF,GAE5C,OAAO,SAACiF,EAAAA,GAAe,CAACjF,IAAKA,EAAK6E,cAAeA,EAAeE,cAAeA,K,WCGjF,EAPuC,Y,IAAG/E,EAAG,EAAHA,IAClC6E,GAAgBW,EAAAA,EAAAA,GAAsBxF,GACtC+E,GAAgBW,EAAAA,EAAAA,GAAsB1F,GAE5C,OAAO,SAACiF,EAAAA,GAAe,CAACjF,IAAKA,EAAK6E,cAAeA,EAAeE,cAAeA,K,WCL3EY,EAAqBC,EAAAA,GAAAA,QAAkB,SAAC5F,G,OAASA,EAAI6F,YAwB3D,EAtBgB,WACd,OACE,SAACC,EAAAA,EAAS,C,UACR,SAACC,EAAAA,EAAS,CAACC,SAAS,QAAQC,EAAE,OAAOC,MAAM,OAAOC,GAAG,YAAYC,GAAI,CAAC,OAAQ,OAAQ,Q,SACnFT,EAAYvD,KAAI,SAACpC,GAChB,OAAQA,EAAIqG,SACV,KAAK,EACH,OAAO,SAACC,EAAa,CAActG,IAAKA,GAAbA,EAAImG,IACjC,KAAK,EACH,OAAO,SAACI,EAAa,CAAcvG,IAAKA,GAAbA,EAAImG,IACjC,KAAK,EACL,KAAK,IACH,OAAO,SAACK,EAAa,CAAcxG,IAAKA,GAAbA,EAAImG,IACjC,QACE,OAAO,cCrBfM,EAAc,WAClB,OAAO,SAACC,EAAO,KAGjBD,EAAYE,OAASC,EAAAA,EAErB,U","sources":["webpack://_N_E/?1fb5","webpack://_N_E/./src/views/Ifos/hooks/v1/useGetPublicIfoData.ts","webpack://_N_E/./src/views/Ifos/hooks/v1/useGetWalletIfoData.ts","webpack://_N_E/./src/views/Ifos/components/IfoCardV1Data.tsx","webpack://_N_E/./src/views/Ifos/hooks/v2/useGetWalletIfoData.ts","webpack://_N_E/./src/views/Ifos/components/IfoCardV2Data.tsx","webpack://_N_E/./src/views/Ifos/components/IfoCardV3Data.tsx","webpack://_N_E/./src/views/Ifos/PastIfo.tsx","webpack://_N_E/./src/pages/ifo/history.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/ifo/history\",\n      function () {\n        return require(\"private-next-pages/ifo/history.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/ifo/history\"])\n      });\n    }\n  ","import { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    isInitialized: false,\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    thresholdPoints: undefined,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const fetchIfoData = useCallback(\n    async (currentBlock: number) => {\n      const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\n        address,\n        name: method,\n      }))\n\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState((prev) => ({\n        ...prev,\n        isInitialized: true,\n        status,\n        blocksRemaining,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        progress,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        startBlockNum,\n        endBlockNum,\n        [PoolIds.poolUnlimited]: {\n          ...prev.poolUnlimited,\n          raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n          totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\n        },\n      }))\n    },\n    [address, releaseBlockNumber],\n  )\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\nconst initialState = {\n  isInitialized: false,\n  [PoolIds.poolUnlimited]: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO, // Not used\n  },\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>(initialState)\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(currency.address, false)\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      ...prevState,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      ...prevState,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\n      address,\n      name: method,\n      params: [account],\n    }))\n\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n    const parsedUserInfo: UserInfo = userInfoResponse\n      ? {\n          amount: new BigNumber(userInfoResponse.amount.toString()),\n          claimed: userInfoResponse.claimed,\n        }\n      : { amount: BIG_ZERO, claimed: false }\n\n    setState((prevState) => ({\n      isInitialized: true,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [account, address])\n\n  const resetIfoData = useCallback(() => {\n    setState(initialState)\n  }, [])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\n}\n\nexport default useGetWalletIfoData\n","import useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV1Data\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\nconst initialState = {\n  isInitialized: false,\n  poolBasic: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n  poolUnlimited: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>(initialState)\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(currency.address, false)\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      isInitialized: true,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address])\n\n  const resetIfoData = useCallback(() => {\n    setState({ ...initialState })\n  }, [])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\n}\n\nexport default useGetWalletIfoData\n","import useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV2Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV2Data\n","import useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV3Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV3Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV3Data\n","import { ifosConfig } from 'config/constants'\nimport Container from 'components/Layout/Container'\nimport { Ifo } from 'config/constants/types'\nimport IfoCardV1Data from './components/IfoCardV1Data'\nimport IfoCardV2Data from './components/IfoCardV2Data'\nimport IfoCardV3Data from './components/IfoCardV3Data'\nimport IfoLayout from './components/IfoLayout'\n\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\n\nconst PastIfo = () => {\n  return (\n    <Container>\n      <IfoLayout maxWidth=\"736px\" m=\"auto\" width=\"100%\" id=\"past-ifos\" py={['24px', '24px', '40px']}>\n        {inactiveIfo.map((ifo) => {\n          switch (ifo.version) {\n            case 1:\n              return <IfoCardV1Data key={ifo.id} ifo={ifo} />\n            case 2:\n              return <IfoCardV2Data key={ifo.id} ifo={ifo} />\n            case 3:\n            case 3.1:\n              return <IfoCardV3Data key={ifo.id} ifo={ifo} />\n            default:\n              return null\n          }\n        })}\n      </IfoLayout>\n    </Container>\n  )\n}\n\nexport default PastIfo\n","import { IfoPageLayout } from '../../views/Ifos'\nimport PastIfo from '../../views/Ifos/PastIfo'\n\nconst PastIfoPage = () => {\n  return <PastIfo />\n}\n\nPastIfoPage.Layout = IfoPageLayout\n\nexport default PastIfoPage\n"],"names":["window","__NEXT_P","push","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","useState","isInitialized","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","thresholdPoints","undefined","PoolIds","raisingAmountPool","BIG_ZERO","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","fetchIfoData","useCallback","currentBlock","ifoCalls","startBlock","endBlock","raisingAmount","totalAmount","totalBlocks","map","method","name","multicallv2","ifoV1Abi","toNumber","getStatus","setState","prev","BSC_BLOCK_TIME","poolUnlimited","BigNumber","toString","state","currencyPriceInUSD","initialState","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","useWeb3React","account","contract","useIfoV1Contract","currencyContract","useERC20","allowance","useIfoAllowance","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","params","amount","claimed","prevState","setPendingTx","setIsClaimed","resetIfoData","publicIfoData","useGetPublicIfoV1Data","walletIfoData","useGetWalletIfoV1Data","IfoFoldableCard","poolBasic","useIfoV2Contract","userInfo","amounts","ifoV2Abi","poolId","useGetPublicIfoV2Data","useGetWalletIfoV2Data","useGetWalletIfoV3Data","inactiveIfo","ifosConfig","isActive","Container","IfoLayout","maxWidth","m","width","id","py","version","IfoCardV1Data","IfoCardV2Data","IfoCardV3Data","PastIfoPage","PastIfo","Layout","IfoPageLayout"],"sourceRoot":""}