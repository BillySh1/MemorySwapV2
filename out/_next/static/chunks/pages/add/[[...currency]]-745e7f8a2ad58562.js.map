{"version":3,"file":"static/chunks/pages/add/[[...currency]]-745e7f8a2ad58562.js","mappings":"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","sources":["webpack://_N_E/?b070","webpack://_N_E/./src/components/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/hooks/useTransactionDeadline.ts","webpack://_N_E/./src/hooks/useCurrentBlockTimestamp.ts","webpack://_N_E/./src/state/mint/hooks.ts","webpack://_N_E/./src/views/AddLiquidity/PoolPriceBar.tsx","webpack://_N_E/./src/views/AddLiquidity/ConfirmAddModalBottom.tsx","webpack://_N_E/./src/views/Swap/components/ConfirmAddLiquidityModal.tsx","webpack://_N_E/./src/views/AddLiquidity/index.tsx","webpack://_N_E/./src/pages/add/[[...currency]].tsx","webpack://_N_E/./src/utils/maxAmountSpend.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/add/[[...currency]]\",\n      function () {\n        return require(\"private-next-pages/add/[[...currency]].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/add/[[...currency]]\"])\n      });\n    }\n  ","import { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<Props> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title={t('Unsupported Assets')} maxWidth=\"420px\" onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link external small color=\"primaryDark\" href={getBscScanLink(token.address, 'address', chainId)}>\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            {t(\n              'Some assets are not available through this interface because they may not work well with our smart contract or we are unable to allow trading for legal reasons.',\n            )}\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const { t } = useTranslation()\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        {t('Read more about unsupported assets')}\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { wrappedCurrency, wrappedCurrencyAmount } from 'utils/wrappedCurrency'\nimport tryParseAmount from 'utils/tryParseAmount'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId),\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Invalid pair')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn } from '../../components/Layout/Column'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { ONE_BIPS } from '../../config/constants'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@pancakeswap/sdk'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { Field } from '../../state/mint/actions'\n\nfunction ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  currencies,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd,\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  currencies: { [field in Field]?: Currency }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Rates')}</Text>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n            currencies[Field.CURRENCY_B]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n            currencies[Field.CURRENCY_A]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Share of Pool')}:</Text>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <Button width=\"100%\" onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n      </Button>\n    </>\n  )\n}\n\nexport default ConfirmAddModalBottom\n","import React, { useCallback } from 'react'\nimport { Currency, CurrencyAmount, Fraction, Percent, Token, TokenAmount } from '@pancakeswap/sdk'\nimport { Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from 'components/TransactionConfirmationModal'\nimport { AutoColumn } from 'components/Layout/Column'\nimport Row from 'components/Layout/Row'\nimport { Field } from 'state/burn/actions'\nimport { DoubleCurrencyLogo } from 'components/Logo'\nimport ConfirmAddModalBottom from '../../AddLiquidity/ConfirmAddModalBottom'\n\ninterface ConfirmAddLiquidityModalProps {\n  title: string\n  customOnDismiss: () => void\n  attemptingTxn: boolean\n  hash: string\n  pendingText: string\n  currencies: { [field in Field]?: Currency }\n  noLiquidity: boolean\n  allowedSlippage: number\n  liquidityErrorMessage: string\n  price: Fraction\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  onAdd: () => void\n  poolTokenPercentage: Percent\n  liquidityMinted: TokenAmount\n  currencyToAdd: Token\n}\n\nconst ConfirmAddLiquidityModal: React.FC<InjectedModalProps & ConfirmAddLiquidityModalProps> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  price,\n  currencies,\n  noLiquidity,\n  allowedSlippage,\n  parsedAmounts,\n  liquidityErrorMessage,\n  onAdd,\n  poolTokenPercentage,\n  liquidityMinted,\n  currencyToAdd,\n}) => {\n  const { t } = useTranslation()\n\n  const modalHeader = useCallback(() => {\n    return noLiquidity ? (\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"48px\" marginRight=\"10px\">\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n        </Text>\n        <DoubleCurrencyLogo\n          currency0={currencies[Field.CURRENCY_A]}\n          currency1={currencies[Field.CURRENCY_B]}\n          size={30}\n        />\n      </Flex>\n    ) : (\n      <AutoColumn>\n        <Flex alignItems=\"center\">\n          <Text fontSize=\"48px\" marginRight=\"10px\">\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </Flex>\n        <Row>\n          <Text fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </Text>\n        </Row>\n        <Text small textAlign=\"left\" my=\"24px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }, [currencies, liquidityMinted, allowedSlippage, noLiquidity, t])\n\n  const modalBottom = useCallback(() => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }, [currencies, noLiquidity, onAdd, parsedAmounts, poolTokenPercentage, price])\n\n  const confirmationContent = useCallback(\n    () =>\n      liquidityErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={liquidityErrorMessage} />\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [onDismiss, modalBottom, modalHeader, liquidityErrorMessage],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      title={title}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      currencyToAdd={currencyToAdd}\n      hash={hash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n\nexport default ConfirmAddLiquidityModal\n","import { useCallback, useEffect, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { logError } from 'utils/sentry'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport { CHAIN_ID } from 'config/constants/networks'\nimport { AppDispatch } from '../../state'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { RowBetween } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport { PairState } from '../../hooks/usePairs'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field, resetMintState } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport { currencyId } from '../../utils/currencyId'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\nimport ConfirmAddLiquidityModal from '../Swap/components/ConfirmAddLiquidityModal'\n\nexport default function AddLiquidity() {\n  const router = useRouter()\n  const [currencyIdA, currencyIdB] = router.query.currency || []\n\n  const { account, chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  useEffect(() => {\n    if (!currencyIdA && !currencyIdB) {\n      dispatch(resetMintState())\n    }\n  }, [dispatch, currencyIdA, currencyIdB])\n\n  const oneCurrencyIsWBNB = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\n  )\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [{ attemptingTxn, liquidityErrorMessage, txHash }, setLiquidityState] = useState<{\n    attemptingTxn: boolean\n    liquidityErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    liquidityErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS[CHAIN_ID])\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS[CHAIN_ID])\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const routerContract = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsBNB = currencyB === ETHER\n      estimate = routerContract.estimateGas.addLiquidityETH\n      method = routerContract.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsBNB ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsBNB ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsBNB ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = routerContract.estimateGas.addLiquidity\n      method = routerContract.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n        }),\n      )\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage: err && err.code !== 4001 ? `Add Liquidity failed: ${err.message}` : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        router.replace(`/add/${currencyIdB}/${currencyIdA}`, undefined, { shallow: true })\n      } else if (currencyIdB) {\n        router.replace(`/add/${newCurrencyIdA}/${currencyIdB}`, undefined, { shallow: true })\n      } else {\n        router.replace(`/add/${newCurrencyIdA}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdB, router, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          router.replace(`/add/${currencyIdB}/${newCurrencyIdB}`, undefined, { shallow: true })\n        } else {\n          router.replace(`/add/${newCurrencyIdB}`, undefined, { shallow: true })\n        }\n      } else {\n        router.replace(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdA, router, currencyIdB],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <ConfirmAddLiquidityModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n      allowedSlippage={allowedSlippage}\n      onAdd={onAdd}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      noLiquidity={noLiquidity}\n      poolTokenPercentage={poolTokenPercentage}\n      liquidityMinted={liquidityMinted}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          title={t('Add Liquidity')}\n          subtitle={t('Add liquidity to receive LP tokens')}\n          helper={t(\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\n          )}\n          backTo=\"/liquidity\"\n        />\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <Message variant=\"warning\">\n                  <div>\n                    <Text bold mb=\"8px\">\n                      {t('You are the first liquidity provider.')}\n                    </Text>\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                  </div>\n                </Message>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <AddIcon width=\"16px\" />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <Text fontSize=\"14px\">\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                    </Text>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <Button disabled mb=\"4px\">\n                {t('Unsupported Asset')}\n              </Button>\n            ) : !account ? (\n              <ConnectWalletButton />\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    if (expertMode) {\n                      onAdd()\n                    } else {\n                      setLiquidityState({\n                        attemptingTxn: false,\n                        liquidityErrorMessage: undefined,\n                        txHash: undefined,\n                      })\n                      onPresentAddLiquidityModal()\n                    }\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                >\n                  {error ?? t('Supply')}\n                </Button>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </CardBody>\n      </AppBody>\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWBNB} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import { GetStaticPaths, GetStaticProps } from 'next'\nimport AddLiquidity from 'views/AddLiquidity'\n\nexport default AddLiquidity\n\nconst OLD_PATH_STRUCTURE = /^(0x[a-fA-F0-9]{40}|BNB)-(0x[a-fA-F0-9]{40}|BNB)$/\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  return {\n    paths: [{ params: { currency: [] } }],\n    fallback: true,\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { currency = [] } = params\n  const [currencyIdA, currencyIdB] = currency\n  const match = currencyIdA?.match(OLD_PATH_STRUCTURE)\n\n  if (match?.length) {\n    return {\n      redirect: {\n        statusCode: 301,\n        destination: `/add/${match[1]}/${match[2]}`,\n      },\n    }\n  }\n\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\n    return {\n      redirect: {\n        statusCode: 303,\n        destination: `/add/${currencyIdA}`,\n      },\n    }\n  }\n\n  return {\n    props: {},\n  }\n}\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\nimport { MIN_BNB } from '../config/constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\n    }\n    return CurrencyAmount.ether(JSBI.BigInt(0))\n  }\n  return currencyAmount\n}\n"],"names":["window","__NEXT_P","push","DetailsFooter","styled","theme","colors","text","invertedContrast","UnsupportedModal","currencies","onDismiss","useActiveWeb3React","chainId","useTranslation","t","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","Modal","title","maxWidth","AutoColumn","gap","token","Object","keys","includes","address","AutoRow","align","CurrencyLogo","size","Text","symbol","Link","external","small","color","href","getBscScanLink","concat","UnsupportedCurrencyFooter","onPresentModal","useModal","Button","variant","onClick","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","useSingleCallResult","multicall","useMulticallContract","result","useCurrentBlockTimestamp","useMemo","add","ZERO","JSBI","useMintState","mint","price","noLiquidity","poolTokenPercentage","justify","toSignificant","fontSize","pt","assetA","Field","assetB","invert","lessThan","ONE_BIPS","toFixed","parsedAmounts","onAdd","RowBetween","asset","RowFixed","style","marginRight","justifyContent","width","mt","customOnDismiss","attemptingTxn","hash","pendingText","allowedSlippage","liquidityErrorMessage","liquidityMinted","currencyToAdd","modalHeader","useCallback","Flex","alignItems","DoubleCurrencyLogo","currency0","currency1","Row","textAlign","my","slippage","modalBottom","ConfirmAddModalBottom","confirmationContent","TransactionErrorContent","message","ConfirmationModalContent","topContent","bottomContent","TransactionConfirmationModal","content","router","useRouter","query","currencyIdA","currencyIdB","account","library","dispatch","useDispatch","gasPrice","useGasPrice","currencyA","useCurrency","currencyB","useEffect","resetMintState","oneCurrencyIsWBNB","Boolean","currencyEquals","WETH","expertMode","useIsExpertMode","independentField","typedValue","otherTypedValue","useDerivedMintInfo","currencyBalances","error","dependentField","undefined","usePair","pairState","pair","totalSupply","useTotalSupply","liquidityToken","PairState","raw","balances","useCurrencyBalances","independentAmount","tryParseAmount","dependentAmount","wrappedIndependentAmount","wrappedCurrencyAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ETHER","CurrencyAmount","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","tokenAmountA","tokenAmountB","getLiquidityMinted","console","Percent","useMintActionHandlers","onFieldAInput","typeInput","field","onFieldBInput","isValid","useState","txHash","deadline","useUserSlippageTolerance","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","useApproveCallback","ROUTER_ADDRESS","CHAIN_ID","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","routerContract","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsBNB","getRouterContract","calculateSlippageAmount","estimateGas","addLiquidityETH","toString","toHexString","BigNumber","addLiquidity","setLiquidityState","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","summary","catch","err","code","logError","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","replace","shallow","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","CURRENCY_A","CURRENCY_B","onPresentAddLiquidityModal","ConfirmAddLiquidityModal","Page","AppBody","AppHeader","subtitle","helper","backTo","CardBody","ColumnCenter","Message","div","bold","mb","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","AddIcon","LightCard","padding","borderRadius","PoolPriceBar","disabled","ApprovalState","Dots","ConnectWalletButton","minWidth","marginTop","MinimalPositionCard","showUnwrapped","currencyAmount","MIN_BNB"],"sourceRoot":""}