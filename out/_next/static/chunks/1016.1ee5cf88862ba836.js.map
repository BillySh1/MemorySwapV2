{"version":3,"file":"static/chunks/1016.1ee5cf88862ba836.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/isNaN.js","webpack://_N_E/./node_modules/lodash/isNumber.js","webpack://_N_E/./src/components/Layout/Flex.tsx","webpack://_N_E/./src/components/PairPriceDisplay.tsx","webpack://_N_E/./src/utils/formatInfoNumbers.ts","webpack://_N_E/./src/views/Predictions/components/ChainlinkChart.tsx"],"sourcesContent":["var isNumber = require('./isNumber');\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on\n * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n * `undefined` and other non-number values.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * _.isNaN(NaN);\n * // => true\n *\n * _.isNaN(new Number(NaN));\n * // => true\n *\n * isNaN(undefined);\n * // => true\n *\n * _.isNaN(undefined);\n * // => false\n */\nfunction isNaN(value) {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n}\n\nmodule.exports = isNaN;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","import { Flex, FlexProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport interface FlexGapProps extends FlexProps {\n  gap?: string\n  rowGap?: string\n  columnGap?: string\n}\n\nexport const FlexGap = styled(Flex)<FlexGapProps>`\n  gap: ${({ gap }) => gap};\n  row-gap: ${({ rowGap }) => rowGap};\n  column-gap: ${({ columnGap }) => columnGap};\n`\n\nexport default FlexLayout\n","import { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport { FC } from 'react'\nimport styled from 'styled-components'\nimport { formatAmount, formatAmountNotation } from 'utils/formatInfoNumbers'\nimport { FlexGap, FlexGapProps } from './Layout/Flex'\n\nconst formatOptions = {\n  notation: 'standard' as formatAmountNotation,\n  displayThreshold: 0.001,\n  tokenPrecision: true,\n}\n\ninterface TokenDisplayProps extends FlexGapProps {\n  value?: number | string\n  inputSymbol?: string\n  outputSymbol?: string\n  format?: boolean\n}\n\nconst TextLabel = styled(Text)`\n  font-size: 32px;\n  line-height: 1.1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PairPriceDisplay: FC<TokenDisplayProps> = ({\n  value,\n  inputSymbol,\n  outputSymbol,\n  children,\n  format = true,\n  ...props\n}) => {\n  return value ? (\n    <FlexGap alignItems=\"baseline\" {...props}>\n      <Flex alignItems=\"inherit\">\n        <TextLabel mr=\"8px\" bold>\n          {format ? formatAmount(typeof value === 'string' ? parseFloat(value) : value, formatOptions) : value}\n        </TextLabel>\n        {inputSymbol && outputSymbol && (\n          <Text color=\"textSubtle\" fontSize=\"20px\" bold lineHeight={1.1}>\n            {`${inputSymbol}/${outputSymbol}`}\n          </Text>\n        )}\n      </Flex>\n      {children}\n    </FlexGap>\n  ) : (\n    <Skeleton height=\"36px\" width=\"128px\" {...props} />\n  )\n}\n\nexport default PairPriceDisplay\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area, Dot } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\nimport { laggyMiddleware, useSWRContract, useSWRMulticall } from 'hooks/useSWRContract'\nimport useSWRImmutable from 'swr/immutable'\nimport { useSWRConfig } from 'swr'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport { getChainlinkOracleAddress } from 'utils/addressHelpers'\nimport { ChainlinkOracle } from 'config/abi/types'\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetRoundsByCloseOracleId, useGetSortedRounds } from 'state/predictions/hooks'\nimport styled from 'styled-components'\nimport { Flex, Text, FlexProps } from '@pancakeswap/uikit'\nimport PairPriceDisplay from 'components/PairPriceDisplay'\nimport { NodeRound } from 'state/types'\nimport useSwiper from '../hooks/useSwiper'\nimport usePollOraclePrice from '../hooks/usePollOraclePrice'\nimport { CHART_DOT_CLICK_EVENT } from '../helpers'\n\nfunction useChainlinkLatestRound() {\n  const chainlinkOracleContract = useChainlinkOracleContract(false)\n  // Can refactor to subscription later\n  const lastRound = useSWRContract([chainlinkOracleContract, 'latestRound'], {\n    dedupingInterval: 10 * 1000,\n    refreshInterval: 10 * 1000,\n    compare: (a, b) => {\n      // check is equal\n      if (!a || !b) return false\n      return a.eq(b)\n    },\n  })\n\n  return lastRound\n}\n\nconst chainlinkAddress = getChainlinkOracleAddress()\nfunction useChainlinkRoundDataSet() {\n  const lastRound = useChainlinkLatestRound()\n\n  const calls = useMemo(() => {\n    return lastRound.data\n      ? Array.from({ length: 50 }).map((_, i) => ({\n          address: chainlinkAddress,\n          name: 'getRoundData',\n          params: [lastRound.data.sub(i)],\n        }))\n      : null\n  }, [lastRound.data])\n\n  const { data, error } = useSWRMulticall<Awaited<ReturnType<ChainlinkOracle['getRoundData']>>[]>(\n    chainlinkOracleAbi,\n    calls,\n    {\n      use: [laggyMiddleware],\n    },\n  )\n\n  const computedData: ChartData[] = useMemo(() => {\n    return (\n      data\n        ?.filter((d) => !!d && d.answer.gt(0))\n        .map(({ answer, roundId, startedAt }) => {\n          return {\n            answer: formatBigNumberToFixed(answer, 3, 8),\n            roundId: roundId.toString(),\n            startedAt: startedAt.toNumber(),\n          }\n        }) ?? []\n    )\n  }, [data])\n\n  return { data: computedData, error }\n}\n\ntype ChartData = {\n  answer: string\n  roundId: string\n  startedAt: number\n}\n\nconst HoverUpdater = ({ payload }) => {\n  const mutate = useChartHoverMutate()\n  useEffect(() => {\n    mutate(payload)\n  }, [mutate, payload])\n\n  return null\n}\n\nfunction useChartHover() {\n  const { data } = useSWRImmutable<ChartData>('chainlinkChartHover')\n  return data\n}\n\nfunction useChartHoverMutate() {\n  const { mutate } = useSWRConfig()\n\n  const updateHover = useCallback(\n    (data) => {\n      mutate('chainlinkChartHover', data)\n    },\n    [mutate],\n  )\n\n  return updateHover\n}\n\nconst chartColor = { gradient1: '#00E7B0', gradient2: '#0C8B6C', stroke: '#31D0AA' }\n\nconst ChainlinkChartWrapper = styled(Flex)<{ isMobile?: boolean }>`\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: ${({ theme, isMobile }) => (isMobile ? theme.card.background : theme.colors.gradients.bubblegum)};\n`\n\nconst HoverData = ({ rounds }: { rounds: { [key: string]: NodeRound } }) => {\n  const hoverData = useChartHover()\n  const { price: answerAsBigNumber } = usePollOraclePrice()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  return (\n    <PairPriceDisplay\n      width=\"100%\"\n      value={hoverData ? hoverData.answer : formatBigNumberToFixed(answerAsBigNumber, 3, 8)}\n      inputSymbol=\"BNB\"\n      outputSymbol=\"USD\"\n      format={false}\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      columnGap=\"12px\"\n    >\n      {hoverData && (\n        <FlexGap minWidth=\"51%\" alignItems=\"flex-end\" gap=\"12px\" height=\"22px\">\n          <Text color=\"textSubtle\" lineHeight={1.1}>\n            {new Date(hoverData.startedAt * 1000).toLocaleString(locale, {\n              year: 'numeric',\n              day: 'numeric',\n              month: 'short',\n              hour: '2-digit',\n              minute: '2-digit',\n            })}\n          </Text>\n          {rounds[hoverData.roundId] && (\n            <Text fontSize=\"20px\" color=\"secondary\" bold lineHeight={1.1}>\n              {t('Round')}: #{rounds[hoverData.roundId].epoch}\n            </Text>\n          )}\n        </FlexGap>\n      )}\n    </PairPriceDisplay>\n  )\n}\n\nconst ChainLinkChart = (props: FlexProps & { isMobile?: boolean }) => {\n  const { data } = useChainlinkRoundDataSet()\n  const rounds = useGetRoundsByCloseOracleId()\n\n  if (!data.length) {\n    return <LineChartLoader />\n  }\n\n  return (\n    <ChainlinkChartWrapper {...props}>\n      <FlexGap\n        flexDirection=\"row\"\n        pt=\"12px\"\n        px=\"20px\"\n        alignItems=\"center\"\n        flexWrap=\"wrap\"\n        columnGap=\"12px\"\n        height={['56px', , , , '44px']}\n      >\n        <HoverData rounds={rounds} />\n      </FlexGap>\n      <Flex height={[`calc(100% - 56px)`]}>\n        <Chart rounds={rounds} data={data} />\n      </Flex>\n    </ChainlinkChartWrapper>\n  )\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst Chart = ({\n  rounds,\n  data,\n}: {\n  rounds: {\n    [key: string]: NodeRound\n  }\n  data: ChartData[]\n}) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { isDark, theme } = useTheme()\n  const mutate = useChartHoverMutate()\n\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 20,\n          right: 0,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          mutate(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={chartColor.gradient1} stopOpacity={0.34} />\n            <stop offset=\"100%\" stopColor={chartColor.gradient2} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"startedAt\"\n          tickFormatter={(time) => {\n            return new Date(time * 1000).toLocaleString(locale, {\n              hour: 'numeric',\n              minute: '2-digit',\n              hourCycle: 'h24',\n            })\n          }}\n          color={theme.colors.text}\n          fontSize=\"12px\"\n          minTickGap={8}\n          reversed\n          tick={{ fill: theme.colors.text }}\n        />\n        <XAxis dataKey=\"roundId\" hide />\n        <YAxis\n          dataKey=\"answer\"\n          tickCount={6}\n          scale=\"linear\"\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          domain={['auto', 'auto']}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.textSubtle, strokeDasharray: '3 3' }}\n          contentStyle={{ display: 'none' }}\n          formatter={(_, __, props) => <HoverUpdater payload={props.payload} />}\n        />\n        <Area\n          dataKey=\"answer\"\n          type=\"linear\"\n          stroke={chartColor.stroke}\n          fill=\"url(#gradient)\"\n          strokeWidth={2}\n          activeDot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return <ActiveDot {...props} />\n            }\n            return null\n          }}\n          dot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return (\n                <Dot\n                  {...props}\n                  r={4}\n                  fill={isDark ? theme.colors.gold : theme.colors.secondary}\n                  fillOpacity={1}\n                  strokeWidth={0}\n                />\n              )\n            }\n            return null\n          }}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nconst ActiveDot = (props) => {\n  const { swiper } = useSwiper()\n  const sortedRounds = useGetSortedRounds()\n  const { theme } = useTheme()\n\n  return (\n    <Dot\n      {...props}\n      r={12}\n      stroke={theme.colors.primary}\n      strokeWidth={10}\n      fill={theme.colors.background}\n      style={{ cursor: 'pointer' }}\n      onClick={() => {\n        const roundIndex = sortedRounds.findIndex((round) => round.closeOracleId === props.payload.roundId)\n        if (roundIndex >= 0 && swiper) {\n          swiper.slideTo(roundIndex)\n          swiper.el.dispatchEvent(new Event(CHART_DOT_CLICK_EVENT))\n        }\n      }}\n    />\n  )\n}\n\nexport default ChainLinkChart\n"],"names":["isNumber","module","exports","value","baseGetTag","isObjectLike","FlexLayout","styled","FlexGap","Flex","gap","rowGap","columnGap","formatOptions","notation","displayThreshold","tokenPrecision","TextLabel","Text","theme","mediaQueries","lg","inputSymbol","outputSymbol","children","format","props","alignItems","mr","bold","formatAmount","parseFloat","color","fontSize","lineHeight","Skeleton","height","width","amount","options","isInteger","toFixed","match","precision","repeat","amountWithPrecision","numeral","toUpperCase","chainlinkAddress","getChainlinkOracleAddress","useChainlinkRoundDataSet","lastRound","chainlinkOracleContract","useChainlinkOracleContract","useSWRContract","dedupingInterval","refreshInterval","compare","a","b","eq","useChainlinkLatestRound","calls","useMemo","data","Array","from","length","map","_","i","address","name","params","sub","useSWRMulticall","chainlinkOracleAbi","use","laggyMiddleware","error","filter","d","answer","gt","roundId","startedAt","formatBigNumberToFixed","toString","toNumber","HoverUpdater","payload","mutate","useChartHoverMutate","useEffect","useSWRConfig","useCallback","chartColor","ChainlinkChartWrapper","isMobile","card","background","colors","gradients","bubblegum","HoverData","rounds","hoverData","useSWRImmutable","price","usePollOraclePrice","useTranslation","t","currentLanguage","locale","PairPriceDisplay","answerAsBigNumber","flexWrap","minWidth","Date","toLocaleString","year","day","month","hour","minute","epoch","Chart","useTheme","isDark","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","undefined","defs","linearGradient","id","x1","y1","x2","y2","stop","offset","stopColor","stopOpacity","XAxis","dataKey","tickFormatter","time","hourCycle","text","minTickGap","reversed","tick","fill","hide","YAxis","tickCount","scale","textSubtle","domain","orientation","dx","Tooltip","cursor","stroke","strokeDasharray","contentStyle","display","formatter","__","Area","type","strokeWidth","activeDot","ActiveDot","dot","Dot","r","gold","secondary","fillOpacity","useSwiper","swiper","sortedRounds","useGetSortedRounds","primary","style","onClick","roundIndex","findIndex","round","closeOracleId","slideTo","el","dispatchEvent","Event","CHART_DOT_CLICK_EVENT","useGetRoundsByCloseOracleId","flexDirection","pt","px","LineChartLoader"],"sourceRoot":""}