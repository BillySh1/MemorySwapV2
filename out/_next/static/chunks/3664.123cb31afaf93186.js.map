{"version":3,"file":"static/chunks/3664.123cb31afaf93186.js","mappings":"kNAEA,0B,kSAKA,IAAMA,EAAqB,IAAIC,IAAJ,CAAQ,CAAEC,WAAW,IAAQC,QAAQC,GAMjD,SAAeC,EAAaC,G,OAAbD,EAAY,sB,SAAZA,I,OAAAA,EAAf,uBAA4BC,G,IACnCC,EAEGC,EACDC,EACAC,EACFC,EAcEC,EAGFZ,EAAAA,EADIa,E,iEArBJN,GAAiBO,EAAAA,EAAAA,GAAUR,GAExBE,EAAI,E,YAAGA,EAAID,EAAKQ,QAAM,C,uBACvBN,EAAMF,EAAKC,GACXE,EAASF,IAAMD,EAAKQ,OAAS,EAC/BJ,OAAAA,E,kBAEeK,MAAMP,G,OAAvBE,EAAW,EAAH,K,qDAERM,QAAQC,MAAM,uBAAwBZ,EAAS,EAAF,KACzCI,EAAQ,C,gBAAA,MAAM,IAAIS,MAAM,2BAAmC,OAARb,I,kDAIpDK,EAASS,GAAI,C,oBACZV,EAAQ,C,gBAAA,MAAM,IAAIS,MAAM,2BAAmC,OAARb,I,gEAItCK,EAASC,O,WAAtBA,EAAO,EAAH,KACLZ,EAAmBY,GAAO,C,gBAM7B,MALMC,EAIE,QAHNb,EAAyB,QAAzBA,EAAAA,EAAmBqB,cAAM,IAAzBrB,OAAAA,EAAAA,EAA2BsB,QAAe,SAACC,EAAML,G,IACLA,EAApCM,EAAM,GAA8BN,OAA3B,EAAeO,SAAS,KAAuB,OAAP,QAAbP,EAAAA,EAAMQ,eAAO,IAAbR,EAAAA,EAAiB,IAC3D,OAAOK,EAAKR,OAAS,EAAI,GAAYS,OAATD,EAAK,MAAQ,OAAJC,GAAQ,GAAO,OAAJA,KAC/C,WAAG,IAHNxB,EAAAA,EAGU,gBACN,IAAImB,MAAM,iCAAkD,OAAjBN,I,iCAE5CD,G,QA1BwBJ,I,uBA4BjC,MAAM,IAAIW,MAAM,mC,2DA/BwB,wB,sBCR3B,SAASL,EAAUa,GAEhC,OADiBA,EAAIC,MAAM,KAAK,GAAGC,eAEjC,IAAK,QACH,MAAO,CAACF,GACV,IAAK,OACH,MAAO,CAAE,QAAqB,OAAdA,EAAIG,OAAO,IAAMH,GACnC,IAAK,O,IACUA,EAAPI,EAAuC,QAAhCJ,EAAAA,EAAIK,MAAM,8BAAsB,IAAhCL,OAAAA,EAAAA,EAAmC,GAChD,MAAO,CAAE,oCAAwC,OAALI,EAAK,KAAK,wBAA4B,OAALA,EAAK,MACpF,IAAK,O,IACUJ,EAAPM,EAAuC,QAAhCN,EAAAA,EAAIK,MAAM,8BAAsB,IAAhCL,OAAAA,EAAAA,EAAmC,GAChD,MAAO,CAAE,oCAAwC,OAALM,EAAK,KAAK,wBAA4B,OAALA,EAAK,MACpF,QACE,MAAO,I","sources":["webpack://_N_E/./src/utils/getTokenList.ts","webpack://_N_E/./src/utils/uriToHttp.ts"],"sourcesContent":["/* eslint-disable no-continue */\n/* eslint-disable no-await-in-loop */\nimport { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n */\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls: string[] = uriToHttp(listUrl)\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url)\n    } catch (error) {\n      console.error('Failed to fetch list', listUrl, error)\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${(error as any).dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'unknown error'\n      throw new Error(`Token list failed validation: ${validationErrors}`)\n    }\n    return json as TokenList\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n","/* eslint-disable no-case-declarations */\n/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'https':\n      return [uri]\n    case 'http':\n      return [`https${uri.substr(4)}`, uri]\n    case 'ipfs':\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    case 'ipns':\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    default:\n      return []\n  }\n}\n"],"names":["tokenListValidator","Ajv","allErrors","compile","schema","getTokenList","listUrl","urls","i","url","isLast","response","json","validationErrors","uriToHttp","length","fetch","console","error","Error","ok","errors","reduce","memo","add","dataPath","message","uri","split","toLowerCase","substr","hash","match","name"],"sourceRoot":""}